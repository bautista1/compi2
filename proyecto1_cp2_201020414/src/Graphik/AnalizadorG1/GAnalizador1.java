/* The following code was generated by JFlex 1.4.3 on 13/03/17 08:30 PM */

package Graphik.AnalizadorG1;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
//import logica.*;
//import principal.*;
//import tecumhuman_p1compi2_cliente.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 13/03/17 08:30 PM from the specification file
 * <tt>scanner1.jflex</tt>
 */
public class GAnalizador1 implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\5\1\16\1\0\1\64\1\5\22\0\1\64\1\54\1\15"+
    "\1\3\1\63\1\62\1\52\1\14\1\40\1\41\1\60\1\57\1\46"+
    "\1\6\1\7\1\4\12\1\1\47\1\0\1\56\1\50\1\55\1\51"+
    "\1\0\1\20\1\32\1\26\1\13\1\22\1\37\1\11\1\36\1\27"+
    "\1\2\1\12\1\31\1\30\1\23\1\25\1\33\1\2\1\21\1\35"+
    "\1\24\1\34\1\17\4\2\1\44\1\0\1\45\1\61\1\10\1\0"+
    "\1\20\1\32\1\26\1\13\1\22\1\37\1\11\1\36\1\27\1\2"+
    "\1\12\1\31\1\30\1\23\1\25\1\33\1\2\1\21\1\35\1\24"+
    "\1\34\1\17\4\2\1\42\1\53\1\43\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\1\5\1\6"+
    "\1\7\2\3\2\1\17\3\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\1\1\5"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\0\2\5\1\0\1\32\2\0\3\3\2\0\1\33"+
    "\23\3\1\34\3\3\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\0\1\47\1\50"+
    "\4\3\1\51\1\52\3\3\1\53\30\3\1\0\6\3"+
    "\1\54\6\3\1\55\10\3\1\56\1\57\4\3\1\60"+
    "\3\3\1\5\3\3\1\61\1\62\3\3\1\63\17\3"+
    "\1\64\1\3\1\65\7\3\1\66\1\3\1\67\4\3"+
    "\1\70\3\3\1\71\4\3\1\72\1\3\1\73\1\74"+
    "\7\3\1\75\6\3\1\76\1\77\5\3\1\100\1\101"+
    "\1\102\2\3\1\103\1\104\1\105\1\106\3\3\1\107"+
    "\1\110\1\111\1\112\1\3\1\113\1\114\1\3\1\115"+
    "\6\3\1\116";

  private static int [] zzUnpackAction() {
    int [] result = new int[268];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\65\0\152\0\237\0\324\0\65\0\u0109\0\u013e"+
    "\0\u0173\0\u01a8\0\u01dd\0\u0212\0\u0247\0\u027c\0\u02b1\0\u02e6"+
    "\0\u031b\0\u0350\0\u0385\0\u03ba\0\u03ef\0\u0424\0\u0459\0\u048e"+
    "\0\u04c3\0\u04f8\0\u052d\0\u0562\0\65\0\65\0\65\0\65"+
    "\0\65\0\65\0\65\0\65\0\u0597\0\65\0\u05cc\0\u0601"+
    "\0\u0636\0\u066b\0\u06a0\0\u06d5\0\65\0\65\0\65\0\65"+
    "\0\u070a\0\u073f\0\u0774\0\u07a9\0\65\0\u07de\0\u0813\0\u0848"+
    "\0\u087d\0\u08b2\0\u08e7\0\u0247\0\65\0\u091c\0\u0951\0\u0986"+
    "\0\u09bb\0\u09f0\0\u0a25\0\u0a5a\0\u0a8f\0\u0ac4\0\u0af9\0\u0b2e"+
    "\0\u0b63\0\u0b98\0\u0bcd\0\u0c02\0\u0c37\0\u0c6c\0\u0ca1\0\u0cd6"+
    "\0\u0d0b\0\u0d40\0\u0d75\0\u0daa\0\65\0\65\0\65\0\u0109"+
    "\0\65\0\65\0\65\0\65\0\65\0\u070a\0\u0ddf\0\65"+
    "\0\65\0\u0e14\0\u0e49\0\u0e7e\0\u0eb3\0\65\0\237\0\u0ee8"+
    "\0\u0f1d\0\u0f52\0\237\0\u0f87\0\u0fbc\0\u0ff1\0\u1026\0\u105b"+
    "\0\u1090\0\u10c5\0\u10fa\0\u112f\0\u1164\0\u1199\0\u11ce\0\u1203"+
    "\0\u1238\0\u126d\0\u12a2\0\u12d7\0\u130c\0\u1341\0\u1376\0\u13ab"+
    "\0\u13e0\0\u1415\0\u144a\0\u147f\0\u14b4\0\u14e9\0\u151e\0\u1553"+
    "\0\u1588\0\u15bd\0\237\0\u15f2\0\u1627\0\u165c\0\u1691\0\u16c6"+
    "\0\u16fb\0\237\0\u1730\0\u1765\0\u179a\0\u17cf\0\u1804\0\u1839"+
    "\0\u186e\0\u18a3\0\237\0\237\0\u18d8\0\u190d\0\u1942\0\u1977"+
    "\0\237\0\u19ac\0\u19e1\0\u1a16\0\65\0\u1a4b\0\u1a80\0\u1ab5"+
    "\0\u1aea\0\237\0\u1b1f\0\u1b54\0\u1b89\0\237\0\u1bbe\0\u1bf3"+
    "\0\u1c28\0\u1c5d\0\u1c92\0\u1cc7\0\u1cfc\0\u1d31\0\u1d66\0\u1d9b"+
    "\0\u1dd0\0\u1e05\0\u1e3a\0\u1e6f\0\u1ea4\0\237\0\u1ed9\0\237"+
    "\0\u1f0e\0\u1f43\0\u1f78\0\u1fad\0\u1fe2\0\u2017\0\u204c\0\237"+
    "\0\u2081\0\237\0\u20b6\0\u20eb\0\u2120\0\u2155\0\237\0\u218a"+
    "\0\u21bf\0\u21f4\0\u2229\0\u225e\0\u2293\0\u22c8\0\u22fd\0\237"+
    "\0\u2332\0\237\0\237\0\u2367\0\u239c\0\u23d1\0\u2406\0\u243b"+
    "\0\u2470\0\u24a5\0\237\0\u24da\0\u250f\0\u2544\0\u2579\0\u25ae"+
    "\0\u25e3\0\237\0\237\0\u2618\0\u264d\0\u2682\0\u26b7\0\u26ec"+
    "\0\237\0\237\0\237\0\u2721\0\u2756\0\237\0\237\0\237"+
    "\0\237\0\u278b\0\u27c0\0\u27f5\0\237\0\237\0\237\0\237"+
    "\0\u282a\0\237\0\237\0\u285f\0\237\0\u2894\0\u28c9\0\u28fe"+
    "\0\u2933\0\u2968\0\u299d\0\237";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[268];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\2\1\12\1\4\1\13\1\14\1\15\1\7\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\4\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\4\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\7\66\0\1\3\5\0"+
    "\1\61\56\0\2\4\5\0\4\4\3\0\21\4\25\0"+
    "\4\62\1\63\1\0\10\62\1\0\46\62\5\0\1\7"+
    "\10\0\1\7\34\0\1\7\10\0\1\7\1\0\1\64"+
    "\4\0\1\65\67\0\1\66\1\0\1\67\52\0\2\4"+
    "\5\0\4\4\3\0\2\4\1\70\16\4\26\0\2\4"+
    "\5\0\4\4\3\0\3\4\1\71\2\4\1\72\12\4"+
    "\27\0\1\73\6\0\3\73\3\0\21\73\25\0\15\74"+
    "\1\75\1\0\46\74\1\0\2\4\5\0\4\4\3\0"+
    "\1\4\1\76\1\4\1\77\2\4\1\100\12\4\26\0"+
    "\2\4\5\0\4\4\3\0\12\4\1\101\6\4\26\0"+
    "\2\4\5\0\4\4\3\0\3\4\1\102\15\4\26\0"+
    "\2\4\5\0\4\4\3\0\4\4\1\103\14\4\26\0"+
    "\2\4\5\0\4\4\3\0\15\4\1\104\3\4\26\0"+
    "\2\4\5\0\4\4\3\0\3\4\1\105\15\4\26\0"+
    "\2\4\5\0\4\4\3\0\1\4\1\106\4\4\1\107"+
    "\12\4\26\0\2\4\5\0\4\4\3\0\4\4\1\110"+
    "\4\4\1\111\7\4\26\0\2\4\5\0\4\4\3\0"+
    "\10\4\1\112\10\4\26\0\2\4\5\0\4\4\3\0"+
    "\12\4\1\113\6\4\26\0\2\4\5\0\4\4\3\0"+
    "\6\4\1\114\12\4\26\0\2\4\5\0\4\4\3\0"+
    "\1\4\1\115\1\116\12\4\1\117\3\4\26\0\2\4"+
    "\5\0\4\4\3\0\3\4\1\120\4\4\1\121\10\4"+
    "\26\0\2\4\5\0\4\4\3\0\1\4\1\122\1\4"+
    "\1\123\15\4\26\0\2\4\5\0\4\4\3\0\1\4"+
    "\1\124\17\4\75\0\1\125\66\0\1\126\1\127\16\0"+
    "\1\7\10\0\1\7\34\0\1\130\10\0\1\7\50\0"+
    "\1\131\3\0\1\132\60\0\1\133\64\0\1\134\73\0"+
    "\1\135\6\0\1\136\63\0\5\62\1\0\10\62\1\0"+
    "\46\62\4\63\1\62\1\137\10\63\1\137\46\63\1\0"+
    "\1\64\5\0\1\61\67\0\1\140\64\0\1\141\53\0"+
    "\2\4\5\0\4\4\3\0\1\4\1\142\17\4\26\0"+
    "\2\4\5\0\4\4\3\0\7\4\1\143\10\4\1\144"+
    "\26\0\2\4\5\0\4\4\3\0\4\4\1\145\14\4"+
    "\41\0\1\146\51\0\2\4\5\0\4\4\3\0\2\4"+
    "\1\147\4\4\1\150\11\4\26\0\2\4\5\0\4\4"+
    "\3\0\2\4\1\151\16\4\26\0\2\4\5\0\4\4"+
    "\3\0\10\4\1\152\10\4\26\0\2\4\5\0\4\4"+
    "\3\0\16\4\1\153\2\4\26\0\2\4\5\0\4\4"+
    "\3\0\5\4\1\154\13\4\26\0\2\4\5\0\4\4"+
    "\3\0\5\4\1\155\13\4\26\0\2\4\5\0\4\4"+
    "\3\0\3\4\1\156\15\4\26\0\2\4\5\0\4\4"+
    "\3\0\2\4\1\157\16\4\26\0\2\4\5\0\3\4"+
    "\1\160\3\0\2\4\1\161\13\4\1\162\2\4\26\0"+
    "\2\4\5\0\4\4\3\0\4\4\1\163\5\4\1\164"+
    "\6\4\26\0\2\4\5\0\4\4\3\0\7\4\1\165"+
    "\1\166\10\4\26\0\2\4\5\0\4\4\3\0\14\4"+
    "\1\167\4\4\26\0\2\4\5\0\4\4\3\0\3\4"+
    "\1\170\15\4\26\0\2\4\5\0\4\4\3\0\1\4"+
    "\1\171\17\4\26\0\2\4\5\0\4\4\3\0\6\4"+
    "\1\172\12\4\26\0\2\4\5\0\4\4\3\0\2\4"+
    "\1\173\16\4\26\0\2\4\5\0\4\4\3\0\6\4"+
    "\1\174\1\4\1\175\10\4\26\0\2\4\5\0\4\4"+
    "\3\0\13\4\1\176\5\4\26\0\2\4\5\0\4\4"+
    "\3\0\12\4\1\177\6\4\26\0\2\4\5\0\4\4"+
    "\3\0\4\4\1\200\14\4\26\0\2\4\5\0\4\4"+
    "\3\0\7\4\1\201\11\4\26\0\2\4\5\0\4\4"+
    "\3\0\2\4\1\202\16\4\26\0\2\4\5\0\4\4"+
    "\3\0\12\4\1\203\6\4\25\0\4\137\1\204\60\137"+
    "\1\0\2\4\5\0\4\4\3\0\14\4\1\205\4\4"+
    "\26\0\2\4\5\0\4\4\3\0\10\4\1\206\10\4"+
    "\26\0\2\4\5\0\4\4\3\0\3\4\1\207\15\4"+
    "\26\0\2\4\5\0\3\4\1\210\3\0\21\4\26\0"+
    "\2\4\5\0\4\4\3\0\10\4\1\211\10\4\26\0"+
    "\2\4\5\0\3\4\1\212\3\0\21\4\26\0\2\4"+
    "\5\0\3\4\1\213\3\0\21\4\26\0\2\4\5\0"+
    "\4\4\3\0\6\4\1\214\12\4\26\0\2\4\5\0"+
    "\4\4\3\0\3\4\1\215\15\4\26\0\2\4\5\0"+
    "\4\4\3\0\1\216\20\4\26\0\2\4\5\0\4\4"+
    "\3\0\11\4\1\217\7\4\26\0\2\4\5\0\4\4"+
    "\3\0\3\4\1\220\15\4\26\0\2\4\5\0\4\4"+
    "\3\0\1\4\1\221\17\4\26\0\2\4\5\0\4\4"+
    "\3\0\6\4\1\222\12\4\26\0\2\4\5\0\4\4"+
    "\3\0\5\4\1\223\13\4\26\0\2\4\5\0\4\4"+
    "\3\0\15\4\1\224\3\4\26\0\2\4\5\0\4\4"+
    "\3\0\12\4\1\225\6\4\26\0\2\4\5\0\4\4"+
    "\3\0\7\4\1\226\11\4\26\0\2\4\5\0\4\4"+
    "\3\0\2\4\1\227\3\4\1\230\12\4\26\0\2\4"+
    "\5\0\4\4\3\0\4\4\1\231\14\4\26\0\2\4"+
    "\5\0\4\4\3\0\11\4\1\232\7\4\26\0\2\4"+
    "\5\0\4\4\3\0\12\4\1\233\6\4\26\0\2\4"+
    "\5\0\4\4\3\0\1\4\1\234\17\4\26\0\2\4"+
    "\5\0\4\4\3\0\5\4\1\235\13\4\26\0\2\4"+
    "\5\0\4\4\3\0\1\236\20\4\26\0\2\4\5\0"+
    "\4\4\3\0\12\4\1\237\6\4\26\0\2\4\5\0"+
    "\4\4\3\0\3\4\1\240\15\4\26\0\2\4\5\0"+
    "\4\4\3\0\6\4\1\241\12\4\26\0\2\4\5\0"+
    "\4\4\3\0\3\4\1\242\15\4\26\0\2\4\5\0"+
    "\4\4\3\0\3\4\1\243\15\4\26\0\2\4\5\0"+
    "\4\4\3\0\16\4\1\244\2\4\30\0\1\245\62\0"+
    "\2\4\5\0\4\4\3\0\17\4\1\246\1\4\26\0"+
    "\2\4\5\0\4\4\3\0\11\4\1\247\7\4\26\0"+
    "\2\4\5\0\4\4\3\0\7\4\1\250\11\4\26\0"+
    "\2\4\5\0\4\4\3\0\3\4\1\251\15\4\26\0"+
    "\2\4\5\0\4\4\3\0\6\4\1\252\12\4\26\0"+
    "\2\4\5\0\4\4\3\0\1\4\1\253\17\4\26\0"+
    "\2\4\5\0\4\4\3\0\2\4\1\254\16\4\26\0"+
    "\2\4\5\0\4\4\3\0\2\4\1\255\16\4\26\0"+
    "\2\4\5\0\4\4\3\0\6\4\1\256\12\4\26\0"+
    "\2\4\5\0\4\4\3\0\10\4\1\257\10\4\26\0"+
    "\2\4\5\0\4\4\3\0\4\4\1\260\14\4\26\0"+
    "\2\4\5\0\4\4\3\0\7\4\1\261\11\4\26\0"+
    "\2\4\5\0\4\4\3\0\10\4\1\262\10\4\26\0"+
    "\2\4\5\0\4\4\3\0\11\4\1\263\7\4\26\0"+
    "\2\4\5\0\4\4\3\0\15\4\1\264\3\4\26\0"+
    "\2\4\5\0\4\4\3\0\10\4\1\265\10\4\26\0"+
    "\2\4\5\0\4\4\3\0\10\4\1\266\10\4\26\0"+
    "\2\4\5\0\4\4\3\0\2\4\1\267\16\4\26\0"+
    "\2\4\5\0\4\4\3\0\5\4\1\270\13\4\26\0"+
    "\2\4\5\0\4\4\3\0\1\4\1\271\17\4\26\0"+
    "\2\4\5\0\4\4\3\0\3\4\1\272\15\4\26\0"+
    "\2\4\5\0\4\4\3\0\1\4\1\273\17\4\26\0"+
    "\2\4\5\0\4\4\3\0\10\4\1\274\10\4\26\0"+
    "\2\4\5\0\4\4\3\0\7\4\1\275\11\4\26\0"+
    "\2\4\5\0\4\4\3\0\2\4\1\276\16\4\26\0"+
    "\2\4\5\0\3\4\1\277\3\0\21\4\26\0\2\4"+
    "\5\0\4\4\3\0\6\4\1\300\12\4\26\0\2\4"+
    "\5\0\4\4\3\0\10\4\1\301\10\4\26\0\2\4"+
    "\5\0\4\4\3\0\1\4\1\302\17\4\26\0\2\4"+
    "\5\0\4\4\3\0\5\4\1\303\13\4\26\0\2\4"+
    "\5\0\4\4\3\0\5\4\1\304\1\4\1\305\11\4"+
    "\26\0\2\4\5\0\3\4\1\306\3\0\21\4\26\0"+
    "\2\4\5\0\4\4\3\0\4\4\1\307\14\4\26\0"+
    "\2\4\5\0\4\4\3\0\6\4\1\310\12\4\26\0"+
    "\2\4\5\0\4\4\3\0\4\4\1\311\14\4\26\0"+
    "\2\4\5\0\4\4\3\0\1\4\1\312\17\4\26\0"+
    "\2\4\5\0\4\4\3\0\5\4\1\313\13\4\26\0"+
    "\2\4\5\0\4\4\3\0\4\4\1\314\14\4\26\0"+
    "\2\4\5\0\4\4\3\0\4\4\1\315\14\4\26\0"+
    "\2\4\5\0\4\4\3\0\10\4\1\316\10\4\26\0"+
    "\2\4\5\0\4\4\3\0\6\4\1\317\12\4\26\0"+
    "\2\4\5\0\4\4\3\0\11\4\1\320\7\4\26\0"+
    "\2\4\5\0\4\4\3\0\5\4\1\321\13\4\26\0"+
    "\2\4\5\0\4\4\3\0\2\4\1\322\16\4\26\0"+
    "\2\4\5\0\4\4\3\0\2\4\1\323\16\4\26\0"+
    "\2\4\5\0\1\4\1\324\2\4\3\0\21\4\26\0"+
    "\2\4\5\0\3\4\1\325\3\0\21\4\26\0\2\4"+
    "\5\0\4\4\3\0\7\4\1\326\11\4\26\0\2\4"+
    "\5\0\4\4\3\0\7\4\1\327\11\4\26\0\2\4"+
    "\5\0\4\4\3\0\1\4\1\330\17\4\26\0\2\4"+
    "\5\0\2\4\1\331\1\4\3\0\21\4\26\0\2\4"+
    "\5\0\4\4\3\0\12\4\1\332\6\4\26\0\2\4"+
    "\5\0\4\4\3\0\6\4\1\333\12\4\26\0\2\4"+
    "\5\0\4\4\3\0\6\4\1\334\12\4\26\0\2\4"+
    "\5\0\4\4\3\0\1\4\1\335\17\4\26\0\2\4"+
    "\5\0\4\4\3\0\3\4\1\336\15\4\26\0\2\4"+
    "\5\0\4\4\3\0\1\4\1\337\17\4\26\0\2\4"+
    "\5\0\4\4\3\0\1\4\1\340\17\4\26\0\2\4"+
    "\5\0\4\4\3\0\3\4\1\341\15\4\26\0\2\4"+
    "\5\0\4\4\3\0\15\4\1\342\3\4\26\0\2\4"+
    "\5\0\4\4\3\0\1\4\1\343\17\4\26\0\2\4"+
    "\5\0\4\4\3\0\2\4\1\344\16\4\26\0\2\4"+
    "\5\0\4\4\3\0\10\4\1\345\10\4\26\0\2\4"+
    "\5\0\4\4\3\0\1\4\1\346\17\4\26\0\2\4"+
    "\5\0\4\4\3\0\1\4\1\347\17\4\26\0\2\4"+
    "\5\0\4\4\3\0\17\4\1\350\1\4\26\0\2\4"+
    "\5\0\4\4\3\0\10\4\1\351\10\4\26\0\2\4"+
    "\5\0\4\4\3\0\6\4\1\352\12\4\26\0\2\4"+
    "\5\0\4\4\3\0\6\4\1\353\12\4\26\0\2\4"+
    "\5\0\4\4\3\0\10\4\1\354\10\4\26\0\2\4"+
    "\5\0\4\4\3\0\1\4\1\355\17\4\26\0\2\4"+
    "\5\0\3\4\1\356\3\0\21\4\26\0\2\4\5\0"+
    "\3\4\1\357\3\0\21\4\26\0\2\4\5\0\4\4"+
    "\3\0\2\4\1\360\16\4\26\0\2\4\5\0\4\4"+
    "\3\0\2\4\1\361\16\4\26\0\2\4\5\0\4\4"+
    "\3\0\2\4\1\362\16\4\26\0\2\4\5\0\4\4"+
    "\3\0\2\4\1\363\16\4\26\0\2\4\5\0\4\4"+
    "\3\0\1\4\1\364\17\4\26\0\2\4\5\0\1\365"+
    "\3\4\3\0\21\4\26\0\2\4\5\0\4\4\3\0"+
    "\2\4\1\366\16\4\26\0\2\4\5\0\4\4\3\0"+
    "\2\4\1\367\16\4\26\0\2\4\5\0\4\4\3\0"+
    "\16\4\1\370\2\4\26\0\2\4\5\0\2\4\1\371"+
    "\1\4\3\0\21\4\26\0\2\4\5\0\3\4\1\372"+
    "\3\0\21\4\26\0\2\4\5\0\4\4\3\0\6\4"+
    "\1\373\12\4\26\0\2\4\5\0\4\4\3\0\2\4"+
    "\1\374\16\4\26\0\2\4\5\0\4\4\3\0\6\4"+
    "\1\375\12\4\26\0\2\4\5\0\4\4\3\0\1\4"+
    "\1\376\17\4\26\0\2\4\5\0\4\4\3\0\6\4"+
    "\1\377\12\4\26\0\2\4\5\0\4\4\3\0\2\4"+
    "\1\u0100\16\4\26\0\2\4\5\0\4\4\3\0\17\4"+
    "\1\u0101\1\4\26\0\2\4\5\0\4\4\3\0\6\4"+
    "\1\u0102\12\4\26\0\2\4\5\0\4\4\3\0\4\4"+
    "\1\u0103\14\4\26\0\2\4\5\0\1\u0104\3\4\3\0"+
    "\21\4\26\0\2\4\5\0\2\4\1\u0105\1\4\3\0"+
    "\21\4\26\0\2\4\5\0\4\4\3\0\20\4\1\u0106"+
    "\26\0\2\4\5\0\4\4\3\0\15\4\1\u0107\3\4"+
    "\26\0\2\4\5\0\4\4\3\0\4\4\1\u0108\14\4"+
    "\26\0\2\4\5\0\4\4\3\0\7\4\1\u0109\11\4"+
    "\26\0\2\4\5\0\4\4\3\0\10\4\1\u010a\10\4"+
    "\26\0\2\4\5\0\4\4\3\0\6\4\1\u010b\12\4"+
    "\26\0\2\4\5\0\4\4\3\0\4\4\1\u010c\14\4"+
    "\25\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10706];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\1\11\26\1\10\11\1\1\1\11"+
    "\6\1\4\11\1\0\2\1\1\0\1\11\2\0\3\1"+
    "\2\0\1\11\27\1\3\11\1\1\5\11\1\1\1\0"+
    "\2\11\4\1\1\11\35\1\1\0\40\1\1\11\147\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[268];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
//VARIALES Y METODOS DEL SCANER
/*public ArrayList<TokenError> tabla_Errores;

//public void setTablaErrores(ArrayList<TokenError> tabla){
  //  tabla_Errores = tabla;
//}
*/
private void ErrorScan(String simboloEd, String columna, String linea, String descripcion){
//ventanaPrincipal.errorGlobal(simboloEd,columna,linea,"Error lexico"); 
System.err.println("Error lexico "+simboloEd);
}



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public GAnalizador1(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public GAnalizador1(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 174) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 39: 
          { return new Symbol(sGF1.archivoGK, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 79: break;
        case 42: 
          { return new Symbol(sGF1.varL, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 80: break;
        case 57: 
          { return new Symbol(sGF1.llamarL, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 81: break;
        case 19: 
          { return new Symbol(sGF1.mayor, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 82: break;
        case 71: 
          { return new Symbol(sGF1.dondeTodoL, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 83: break;
        case 68: 
          { return new Symbol(sGF1.imports, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 84: break;
        case 29: 
          { return new Symbol(sGF1.comparacion, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 85: break;
        case 72: 
          { return new Symbol(sGF1.dondeCadaL, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 86: break;
        case 65: 
          { return new Symbol(sGF1.breakL, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 87: break;
        case 7: 
          { return new Symbol(sGF1.punto, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 88: break;
        case 26: 
          { return new Symbol(sGF1.disminucion, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 89: break;
        case 28: 
          { return new Symbol(sGF1.ifL, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 90: break;
        case 45: 
          { return new Symbol(sGF1.caseL, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 91: break;
        case 9: 
          { return new Symbol(sGF1.parC, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 92: break;
        case 73: 
          { return new Symbol(sGF1.verdad, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 93: break;
        case 22: 
          { return new Symbol(sGF1.por, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 94: break;
        case 61: 
          { return new Symbol(sGF1.columnaL, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 95: break;
        case 32: 
          { return new Symbol(sGF1.oLogico, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 96: break;
        case 30: 
          { return new Symbol(sGF1.yLogico, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 97: break;
        case 8: 
          { return new Symbol(sGF1.parA, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 98: break;
        case 53: 
          { return new Symbol(sGF1.mentira, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 99: break;
        case 23: 
          { return new Symbol(sGF1.pot, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 100: break;
        case 2: 
          { return new Symbol(sGF1.num, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 101: break;
        case 11: 
          { return new Symbol(sGF1.llaveC, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 102: break;
        case 52: 
          { return new Symbol(sGF1.doL, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 103: break;
        case 63: 
          { return new Symbol(sGF1.publicoL, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 104: break;
        case 49: 
          { return new Symbol(sGF1.dondeL, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 105: break;
        case 17: 
          { return new Symbol(sGF1.delimitador, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 106: break;
        case 31: 
          { return new Symbol(sGF1.xorLogico, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 107: break;
        case 10: 
          { return new Symbol(sGF1.llaveA, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 108: break;
        case 58: 
          { return new Symbol(sGF1.heredaL, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 109: break;
        case 43: 
          { return new Symbol(sGF1.alsL, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 110: break;
        case 34: 
          { return new Symbol(sGF1.indice, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 111: break;
        case 69: 
          { return new Symbol(sGF1.whileL, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 112: break;
        case 60: 
          { return new Symbol(sGF1.defaultL, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 113: break;
        case 78: 
          { return new Symbol(sGF1.graficar, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 114: break;
        case 77: 
          { return new Symbol(sGF1.incluirHK, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 115: break;
        case 41: 
          { return new Symbol(sGF1.caracter, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 116: break;
        case 20: 
          { return new Symbol(sGF1.menor, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 117: break;
        case 35: 
          { return new Symbol(sGF1.mayorIgual, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 118: break;
        case 6: 
          { return new Symbol(sGF1.resta, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 119: break;
        case 54: 
          { return new Symbol(sGF1.enteroL, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 120: break;
        case 14: 
          { return new Symbol(sGF1.coma, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 121: break;
        case 1: 
          { System.out.println("Error Lexico -> Simbolo: \""+yytext()+"\" Linea: "+(yyline+1)+" Columna: "+(yycolumn+1) );
                    //    pantallaPincipal.errorLexLienzo(yytext(),""+ yycolumn,""+ yyline, "Lexico");
                     //tabla_Errores.add(new TokenError("Lexico","Lexema no pertenece al lenguaje",yytext(),String.valueOf(yyline+1),String.valueOf(yycolumn+1)));
//ventanaPrincipal.errorGlobal(yytext(),String.valueOf(yychar),String.valueOf(yyline),"Lexico");
          }
        case 122: break;
        case 3: 
          { return new Symbol(sGF1.id, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 123: break;
        case 46: 
          { return new Symbol(sGF1.boolL, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 124: break;
        case 27: 
          { return new Symbol(sGF1.cadena, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 125: break;
        case 51: 
          { return new Symbol(sGF1.newL, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 126: break;
        case 70: 
          { return new Symbol(sGF1.llamarhkL, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 127: break;
        case 76: 
          { return new Symbol(sGF1.switchL, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 128: break;
        case 13: 
          { return new Symbol(sGF1.corC, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 129: break;
        case 50: 
          { return new Symbol(sGF1.vacioL, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 130: break;
        case 75: 
          { return new Symbol(sGF1.protegidoL, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 131: break;
        case 59: 
          { return new Symbol(sGF1.decimalL, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 132: break;
        case 4: 
          { return new Symbol(sGF1.div, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 133: break;
        case 38: 
          { return new Symbol(sGF1.decimal, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 134: break;
        case 12: 
          { return new Symbol(sGF1.corA, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 135: break;
        case 21: 
          { return new Symbol(sGF1.suma, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 136: break;
        case 40: 
          { return new Symbol(sGF1.extencion2, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 137: break;
        case 33: 
          { return new Symbol(sGF1.distinto, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 138: break;
        case 47: 
          { return new Symbol(sGF1.forL, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 139: break;
        case 37: 
          { return new Symbol(sGF1.aumento, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 140: break;
        case 15: 
          { return new Symbol(sGF1.dosPuntos, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 141: break;
        case 66: 
          { return new Symbol(sGF1.caracterL, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 142: break;
        case 62: 
          { return new Symbol(sGF1.privadoL, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 143: break;
        case 67: 
          { return new Symbol(sGF1.printL, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 144: break;
        case 18: 
          { return new Symbol(sGF1.notLogico, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 145: break;
        case 36: 
          { return new Symbol(sGF1.menorIgual, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 146: break;
        case 74: 
          { return new Symbol(sGF1.continueL, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 147: break;
        case 24: 
          { return new Symbol(sGF1.mod, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 148: break;
        case 64: 
          { return new Symbol(sGF1.retornarL, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 149: break;
        case 44: 
          { return new Symbol(sGF1.voidL, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 150: break;
        case 48: 
          { return new Symbol(sGF1.elseL, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 151: break;
        case 16: 
          { return new Symbol(sGF1.asignacion, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 152: break;
        case 55: 
          { return new Symbol(sGF1.cadenaL, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 153: break;
        case 56: 
          { return new Symbol(sGF1.mainL, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 154: break;
        case 5: 
          { 
          }
        case 155: break;
        case 25: 
          { return new Symbol(sGF1.dolar, yycolumn+1,yyline+1,new String(yytext()));
          }
        case 156: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sGF1.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
