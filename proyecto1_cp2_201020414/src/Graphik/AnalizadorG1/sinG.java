
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Thu Mar 16 02:20:21 CST 2017
//----------------------------------------------------

package Graphik.AnalizadorG1;

import java_cup.runtime.*;
import java.util.LinkedList;
import java_cup.runtime.Symbol;
import arbol.*;

/** CUP v0.10k generated parser.
  * @version Thu Mar 16 02:20:21 CST 2017
  */
public class sinG extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public sinG() {super();}

  /** Constructor which sets the default scanner. */
  public sinG(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\157\000\002\002\004\000\002\003\003\000\002\004" +
    "\004\000\002\004\003\000\002\004\002\000\002\005\005" +
    "\000\002\006\004\000\002\006\003\000\002\006\002\000" +
    "\002\007\005\000\002\011\004\000\002\011\003\000\002" +
    "\010\010\000\002\010\012\000\002\012\004\000\002\012" +
    "\003\000\002\027\003\000\002\027\003\000\002\020\011" +
    "\000\002\020\007\000\002\017\005\000\002\017\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\021\013\000\002\021\011\000\002\025\004" +
    "\000\002\025\002\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\022\006\000\002\022\004\000\002" +
    "\022\002\000\002\023\004\000\002\023\003\000\002\051" +
    "\003\000\002\051\004\000\002\051\004\000\002\024\003" +
    "\000\002\024\003\000\002\024\003\000\002\024\003\000" +
    "\002\024\003\000\002\024\003\000\002\024\003\000\002" +
    "\024\003\000\002\024\003\000\002\024\003\000\002\024" +
    "\003\000\002\052\007\000\002\047\013\000\002\046\011" +
    "\000\002\043\015\000\002\045\004\000\002\045\004\000" +
    "\002\044\006\000\002\044\005\000\002\040\011\000\002" +
    "\041\004\000\002\041\003\000\002\042\006\000\002\042" +
    "\005\000\002\036\012\000\002\037\006\000\002\037\002" +
    "\000\002\035\006\000\002\034\010\000\002\032\010\000" +
    "\002\033\005\000\002\033\003\000\002\033\002\000\002" +
    "\031\010\000\002\031\006\000\002\030\005\000\002\053" +
    "\005\000\002\053\003\000\002\063\005\000\002\063\003" +
    "\000\002\062\005\000\002\062\003\000\002\061\004\000" +
    "\002\061\003\000\002\060\005\000\002\060\005\000\002" +
    "\060\005\000\002\060\005\000\002\060\005\000\002\060" +
    "\005\000\002\060\003\000\002\057\005\000\002\057\005" +
    "\000\002\057\003\000\002\056\005\000\002\056\005\000" +
    "\002\056\005\000\002\056\003\000\002\055\005\000\002" +
    "\055\003\000\002\054\003\000\002\054\003\000\002\054" +
    "\003\000\002\054\003\000\002\054\003\000\002\054\003" +
    "\000\002\054\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\347\000\004\017\004\001\002\000\004\115\012\001" +
    "\002\000\006\002\ufff6\017\ufff6\001\002\000\004\002\011" +
    "\001\002\000\006\002\000\017\004\001\002\000\006\002" +
    "\ufff7\017\ufff7\001\002\000\004\002\001\001\002\000\010" +
    "\023\015\056\uffe1\063\013\001\002\000\010\013\351\014" +
    "\347\015\350\001\002\000\004\056\343\001\002\000\004" +
    "\115\016\001\002\000\006\056\uffe1\063\013\001\002\000" +
    "\004\056\020\001\002\000\022\004\027\005\022\006\035" +
    "\007\021\010\026\011\033\012\034\115\023\001\002\000" +
    "\004\115\uffe9\001\002\000\004\115\uffeb\001\002\000\004" +
    "\115\uffe5\001\002\000\024\004\ufff1\005\ufff1\006\ufff1\007" +
    "\ufff1\010\ufff1\011\ufff1\012\ufff1\057\ufff1\115\ufff1\001\002" +
    "\000\024\004\ufff0\005\ufff0\006\ufff0\007\ufff0\010\ufff0\011" +
    "\ufff0\012\ufff0\057\ufff0\115\ufff0\001\002\000\004\115\uffe8" +
    "\001\002\000\020\005\022\006\035\007\021\010\026\011" +
    "\033\012\210\115\023\001\002\000\004\115\316\001\002" +
    "\000\024\004\027\005\022\006\035\007\021\010\026\011" +
    "\033\012\034\057\314\115\023\001\002\000\024\004\ufff2" +
    "\005\ufff2\006\ufff2\007\ufff2\010\ufff2\011\ufff2\012\ufff2\057" +
    "\ufff2\115\ufff2\001\002\000\004\115\uffe7\001\002\000\006" +
    "\025\036\115\uffe6\001\002\000\004\115\uffea\001\002\000" +
    "\004\054\037\001\002\000\004\055\040\001\002\000\004" +
    "\056\041\001\002\000\030\004\054\020\063\022\062\024" +
    "\056\027\044\031\066\034\065\035\071\036\057\047\055" +
    "\115\061\001\002\000\036\004\uffd9\020\uffd9\022\uffd9\024" +
    "\uffd9\027\uffd9\031\uffd9\032\uffd9\033\uffd9\034\uffd9\035\uffd9" +
    "\036\uffd9\047\uffd9\057\uffd9\115\uffd9\001\002\000\036\004" +
    "\uffcd\020\uffcd\022\uffcd\024\uffcd\027\uffcd\031\uffcd\032\uffcd" +
    "\033\uffcd\034\uffcd\035\uffcd\036\uffcd\047\uffcd\057\uffcd\115" +
    "\uffcd\001\002\000\004\054\301\001\002\000\032\004\054" +
    "\020\063\022\062\024\056\027\044\031\066\034\065\035" +
    "\071\036\057\047\055\057\300\115\061\001\002\000\036" +
    "\004\uffd2\020\uffd2\022\uffd2\024\uffd2\027\uffd2\031\uffd2\032" +
    "\uffd2\033\uffd2\034\uffd2\035\uffd2\036\uffd2\047\uffd2\057\uffd2" +
    "\115\uffd2\001\002\000\036\004\uffcb\020\uffcb\022\uffcb\024" +
    "\uffcb\027\uffcb\031\uffcb\032\uffcb\033\uffcb\034\uffcb\035\uffcb" +
    "\036\uffcb\047\uffcb\057\uffcb\115\uffcb\001\002\000\036\004" +
    "\uffd5\020\uffd5\022\uffd5\024\uffd5\027\uffd5\031\uffd5\032\uffd5" +
    "\033\uffd5\034\uffd5\035\uffd5\036\uffd5\047\uffd5\057\uffd5\115" +
    "\uffd5\001\002\000\036\004\uffcf\020\uffcf\022\uffcf\024\uffcf" +
    "\027\uffcf\031\uffcf\032\uffcf\033\uffcf\034\uffcf\035\uffcf\036" +
    "\uffcf\047\uffcf\057\uffcf\115\uffcf\001\002\000\036\004\uffd4" +
    "\020\uffd4\022\uffd4\024\uffd4\027\uffd4\031\uffd4\032\uffd4\033" +
    "\uffd4\034\uffd4\035\uffd4\036\uffd4\047\uffd4\057\uffd4\115\uffd4" +
    "\001\002\000\036\004\uffcc\020\uffcc\022\uffcc\024\uffcc\027" +
    "\uffcc\031\uffcc\032\uffcc\033\uffcc\034\uffcc\035\uffcc\036\uffcc" +
    "\047\uffcc\057\uffcc\115\uffcc\001\002\000\020\005\022\006" +
    "\035\007\021\010\026\011\033\012\210\115\023\001\002" +
    "\000\004\054\263\001\002\000\022\050\102\051\100\066" +
    "\113\113\106\114\104\115\077\116\107\117\103\001\002" +
    "\000\004\056\251\001\002\000\036\004\uffd1\020\uffd1\022" +
    "\uffd1\024\uffd1\027\uffd1\031\uffd1\032\uffd1\033\uffd1\034\uffd1" +
    "\035\uffd1\036\uffd1\047\uffd1\057\uffd1\115\uffd1\001\002\000" +
    "\004\064\246\001\002\000\004\115\241\001\002\000\004" +
    "\115\231\001\002\000\036\004\uffd0\020\uffd0\022\uffd0\024" +
    "\uffd0\027\uffd0\031\uffd0\032\uffd0\033\uffd0\034\uffd0\035\uffd0" +
    "\036\uffd0\047\uffd0\057\uffd0\115\uffd0\001\002\000\004\054" +
    "\204\001\002\000\004\054\165\001\002\000\036\004\uffd3" +
    "\020\uffd3\022\uffd3\024\uffd3\027\uffd3\031\uffd3\032\uffd3\033" +
    "\uffd3\034\uffd3\035\uffd3\036\uffd3\047\uffd3\057\uffd3\115\uffd3" +
    "\001\002\000\036\004\uffce\020\uffce\022\uffce\024\uffce\027" +
    "\uffce\031\uffce\032\uffce\033\uffce\034\uffce\035\uffce\036\uffce" +
    "\047\uffce\057\uffce\115\uffce\001\002\000\004\054\072\001" +
    "\002\000\022\050\102\051\100\066\113\113\106\114\104" +
    "\115\077\116\107\117\103\001\002\000\050\055\uff9a\062" +
    "\uff9a\063\uff9a\065\uff9a\067\uff9a\070\uff9a\071\uff9a\072\uff9a" +
    "\073\uff9a\074\uff9a\075\uff9a\076\uff9a\077\uff9a\100\uff9a\101" +
    "\uff9a\102\uff9a\103\uff9a\104\uff9a\105\uff9a\001\002\000\020" +
    "\055\uffae\062\uffae\063\uffae\065\uffae\067\147\070\uffae\071" +
    "\uffae\001\002\000\006\055\151\070\152\001\002\000\016" +
    "\055\uffb0\062\uffb0\063\uffb0\065\uffb0\070\uffb0\071\145\001" +
    "\002\000\050\055\uff95\062\uff95\063\uff95\065\uff95\067\uff95" +
    "\070\uff95\071\uff95\072\uff95\073\uff95\074\uff95\075\uff95\076" +
    "\uff95\077\uff95\100\uff95\101\uff95\102\uff95\103\uff95\104\uff95" +
    "\105\uff95\001\002\000\050\055\uff93\062\uff93\063\uff93\065" +
    "\uff93\067\uff93\070\uff93\071\uff93\072\uff93\073\uff93\074\uff93" +
    "\075\uff93\076\uff93\077\uff93\100\uff93\101\uff93\102\uff93\103" +
    "\uff93\104\uff93\105\uff93\001\002\000\050\055\uff9c\062\uff9c" +
    "\063\uff9c\065\uff9c\067\uff9c\070\uff9c\071\uff9c\072\uff9c\073" +
    "\uff9c\074\uff9c\075\uff9c\076\uff9c\077\uff9c\100\uff9c\101\uff9c" +
    "\102\uff9c\103\uff9c\104\133\105\uff9c\001\002\000\050\055" +
    "\uff94\062\uff94\063\uff94\065\uff94\067\uff94\070\uff94\071\uff94" +
    "\072\uff94\073\uff94\074\uff94\075\uff94\076\uff94\077\uff94\100" +
    "\uff94\101\uff94\102\uff94\103\uff94\104\uff94\105\uff94\001\002" +
    "\000\050\055\uff96\062\uff96\063\uff96\065\uff96\067\uff96\070" +
    "\uff96\071\uff96\072\uff96\073\uff96\074\uff96\075\uff96\076\uff96" +
    "\077\uff96\100\uff96\101\uff96\102\uff96\103\uff96\104\uff96\105" +
    "\uff96\001\002\000\050\055\uff99\062\uff99\063\uff99\065\uff99" +
    "\067\uff99\070\uff99\071\uff99\072\uff99\073\uff99\074\uff99\075" +
    "\uff99\076\uff99\077\uff99\100\uff99\101\uff99\102\uff99\103\uff99" +
    "\104\uff99\105\uff99\001\002\000\046\055\uffa0\062\uffa0\063" +
    "\uffa0\065\uffa0\067\uffa0\070\uffa0\071\uffa0\072\uffa0\073\uffa0" +
    "\074\uffa0\075\uffa0\076\uffa0\077\uffa0\100\uffa0\101\uffa0\102" +
    "\127\103\131\105\130\001\002\000\050\055\uff98\062\uff98" +
    "\063\uff98\065\uff98\067\uff98\070\uff98\071\uff98\072\uff98\073" +
    "\uff98\074\uff98\075\uff98\076\uff98\077\uff98\100\uff98\101\uff98" +
    "\102\uff98\103\uff98\104\uff98\105\uff98\001\002\000\050\055" +
    "\uff97\062\uff97\063\uff97\065\uff97\067\uff97\070\uff97\071\uff97" +
    "\072\uff97\073\uff97\074\uff97\075\uff97\076\uff97\077\uff97\100" +
    "\uff97\101\uff97\102\uff97\103\uff97\104\uff97\105\uff97\001\002" +
    "\000\040\055\uffa3\062\uffa3\063\uffa3\065\uffa3\067\uffa3\070" +
    "\uffa3\071\uffa3\072\uffa3\073\uffa3\074\uffa3\075\uffa3\076\uffa3" +
    "\077\uffa3\100\125\101\124\001\002\000\034\055\uffaa\062" +
    "\uffaa\063\uffaa\065\uffaa\067\uffaa\070\uffaa\071\uffaa\072\115" +
    "\073\122\074\117\075\116\076\121\077\120\001\002\000" +
    "\020\055\uffac\062\uffac\063\uffac\065\uffac\067\uffac\070\uffac" +
    "\071\uffac\001\002\000\020\050\102\051\100\113\106\114" +
    "\104\115\077\116\107\117\103\001\002\000\034\055\uffab" +
    "\062\uffab\063\uffab\065\uffab\067\uffab\070\uffab\071\uffab\072" +
    "\115\073\122\074\117\075\116\076\121\077\120\001\002" +
    "\000\020\050\102\051\100\113\106\114\104\115\077\116" +
    "\107\117\103\001\002\000\020\050\102\051\100\113\106" +
    "\114\104\115\077\116\107\117\103\001\002\000\020\050" +
    "\102\051\100\113\106\114\104\115\077\116\107\117\103" +
    "\001\002\000\020\050\102\051\100\113\106\114\104\115" +
    "\077\116\107\117\103\001\002\000\020\050\102\051\100" +
    "\113\106\114\104\115\077\116\107\117\103\001\002\000" +
    "\020\050\102\051\100\113\106\114\104\115\077\116\107" +
    "\117\103\001\002\000\040\055\uffa8\062\uffa8\063\uffa8\065" +
    "\uffa8\067\uffa8\070\uffa8\071\uffa8\072\uffa8\073\uffa8\074\uffa8" +
    "\075\uffa8\076\uffa8\077\uffa8\100\125\101\124\001\002\000" +
    "\020\050\102\051\100\113\106\114\104\115\077\116\107" +
    "\117\103\001\002\000\020\050\102\051\100\113\106\114" +
    "\104\115\077\116\107\117\103\001\002\000\046\055\uffa2" +
    "\062\uffa2\063\uffa2\065\uffa2\067\uffa2\070\uffa2\071\uffa2\072" +
    "\uffa2\073\uffa2\074\uffa2\075\uffa2\076\uffa2\077\uffa2\100\uffa2" +
    "\101\uffa2\102\127\103\131\105\130\001\002\000\020\050" +
    "\102\051\100\113\106\114\104\115\077\116\107\117\103" +
    "\001\002\000\020\050\102\051\100\113\106\114\104\115" +
    "\077\116\107\117\103\001\002\000\020\050\102\051\100" +
    "\113\106\114\104\115\077\116\107\117\103\001\002\000" +
    "\050\055\uff9e\062\uff9e\063\uff9e\065\uff9e\067\uff9e\070\uff9e" +
    "\071\uff9e\072\uff9e\073\uff9e\074\uff9e\075\uff9e\076\uff9e\077" +
    "\uff9e\100\uff9e\101\uff9e\102\uff9e\103\uff9e\104\133\105\uff9e" +
    "\001\002\000\020\050\102\051\100\113\106\114\104\115" +
    "\077\116\107\117\103\001\002\000\050\055\uff9b\062\uff9b" +
    "\063\uff9b\065\uff9b\067\uff9b\070\uff9b\071\uff9b\072\uff9b\073" +
    "\uff9b\074\uff9b\075\uff9b\076\uff9b\077\uff9b\100\uff9b\101\uff9b" +
    "\102\uff9b\103\uff9b\104\uff9b\105\uff9b\001\002\000\050\055" +
    "\uff9d\062\uff9d\063\uff9d\065\uff9d\067\uff9d\070\uff9d\071\uff9d" +
    "\072\uff9d\073\uff9d\074\uff9d\075\uff9d\076\uff9d\077\uff9d\100" +
    "\uff9d\101\uff9d\102\uff9d\103\uff9d\104\133\105\uff9d\001\002" +
    "\000\050\055\uff9f\062\uff9f\063\uff9f\065\uff9f\067\uff9f\070" +
    "\uff9f\071\uff9f\072\uff9f\073\uff9f\074\uff9f\075\uff9f\076\uff9f" +
    "\077\uff9f\100\uff9f\101\uff9f\102\uff9f\103\uff9f\104\133\105" +
    "\uff9f\001\002\000\046\055\uffa1\062\uffa1\063\uffa1\065\uffa1" +
    "\067\uffa1\070\uffa1\071\uffa1\072\uffa1\073\uffa1\074\uffa1\075" +
    "\uffa1\076\uffa1\077\uffa1\100\uffa1\101\uffa1\102\127\103\131" +
    "\105\130\001\002\000\040\055\uffa5\062\uffa5\063\uffa5\065" +
    "\uffa5\067\uffa5\070\uffa5\071\uffa5\072\uffa5\073\uffa5\074\uffa5" +
    "\075\uffa5\076\uffa5\077\uffa5\100\125\101\124\001\002\000" +
    "\040\055\uffa4\062\uffa4\063\uffa4\065\uffa4\067\uffa4\070\uffa4" +
    "\071\uffa4\072\uffa4\073\uffa4\074\uffa4\075\uffa4\076\uffa4\077" +
    "\uffa4\100\125\101\124\001\002\000\040\055\uffa7\062\uffa7" +
    "\063\uffa7\065\uffa7\067\uffa7\070\uffa7\071\uffa7\072\uffa7\073" +
    "\uffa7\074\uffa7\075\uffa7\076\uffa7\077\uffa7\100\125\101\124" +
    "\001\002\000\040\055\uffa6\062\uffa6\063\uffa6\065\uffa6\067" +
    "\uffa6\070\uffa6\071\uffa6\072\uffa6\073\uffa6\074\uffa6\075\uffa6" +
    "\076\uffa6\077\uffa6\100\125\101\124\001\002\000\040\055" +
    "\uffa9\062\uffa9\063\uffa9\065\uffa9\067\uffa9\070\uffa9\071\uffa9" +
    "\072\uffa9\073\uffa9\074\uffa9\075\uffa9\076\uffa9\077\uffa9\100" +
    "\125\101\124\001\002\000\022\050\102\051\100\066\113" +
    "\113\106\114\104\115\077\116\107\117\103\001\002\000" +
    "\020\055\uffaf\062\uffaf\063\uffaf\065\uffaf\067\147\070\uffaf" +
    "\071\uffaf\001\002\000\022\050\102\051\100\066\113\113" +
    "\106\114\104\115\077\116\107\117\103\001\002\000\020" +
    "\055\uffad\062\uffad\063\uffad\065\uffad\067\uffad\070\uffad\071" +
    "\uffad\001\002\000\004\056\154\001\002\000\022\050\102" +
    "\051\100\066\113\113\106\114\104\115\077\116\107\117" +
    "\103\001\002\000\016\055\uffb1\062\uffb1\063\uffb1\065\uffb1" +
    "\070\uffb1\071\145\001\002\000\034\004\054\020\063\022" +
    "\062\024\056\027\044\031\066\034\065\035\071\036\057" +
    "\037\160\040\157\047\055\115\061\001\002\000\004\057" +
    "\164\001\002\000\036\004\054\020\063\022\062\024\056" +
    "\027\044\031\066\032\uffd8\033\uffd8\034\065\035\071\036" +
    "\057\047\055\057\uffd8\115\061\001\002\000\004\065\162" +
    "\001\002\000\004\065\161\001\002\000\010\032\uffd7\033" +
    "\uffd7\057\uffd7\001\002\000\010\032\uffd6\033\uffd6\057\uffd6" +
    "\001\002\000\036\004\uffda\020\uffda\022\uffda\024\uffda\027" +
    "\uffda\031\uffda\032\uffda\033\uffda\034\uffda\035\uffda\036\uffda" +
    "\047\uffda\057\uffda\115\uffda\001\002\000\036\004\uffc8\020" +
    "\uffc8\022\uffc8\024\uffc8\027\uffc8\031\uffc8\032\uffc8\033\uffc8" +
    "\034\uffc8\035\uffc8\036\uffc8\047\uffc8\057\uffc8\115\uffc8\001" +
    "\002\000\022\050\102\051\100\066\113\113\106\114\104" +
    "\115\077\116\107\117\103\001\002\000\006\055\167\070" +
    "\152\001\002\000\004\056\170\001\002\000\006\032\171" +
    "\033\172\001\002\000\022\050\102\051\100\066\113\113" +
    "\106\114\104\115\077\116\107\117\103\001\002\000\004" +
    "\063\177\001\002\000\010\032\171\033\172\057\175\001" +
    "\002\000\010\032\uffc0\033\uffc0\057\uffc0\001\002\000\036" +
    "\004\uffc2\020\uffc2\022\uffc2\024\uffc2\027\uffc2\031\uffc2\032" +
    "\uffc2\033\uffc2\034\uffc2\035\uffc2\036\uffc2\047\uffc2\057\uffc2" +
    "\115\uffc2\001\002\000\010\032\uffc1\033\uffc1\057\uffc1\001" +
    "\002\000\034\004\054\020\063\022\062\024\056\027\044" +
    "\031\066\034\065\035\071\036\057\037\160\040\157\047" +
    "\055\115\061\001\002\000\010\032\uffbe\033\uffbe\057\uffbe" +
    "\001\002\000\006\063\202\070\152\001\002\000\034\004" +
    "\054\020\063\022\062\024\056\027\044\031\066\034\065" +
    "\035\071\036\057\037\160\040\157\047\055\115\061\001" +
    "\002\000\010\032\uffbf\033\uffbf\057\uffbf\001\002\000\020" +
    "\005\022\006\035\007\021\010\026\011\033\012\210\115" +
    "\205\001\002\000\006\064\227\115\uffe5\001\002\000\004" +
    "\115\224\001\002\000\004\063\211\001\002\000\004\115" +
    "\uffe6\001\002\000\022\050\102\051\100\066\113\113\106" +
    "\114\104\115\077\116\107\117\103\001\002\000\006\063" +
    "\213\070\152\001\002\000\004\115\215\001\002\000\004" +
    "\055\220\001\002\000\006\106\216\107\217\001\002\000" +
    "\004\055\uffc6\001\002\000\004\055\uffc5\001\002\000\004" +
    "\056\221\001\002\000\034\004\054\020\063\022\062\024" +
    "\056\027\044\031\066\034\065\035\071\036\057\037\160" +
    "\040\157\047\055\115\061\001\002\000\004\057\223\001" +
    "\002\000\036\004\uffc7\020\uffc7\022\uffc7\024\uffc7\027\uffc7" +
    "\031\uffc7\032\uffc7\033\uffc7\034\uffc7\035\uffc7\036\uffc7\047" +
    "\uffc7\057\uffc7\115\uffc7\001\002\000\004\064\225\001\002" +
    "\000\022\050\102\051\100\066\113\113\106\114\104\115" +
    "\077\116\107\117\103\001\002\000\006\063\uffc4\070\152" +
    "\001\002\000\022\050\102\051\100\066\113\113\106\114" +
    "\104\115\077\116\107\117\103\001\002\000\006\063\uffc3" +
    "\070\152\001\002\000\004\054\232\001\002\000\026\050" +
    "\102\051\100\055\uffb5\062\uffb5\066\113\113\106\114\104" +
    "\115\077\116\107\117\103\001\002\000\006\055\236\062" +
    "\235\001\002\000\010\055\uffb6\062\uffb6\070\152\001\002" +
    "\000\022\050\102\051\100\066\113\113\106\114\104\115" +
    "\077\116\107\117\103\001\002\000\004\065\237\001\002" +
    "\000\036\004\uffb8\020\uffb8\022\uffb8\024\uffb8\027\uffb8\031" +
    "\uffb8\032\uffb8\033\uffb8\034\uffb8\035\uffb8\036\uffb8\047\uffb8" +
    "\057\uffb8\115\uffb8\001\002\000\010\055\uffb7\062\uffb7\070" +
    "\152\001\002\000\004\054\242\001\002\000\026\050\102" +
    "\051\100\055\uffb5\062\uffb5\066\113\113\106\114\104\115" +
    "\077\116\107\117\103\001\002\000\006\055\244\062\235" +
    "\001\002\000\004\065\245\001\002\000\036\004\uffb9\020" +
    "\uffb9\022\uffb9\024\uffb9\027\uffb9\031\uffb9\032\uffb9\033\uffb9" +
    "\034\uffb9\035\uffb9\036\uffb9\047\uffb9\057\uffb9\115\uffb9\001" +
    "\002\000\022\050\102\051\100\066\113\113\106\114\104" +
    "\115\077\116\107\117\103\001\002\000\006\065\250\070" +
    "\152\001\002\000\036\004\uffba\020\uffba\022\uffba\024\uffba" +
    "\027\uffba\031\uffba\032\uffba\033\uffba\034\uffba\035\uffba\036" +
    "\uffba\047\uffba\057\uffba\115\uffba\001\002\000\034\004\054" +
    "\020\063\022\062\024\056\027\044\031\066\034\065\035" +
    "\071\036\057\037\160\040\157\047\055\115\061\001\002" +
    "\000\004\057\253\001\002\000\004\035\254\001\002\000" +
    "\004\054\255\001\002\000\022\050\102\051\100\066\113" +
    "\113\106\114\104\115\077\116\107\117\103\001\002\000" +
    "\006\055\257\070\152\001\002\000\004\065\260\001\002" +
    "\000\036\004\uffc9\020\uffc9\022\uffc9\024\uffc9\027\uffc9\031" +
    "\uffc9\032\uffc9\033\uffc9\034\uffc9\035\uffc9\036\uffc9\047\uffc9" +
    "\057\uffc9\115\uffc9\001\002\000\006\065\262\070\152\001" +
    "\002\000\036\004\uffb2\020\uffb2\022\uffb2\024\uffb2\027\uffb2" +
    "\031\uffb2\032\uffb2\033\uffb2\034\uffb2\035\uffb2\036\uffb2\047" +
    "\uffb2\057\uffb2\115\uffb2\001\002\000\022\050\102\051\100" +
    "\066\113\113\106\114\104\115\077\116\107\117\103\001" +
    "\002\000\006\055\265\070\152\001\002\000\004\065\266" +
    "\001\002\000\036\004\uffca\020\uffca\022\uffca\024\uffca\027" +
    "\uffca\031\uffca\032\uffca\033\uffca\034\uffca\035\uffca\036\uffca" +
    "\047\uffca\057\uffca\115\uffca\001\002\000\004\115\271\001" +
    "\002\000\010\062\273\064\274\065\272\001\002\000\012" +
    "\062\uffec\063\uffec\064\uffec\065\uffec\001\002\000\036\004" +
    "\uffb3\020\uffb3\022\uffb3\024\uffb3\027\uffb3\031\uffb3\032\uffb3" +
    "\033\uffb3\034\uffb3\035\uffb3\036\uffb3\047\uffb3\057\uffb3\115" +
    "\uffb3\001\002\000\004\115\277\001\002\000\022\050\102" +
    "\051\100\066\113\113\106\114\104\115\077\116\107\117" +
    "\103\001\002\000\006\065\276\070\152\001\002\000\036" +
    "\004\uffb4\020\uffb4\022\uffb4\024\uffb4\027\uffb4\031\uffb4\032" +
    "\uffb4\033\uffb4\034\uffb4\035\uffb4\036\uffb4\047\uffb4\057\uffb4" +
    "\115\uffb4\001\002\000\012\062\uffed\063\uffed\064\uffed\065" +
    "\uffed\001\002\000\024\004\uffe3\005\uffe3\006\uffe3\007\uffe3" +
    "\010\uffe3\011\uffe3\012\uffe3\057\uffe3\115\uffe3\001\002\000" +
    "\022\050\102\051\100\066\113\113\106\114\104\115\077" +
    "\116\107\117\103\001\002\000\006\055\303\070\152\001" +
    "\002\000\004\056\304\001\002\000\034\004\054\020\063" +
    "\022\062\024\056\027\044\031\066\034\065\035\071\036" +
    "\057\037\160\040\157\047\055\115\061\001\002\000\004" +
    "\057\306\001\002\000\040\004\uffbb\020\uffbb\022\uffbb\024" +
    "\uffbb\027\uffbb\030\307\031\uffbb\032\uffbb\033\uffbb\034\uffbb" +
    "\035\uffbb\036\uffbb\047\uffbb\057\uffbb\115\uffbb\001\002\000" +
    "\004\056\311\001\002\000\036\004\uffbd\020\uffbd\022\uffbd" +
    "\024\uffbd\027\uffbd\031\uffbd\032\uffbd\033\uffbd\034\uffbd\035" +
    "\uffbd\036\uffbd\047\uffbd\057\uffbd\115\uffbd\001\002\000\034" +
    "\004\054\020\063\022\062\024\056\027\044\031\066\034" +
    "\065\035\071\036\057\037\160\040\157\047\055\115\061" +
    "\001\002\000\004\057\313\001\002\000\036\004\uffbc\020" +
    "\uffbc\022\uffbc\024\uffbc\027\uffbc\031\uffbc\032\uffbc\033\uffbc" +
    "\034\uffbc\035\uffbc\036\uffbc\047\uffbc\057\uffbc\115\uffbc\001" +
    "\002\000\006\002\ufff4\017\ufff4\001\002\000\024\004\ufff3" +
    "\005\ufff3\006\ufff3\007\ufff3\010\ufff3\011\ufff3\012\ufff3\057" +
    "\ufff3\115\ufff3\001\002\000\004\054\317\001\002\000\024" +
    "\005\022\006\035\007\021\010\026\011\033\012\210\055" +
    "\uffdb\062\uffdb\115\023\001\002\000\004\115\332\001\002" +
    "\000\006\055\323\062\322\001\002\000\020\005\022\006" +
    "\035\007\021\010\026\011\033\012\210\115\023\001\002" +
    "\000\006\056\uffe1\063\013\001\002\000\004\056\325\001" +
    "\002\000\030\004\054\020\063\022\062\024\056\027\044" +
    "\031\066\034\065\035\071\036\057\047\055\115\061\001" +
    "\002\000\032\004\054\020\063\022\062\024\056\027\044" +
    "\031\066\034\065\035\071\036\057\047\055\057\327\115" +
    "\061\001\002\000\024\004\uffe4\005\uffe4\006\uffe4\007\uffe4" +
    "\010\uffe4\011\uffe4\012\uffe4\057\uffe4\115\uffe4\001\002\000" +
    "\004\115\331\001\002\000\006\055\uffdd\062\uffdd\001\002" +
    "\000\006\055\uffdc\062\uffdc\001\002\000\004\115\271\001" +
    "\002\000\012\062\273\063\013\064\336\065\uffe1\001\002" +
    "\000\004\065\342\001\002\000\022\050\102\051\100\066" +
    "\113\113\106\114\104\115\077\116\107\117\103\001\002" +
    "\000\010\063\013\065\uffe1\070\152\001\002\000\004\065" +
    "\341\001\002\000\024\004\uffef\005\uffef\006\uffef\007\uffef" +
    "\010\uffef\011\uffef\012\uffef\057\uffef\115\uffef\001\002\000" +
    "\024\004\uffee\005\uffee\006\uffee\007\uffee\010\uffee\011\uffee" +
    "\012\uffee\057\uffee\115\uffee\001\002\000\022\004\027\005" +
    "\022\006\035\007\021\010\026\011\033\012\034\115\023" +
    "\001\002\000\024\004\027\005\022\006\035\007\021\010" +
    "\026\011\033\012\034\057\345\115\023\001\002\000\006" +
    "\002\ufff5\017\ufff5\001\002\000\006\056\uffe2\065\uffe2\001" +
    "\002\000\006\056\uffdf\065\uffdf\001\002\000\006\056\uffde" +
    "\065\uffde\001\002\000\006\056\uffe0\065\uffe0\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\347\000\010\003\005\010\004\011\006\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\010\007\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\025\013\001\001\000\004\015\345\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\025\016\001\001\000" +
    "\002\001\001\000\014\012\030\014\027\020\023\021\024" +
    "\027\031\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\014\332\001\001\000\002\001\001\000" +
    "\012\014\027\020\023\021\024\027\314\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\023\044\024\041\030\047\031\051\032\066\034" +
    "\045\035\057\036\063\040\050\043\067\046\042\047\052" +
    "\052\046\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\024\162\030\047\031\051\032\066" +
    "\034\045\035\057\036\063\040\050\043\067\046\042\047" +
    "\052\052\046\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\266\001\001\000\002\001\001" +
    "\000\024\053\260\054\072\055\100\056\104\057\107\060" +
    "\110\061\111\062\073\063\075\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\053\074\054\072\055\100\056\104\057\107" +
    "\060\110\061\111\062\073\063\075\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\054\072" +
    "\055\100\056\104\057\107\060\113\001\001\000\002\001" +
    "\001\000\012\054\072\055\100\056\104\057\143\001\001" +
    "\000\012\054\072\055\100\056\104\057\142\001\001\000" +
    "\012\054\072\055\100\056\104\057\141\001\001\000\012" +
    "\054\072\055\100\056\104\057\140\001\001\000\012\054" +
    "\072\055\100\056\104\057\137\001\001\000\012\054\072" +
    "\055\100\056\104\057\122\001\001\000\002\001\001\000" +
    "\010\054\072\055\100\056\136\001\001\000\010\054\072" +
    "\055\100\056\125\001\001\000\002\001\001\000\006\054" +
    "\072\055\135\001\001\000\006\054\072\055\134\001\001" +
    "\000\006\054\072\055\131\001\001\000\002\001\001\000" +
    "\004\054\133\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\054\072\055\100\056\104\057\107\060" +
    "\110\061\111\062\145\001\001\000\002\001\001\000\016" +
    "\054\072\055\100\056\104\057\107\060\110\061\147\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\054\072" +
    "\055\100\056\104\057\107\060\110\061\111\062\073\063" +
    "\152\001\001\000\002\001\001\000\036\023\155\024\041" +
    "\030\047\031\051\032\066\034\045\035\057\036\063\040" +
    "\050\043\067\046\042\047\052\051\154\052\046\001\001" +
    "\000\002\001\001\000\032\024\162\030\047\031\051\032" +
    "\066\034\045\035\057\036\063\040\050\043\067\046\042" +
    "\047\052\052\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\053\165\054\072\055\100\056" +
    "\104\057\107\060\110\061\111\062\073\063\075\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\041\172\042" +
    "\173\001\001\000\024\053\200\054\072\055\100\056\104" +
    "\057\107\060\110\061\111\062\073\063\075\001\001\000" +
    "\002\001\001\000\004\042\175\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\023\155\024" +
    "\041\030\047\031\051\032\066\034\045\035\057\036\063" +
    "\040\050\043\067\046\042\047\052\051\177\052\046\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\023\155" +
    "\024\041\030\047\031\051\032\066\034\045\035\057\036" +
    "\063\040\050\043\067\046\042\047\052\051\202\052\046" +
    "\001\001\000\002\001\001\000\006\014\205\044\206\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\053\211\054\072\055\100\056" +
    "\104\057\107\060\110\061\111\062\073\063\075\001\001" +
    "\000\002\001\001\000\004\045\213\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\023\155\024\041\030\047\031" +
    "\051\032\066\034\045\035\057\036\063\040\050\043\067" +
    "\046\042\047\052\051\221\052\046\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\053\225" +
    "\054\072\055\100\056\104\057\107\060\110\061\111\062" +
    "\073\063\075\001\001\000\002\001\001\000\024\053\227" +
    "\054\072\055\100\056\104\057\107\060\110\061\111\062" +
    "\073\063\075\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\033\232\053\233\054\072\055\100\056\104\057" +
    "\107\060\110\061\111\062\073\063\075\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\053\237\054\072\055" +
    "\100\056\104\057\107\060\110\061\111\062\073\063\075" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\033\242\053\233\054\072" +
    "\055\100\056\104\057\107\060\110\061\111\062\073\063" +
    "\075\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\053\246\054\072\055\100\056\104\057" +
    "\107\060\110\061\111\062\073\063\075\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\023\155\024\041\030" +
    "\047\031\051\032\066\034\045\035\057\036\063\040\050" +
    "\043\067\046\042\047\052\051\251\052\046\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\053\255\054\072\055\100\056\104\057\107\060\110\061" +
    "\111\062\073\063\075\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\053\263\054\072\055\100\056\104\057\107" +
    "\060\110\061\111\062\073\063\075\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\017\267" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\053\274\054\072\055\100" +
    "\056\104\057\107\060\110\061\111\062\073\063\075\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\053\301\054\072\055\100\056" +
    "\104\057\107\060\110\061\111\062\073\063\075\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\023\155\024" +
    "\041\030\047\031\051\032\066\034\045\035\057\036\063" +
    "\040\050\043\067\046\042\047\052\051\304\052\046\001" +
    "\001\000\002\001\001\000\004\037\307\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\023\155\024\041\030" +
    "\047\031\051\032\066\034\045\035\057\036\063\040\050" +
    "\043\067\046\042\047\052\051\311\052\046\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\014\317\022\320\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\014\327" +
    "\001\001\000\004\025\323\001\001\000\002\001\001\000" +
    "\034\023\325\024\041\030\047\031\051\032\066\034\045" +
    "\035\057\036\063\040\050\043\067\046\042\047\052\052" +
    "\046\001\001\000\032\024\162\030\047\031\051\032\066" +
    "\034\045\035\057\036\063\040\050\043\067\046\042\047" +
    "\052\052\046\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\017\333\001" +
    "\001\000\004\025\334\001\001\000\002\001\001\000\024" +
    "\053\336\054\072\055\100\056\104\057\107\060\110\061" +
    "\111\062\073\063\075\001\001\000\004\025\337\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\012\343\014\027\020\023\021\024\027\031\001\001" +
    "\000\012\014\027\020\023\021\024\027\314\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$sinG$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$sinG$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$sinG$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



public NodoArbol codigoG;
public NodoArbol gramaticaG;
public NodoArbol declaracionG;
public NodoArbol raizG;
/**Metodo al que se llama automáticamente ante algún error sintactico.*/
public void syntax_error(Symbol s){
System.out.println("No se pudo recuperar del error " + (s.right+1)+ "Columna "+s.left+". Identificador " + s.value + " no reconocido.");
// pantalla.errorLexLienzo(String.valueOf(s.value),String.valueOf(s.left),String.valueOf(s.right+1),"Sintactico"); 

}
/**Metodo al que se llama en el momento en que ya no es posible una recuperación de errores.*/
public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
System.out.println("No se pudo recuperar del error " + (s.right+1)+ "Columna "+s.left+". Identificador " + s.value + " no reconocido.");
// pantalla.errorLexLienzo(String.valueOf(s.value),String.valueOf(s.left),String.valueOf(s.right+1),"Sintactico"); 
}
/*Metodo que uso para verificar si el color es repetido*/


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$sinG$actions {





  private final sinG parser;

  /** Constructor */
  CUP$sinG$actions(sinG parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$sinG$do_action(
    int                        CUP$sinG$act_num,
    java_cup.runtime.lr_parser CUP$sinG$parser,
    java.util.Stack            CUP$sinG$stack,
    int                        CUP$sinG$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$sinG$result;

      /* select the action based on the action number */
      switch (CUP$sinG$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // VALOR ::= mentira 
            {
              NodoArbol RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-0)).value;
		
                    NodoArbol var=new NodoArbol("BOOL");
                    var.addHijo(""+r);
                    RESULT=var;
                
              CUP$sinG$result = new java_cup.runtime.Symbol(42/*VALOR*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // VALOR ::= verdad 
            {
              NodoArbol RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-0)).value;
		
                    NodoArbol var=new NodoArbol("BOOL");
                    var.addHijo(""+r);
                    RESULT=var;
                
              CUP$sinG$result = new java_cup.runtime.Symbol(42/*VALOR*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // VALOR ::= id 
            {
              NodoArbol RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-0)).value;
		
                    NodoArbol var=new NodoArbol("IDEN");
                    var.addHijo(""+r);
                    RESULT=var;
                
              CUP$sinG$result = new java_cup.runtime.Symbol(42/*VALOR*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // VALOR ::= cadena 
            {
              NodoArbol RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-0)).value;
		
                    NodoArbol var=new NodoArbol("STRING");
                    var.addHijo(""+r);
                    RESULT=var;
                
              CUP$sinG$result = new java_cup.runtime.Symbol(42/*VALOR*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // VALOR ::= caracter 
            {
              NodoArbol RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-0)).value;
		
                    NodoArbol var=new NodoArbol("CHAR");
                    var.addHijo(""+r);
                    RESULT=var;
                
              CUP$sinG$result = new java_cup.runtime.Symbol(42/*VALOR*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // VALOR ::= num 
            {
              NodoArbol RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-0)).value;
		
                    NodoArbol var=new NodoArbol("ENTERO");
                    var.addHijo(""+r);
                    RESULT=var;
                
              CUP$sinG$result = new java_cup.runtime.Symbol(42/*VALOR*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // VALOR ::= decimal 
            {
              NodoArbol RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-0)).value;
		
                    NodoArbol var=new NodoArbol("DOUBLE");
                    var.addHijo(""+r);
                    RESULT=var;
                
              CUP$sinG$result = new java_cup.runtime.Symbol(42/*VALOR*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // POT ::= VALOR 
            {
              NodoArbol RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right;
		NodoArbol r = (NodoArbol)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-0)).value;
		RESULT=r;
              CUP$sinG$result = new java_cup.runtime.Symbol(43/*POT*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // POT ::= POT pot VALOR 
            {
              NodoArbol RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-2)).right;
		NodoArbol r = (NodoArbol)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-2)).value;
		int r1left = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right;
		NodoArbol r1 = (NodoArbol)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-0)).value;
		
                NodoArbol nodo=new NodoArbol("^");
                nodo.addHijo(r);
                nodo.addHijo(r1);
                RESULT=nodo;
        
              CUP$sinG$result = new java_cup.runtime.Symbol(43/*POT*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-2)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // MULTIPLICACION ::= POT 
            {
              NodoArbol RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right;
		NodoArbol r = (NodoArbol)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-0)).value;
		RESULT=r;
              CUP$sinG$result = new java_cup.runtime.Symbol(44/*MULTIPLICACION*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // MULTIPLICACION ::= MULTIPLICACION mod POT 
            {
              NodoArbol RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-2)).right;
		NodoArbol r = (NodoArbol)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-2)).value;
		int r1left = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right;
		NodoArbol r1 = (NodoArbol)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-0)).value;
		
                    NodoArbol nodo=new NodoArbol("%");
                    nodo.addHijo(r);
                    nodo.addHijo(r1);
                    RESULT=nodo;
                
              CUP$sinG$result = new java_cup.runtime.Symbol(44/*MULTIPLICACION*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-2)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // MULTIPLICACION ::= MULTIPLICACION div POT 
            {
              NodoArbol RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-2)).right;
		NodoArbol r = (NodoArbol)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-2)).value;
		int r1left = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right;
		NodoArbol r1 = (NodoArbol)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-0)).value;
		
                    NodoArbol nodo=new NodoArbol("/");
                    nodo.addHijo(r);
                    nodo.addHijo(r1);
                    RESULT=nodo;
                
              CUP$sinG$result = new java_cup.runtime.Symbol(44/*MULTIPLICACION*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-2)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // MULTIPLICACION ::= MULTIPLICACION por POT 
            {
              NodoArbol RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-2)).right;
		NodoArbol r = (NodoArbol)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-2)).value;
		int r1left = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right;
		NodoArbol r1 = (NodoArbol)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-0)).value;
		
                    NodoArbol nodo=new NodoArbol("*");
                    nodo.addHijo(r);
                    nodo.addHijo(r1);
                    RESULT=nodo;
                
              CUP$sinG$result = new java_cup.runtime.Symbol(44/*MULTIPLICACION*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-2)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // ARITMETICO ::= MULTIPLICACION 
            {
              NodoArbol RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right;
		NodoArbol r = (NodoArbol)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-0)).value;
		RESULT=r;
              CUP$sinG$result = new java_cup.runtime.Symbol(45/*ARITMETICO*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // ARITMETICO ::= ARITMETICO resta MULTIPLICACION 
            {
              NodoArbol RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-2)).right;
		NodoArbol r = (NodoArbol)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-2)).value;
		int r1left = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right;
		NodoArbol r1 = (NodoArbol)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-0)).value;
		
                    NodoArbol nodo=new NodoArbol("-");
                    nodo.addHijo(r);
                    nodo.addHijo(r1);
                    RESULT=nodo;
                
              CUP$sinG$result = new java_cup.runtime.Symbol(45/*ARITMETICO*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-2)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // ARITMETICO ::= ARITMETICO suma MULTIPLICACION 
            {
              NodoArbol RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-2)).right;
		NodoArbol r = (NodoArbol)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-2)).value;
		int r1left = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right;
		NodoArbol r1 = (NodoArbol)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-0)).value;
		
                    NodoArbol nodo=new NodoArbol("+");
                    nodo.addHijo(r);
                    nodo.addHijo(r1);
                    RESULT=nodo;
                
              CUP$sinG$result = new java_cup.runtime.Symbol(45/*ARITMETICO*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-2)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // RELACIONAL ::= ARITMETICO 
            {
              NodoArbol RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right;
		NodoArbol r = (NodoArbol)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-0)).value;
		RESULT=r;
              CUP$sinG$result = new java_cup.runtime.Symbol(46/*RELACIONAL*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // RELACIONAL ::= RELACIONAL menor ARITMETICO 
            {
              NodoArbol RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-2)).right;
		NodoArbol r = (NodoArbol)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-2)).value;
		int r1left = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right;
		NodoArbol r1 = (NodoArbol)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-0)).value;
		
                    NodoArbol nodo=new NodoArbol("<");
                    nodo.addHijo(r);
                    nodo.addHijo(r1);
                    RESULT=nodo;
                
              CUP$sinG$result = new java_cup.runtime.Symbol(46/*RELACIONAL*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-2)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // RELACIONAL ::= RELACIONAL mayor ARITMETICO 
            {
              NodoArbol RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-2)).right;
		NodoArbol r = (NodoArbol)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-2)).value;
		int r1left = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right;
		NodoArbol r1 = (NodoArbol)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-0)).value;
		
                    NodoArbol nodo=new NodoArbol(">");
                    nodo.addHijo(r);
                    nodo.addHijo(r1);
                    RESULT=nodo;
                
              CUP$sinG$result = new java_cup.runtime.Symbol(46/*RELACIONAL*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-2)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // RELACIONAL ::= RELACIONAL menorIgual ARITMETICO 
            {
              NodoArbol RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-2)).right;
		NodoArbol r = (NodoArbol)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-2)).value;
		int r1left = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right;
		NodoArbol r1 = (NodoArbol)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-0)).value;
		
                    NodoArbol nodo=new NodoArbol("<=");
                    nodo.addHijo(r);
                    nodo.addHijo(r1);
                    RESULT=nodo;
                
              CUP$sinG$result = new java_cup.runtime.Symbol(46/*RELACIONAL*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-2)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // RELACIONAL ::= RELACIONAL mayorIgual ARITMETICO 
            {
              NodoArbol RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-2)).right;
		NodoArbol r = (NodoArbol)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-2)).value;
		int r1left = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right;
		NodoArbol r1 = (NodoArbol)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-0)).value;
		
                    NodoArbol nodo=new NodoArbol(">=");
                    nodo.addHijo(r);
                    nodo.addHijo(r1);
                    RESULT=nodo;
                
              CUP$sinG$result = new java_cup.runtime.Symbol(46/*RELACIONAL*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-2)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // RELACIONAL ::= RELACIONAL distinto ARITMETICO 
            {
              NodoArbol RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-2)).right;
		NodoArbol r = (NodoArbol)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-2)).value;
		int r1left = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right;
		NodoArbol r1 = (NodoArbol)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-0)).value;
		
                    NodoArbol nodo=new NodoArbol("!=");
                    nodo.addHijo(r);
                    nodo.addHijo(r1);
                    RESULT=nodo;
                
              CUP$sinG$result = new java_cup.runtime.Symbol(46/*RELACIONAL*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-2)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // RELACIONAL ::= RELACIONAL comparacion ARITMETICO 
            {
              NodoArbol RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-2)).right;
		NodoArbol r = (NodoArbol)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-2)).value;
		int r1left = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right;
		NodoArbol r1 = (NodoArbol)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-0)).value;
		
                    NodoArbol nodo=new NodoArbol("==");
                    nodo.addHijo(r);
                    nodo.addHijo(r1);
                    RESULT=nodo;
                
              CUP$sinG$result = new java_cup.runtime.Symbol(46/*RELACIONAL*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-2)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // NOT ::= RELACIONAL 
            {
              NodoArbol RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right;
		NodoArbol r = (NodoArbol)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-0)).value;
		RESULT=r;
              CUP$sinG$result = new java_cup.runtime.Symbol(47/*NOT*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // NOT ::= notLogico RELACIONAL 
            {
              NodoArbol RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right;
		NodoArbol r = (NodoArbol)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-0)).value;
		
                    NodoArbol nodo=new NodoArbol("!");
                    nodo.addHijo(r);
                    RESULT=nodo;
                
              CUP$sinG$result = new java_cup.runtime.Symbol(47/*NOT*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-1)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // AND ::= NOT 
            {
              NodoArbol RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right;
		NodoArbol r = (NodoArbol)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-0)).value;
		RESULT=r;
              CUP$sinG$result = new java_cup.runtime.Symbol(48/*AND*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // AND ::= AND yLogico NOT 
            {
              NodoArbol RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-2)).right;
		NodoArbol r = (NodoArbol)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-2)).value;
		int r1left = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right;
		NodoArbol r1 = (NodoArbol)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-0)).value;
		
                    NodoArbol nodo=new NodoArbol("&&");
                    nodo.addHijo(r);
                    nodo.addHijo(r1);
                    RESULT=nodo;
                
              CUP$sinG$result = new java_cup.runtime.Symbol(48/*AND*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-2)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // XOR ::= AND 
            {
              NodoArbol RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right;
		NodoArbol r = (NodoArbol)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-0)).value;
		RESULT=r;
              CUP$sinG$result = new java_cup.runtime.Symbol(49/*XOR*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // XOR ::= XOR xorLogico AND 
            {
              NodoArbol RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-2)).right;
		NodoArbol r = (NodoArbol)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-2)).value;
		int r1left = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right;
		NodoArbol r1 = (NodoArbol)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-0)).value;
		
                    NodoArbol nodo=new NodoArbol("&|");
                    nodo.addHijo(r);
                    nodo.addHijo(r1);
                    RESULT=nodo;
                
              CUP$sinG$result = new java_cup.runtime.Symbol(49/*XOR*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-2)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // OP ::= XOR 
            {
              NodoArbol RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right;
		NodoArbol r = (NodoArbol)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-0)).value;
		RESULT=r;
              CUP$sinG$result = new java_cup.runtime.Symbol(41/*OP*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // OP ::= OP oLogico XOR 
            {
              NodoArbol RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-2)).right;
		NodoArbol r = (NodoArbol)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-2)).value;
		int r1left = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right;
		NodoArbol r1 = (NodoArbol)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-0)).value;
		
                    NodoArbol nodo=new NodoArbol("||");
                    nodo.addHijo(r);
                    nodo.addHijo(r1);
                    RESULT=nodo;
                
              CUP$sinG$result = new java_cup.runtime.Symbol(41/*OP*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-2)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // RETORNO ::= retornarL OP delimitador 
            {
              NodoArbol RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-1)).right;
		NodoArbol r = (NodoArbol)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-1)).value;
		
                    NodoArbol nodo=new NodoArbol("retornar");
                    nodo.addHijo(r);
                    RESULT=nodo;
                
              CUP$sinG$result = new java_cup.runtime.Symbol(22/*RETORNO*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-2)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // VARIABLE ::= varL TDATO LIDS delimitador 
            {
              NodoArbol RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-2)).right;
		NodoArbol r = (NodoArbol)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-2)).value;
		int r1left = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-1)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-1)).right;
		NodoArbol r1 = (NodoArbol)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-1)).value;
		
                    NodoArbol nodo=new NodoArbol("DECLARACION_VARIABLE");
                    nodo.addHijo(r);
                    nodo.addHijo(r1);
                    RESULT=nodo;
                
              CUP$sinG$result = new java_cup.runtime.Symbol(23/*VARIABLE*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-3)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // VARIABLE ::= varL TDATO LIDS asignacion OP delimitador 
            {
              NodoArbol RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-4)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-4)).right;
		NodoArbol r = (NodoArbol)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-4)).value;
		int r1left = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-3)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-3)).right;
		NodoArbol r1 = (NodoArbol)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-3)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-1)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-1)).right;
		NodoArbol r2 = (NodoArbol)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-1)).value;
		
                    NodoArbol nodo=new NodoArbol("DECLARACION_VARIABLE_OP");
                    nodo.addHijo(r);
                    nodo.addHijo(r1);
                    nodo.addHijo(r2);
                    RESULT=nodo;
                
              CUP$sinG$result = new java_cup.runtime.Symbol(23/*VARIABLE*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-5)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // PARAMETROSV ::= 
            {
              NodoArbol RESULT = null;
		NodoArbol nodo=new NodoArbol("VACIO");RESULT=nodo;
              CUP$sinG$result = new java_cup.runtime.Symbol(25/*PARAMETROSV*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // PARAMETROSV ::= OP 
            {
              NodoArbol RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right;
		NodoArbol r = (NodoArbol)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-0)).value;
		
                    NodoArbol nodo=new NodoArbol("PARAMETROSV");
                    nodo.addHijo(r);
                    RESULT=nodo;
                
              CUP$sinG$result = new java_cup.runtime.Symbol(25/*PARAMETROSV*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // PARAMETROSV ::= PARAMETROSV coma OP 
            {
              NodoArbol RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-2)).right;
		NodoArbol r = (NodoArbol)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-2)).value;
		int r1left = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right;
		NodoArbol r1 = (NodoArbol)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-0)).value;
		
                    r.addHijo(r1);
                    RESULT=r;
                
              CUP$sinG$result = new java_cup.runtime.Symbol(25/*PARAMETROSV*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-2)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // LLAMARFUNCION ::= llamarL id parA PARAMETROSV parC delimitador 
            {
              NodoArbol RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-4)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-4)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-4)).value;
		int r1left = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-2)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-2)).right;
		NodoArbol r1 = (NodoArbol)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-2)).value;
		
                    NodoArbol nodo=new NodoArbol("LLAMAR_FUNCION");
                    nodo.addHijo(r);
                    nodo.addHijo(r1);                    
                    RESULT=nodo;
                
              CUP$sinG$result = new java_cup.runtime.Symbol(24/*LLAMARFUNCION*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-5)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // LLAMARHK ::= llamarhkL id parA PARAMETROSV parC delimitador 
            {
              NodoArbol RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-4)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-4)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-4)).value;
		int r1left = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-2)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-2)).right;
		NodoArbol r1 = (NodoArbol)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-2)).value;
		
                    NodoArbol nodo=new NodoArbol("LLAMAR_FUNCION_HASKELL");
                    nodo.addHijo(r);
                    nodo.addHijo(r1);                    
                    RESULT=nodo;
                
              CUP$sinG$result = new java_cup.runtime.Symbol(26/*LLAMARHK*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-5)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ASIGNACION ::= id asignacion OP delimitador 
            {
              NodoArbol RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-3)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-3)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-3)).value;
		int r1left = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-1)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-1)).right;
		NodoArbol r1 = (NodoArbol)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-1)).value;
		
                    NodoArbol nodo=new NodoArbol("ASIGNACION_VARIABLE");
                    nodo.addHijo(r);
                    nodo.addHijo(r1);                    
                    RESULT=nodo;
                
              CUP$sinG$result = new java_cup.runtime.Symbol(27/*ASIGNACION*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-3)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // SINO ::= 
            {
              NodoArbol RESULT = null;
		NodoArbol nodo=new NodoArbol("VACIO");RESULT=nodo;
              CUP$sinG$result = new java_cup.runtime.Symbol(29/*SINO*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // SINO ::= elseL llaveA CUERPOTEMP llaveC 
            {
              NodoArbol RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-1)).right;
		NodoArbol r = (NodoArbol)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-1)).value;
		
                    NodoArbol nodo=new NodoArbol("SINO");
                    nodo.addHijo(r);                    
                    RESULT=nodo;
                
              CUP$sinG$result = new java_cup.runtime.Symbol(29/*SINO*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-3)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // SI ::= ifL parA OP parC llaveA CUERPOTEMP llaveC SINO 
            {
              NodoArbol RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-5)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-5)).right;
		NodoArbol r = (NodoArbol)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-5)).value;
		int r1left = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-2)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-2)).right;
		NodoArbol r1 = (NodoArbol)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-2)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right;
		NodoArbol r2 = (NodoArbol)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-0)).value;
		
                    NodoArbol nodo=new NodoArbol("IF");
                    nodo.addHijo(r);
                    nodo.addHijo(r1);    
                    nodo.addHijo(r2);                    
                    RESULT=nodo;
                
              CUP$sinG$result = new java_cup.runtime.Symbol(28/*SI*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-7)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // CASO ::= defaultL dosPuntos CUERPOTEMP 
            {
              NodoArbol RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right;
		NodoArbol r = (NodoArbol)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-0)).value;
		
                    NodoArbol nodo=new NodoArbol("DEFAULT");
                    nodo.addHijo(r);                   
                    RESULT=nodo;
                
              CUP$sinG$result = new java_cup.runtime.Symbol(32/*CASO*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-2)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // CASO ::= caseL OP dosPuntos CUERPOTEMP 
            {
              NodoArbol RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-2)).right;
		NodoArbol r = (NodoArbol)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-2)).value;
		int r1left = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right;
		NodoArbol r1 = (NodoArbol)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-0)).value;
		
                    NodoArbol nodo=new NodoArbol("CASO");
                    nodo.addHijo(r);
                    nodo.addHijo(r1);                      
                    RESULT=nodo;
                
              CUP$sinG$result = new java_cup.runtime.Symbol(32/*CASO*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-3)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // CASOS ::= CASO 
            {
              NodoArbol RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right;
		NodoArbol r = (NodoArbol)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-0)).value;
		
                    NodoArbol nodo=new NodoArbol("CASOS");
                    nodo.addHijo(r);                   
                    RESULT=nodo;
                
              CUP$sinG$result = new java_cup.runtime.Symbol(31/*CASOS*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // CASOS ::= CASOS CASO 
            {
              NodoArbol RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-1)).right;
		NodoArbol r = (NodoArbol)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-1)).value;
		int r1left = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right;
		NodoArbol r1 = (NodoArbol)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-0)).value;
		
                    r.addHijo(r1);                    
                    RESULT=r;
                
              CUP$sinG$result = new java_cup.runtime.Symbol(31/*CASOS*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-1)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // SWITCH ::= switchL parA OP parC llaveA CASOS llaveC 
            {
              NodoArbol RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-4)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-4)).right;
		NodoArbol r = (NodoArbol)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-4)).value;
		int r1left = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-1)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-1)).right;
		NodoArbol r1 = (NodoArbol)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-1)).value;
		
                    NodoArbol nodo=new NodoArbol("SWITCH");
                    nodo.addHijo(r);
                    nodo.addHijo(r1);                       
                    RESULT=nodo;
                
              CUP$sinG$result = new java_cup.runtime.Symbol(30/*SWITCH*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-6)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // CONDICIONFOR ::= id asignacion OP 
            {
              NodoArbol RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-2)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-2)).value;
		int r1left = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right;
		NodoArbol r1 = (NodoArbol)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-0)).value;
		
                    NodoArbol nodo=new NodoArbol("ASIGNACION");
                    nodo.addHijo(r);
                    nodo.addHijo(r1);                       
                    RESULT=nodo;
                
              CUP$sinG$result = new java_cup.runtime.Symbol(34/*CONDICIONFOR*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-2)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // CONDICIONFOR ::= TDATO id asignacion OP 
            {
              NodoArbol RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-3)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-3)).right;
		NodoArbol r = (NodoArbol)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-3)).value;
		int r1left = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-2)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-2)).right;
		String r1 = (String)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-2)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right;
		NodoArbol r2 = (NodoArbol)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-0)).value;
		
                    NodoArbol nodo=new NodoArbol("DECLARACION_VARIABLE_FOR");
                    nodo.addHijo(r);
                    nodo.addHijo(r1);    
                    nodo.addHijo(r2);                    
                    RESULT=nodo;
                
              CUP$sinG$result = new java_cup.runtime.Symbol(34/*CONDICIONFOR*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-3)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // INCREMENTOFOR ::= id aumento 
            {
              NodoArbol RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-1)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-1)).value;
		
                    NodoArbol nodo=new NodoArbol("++");
                    nodo.addHijo(r);                    
                    RESULT=nodo;
                
              CUP$sinG$result = new java_cup.runtime.Symbol(35/*INCREMENTOFOR*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-1)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // INCREMENTOFOR ::= id disminucion 
            {
              NodoArbol RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-1)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-1)).value;
		
                        NodoArbol nodo=new NodoArbol("--");
                        nodo.addHijo(r);                   
                        RESULT=nodo;
                    
              CUP$sinG$result = new java_cup.runtime.Symbol(35/*INCREMENTOFOR*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-1)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // FOR ::= forL parA CONDICIONFOR dosPuntos OP dosPuntos INCREMENTOFOR parC llaveA CUERPOTEMP llaveC 
            {
              NodoArbol RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-8)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-8)).right;
		NodoArbol r = (NodoArbol)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-8)).value;
		int r1left = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-6)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-6)).right;
		NodoArbol r1 = (NodoArbol)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-6)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-4)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-4)).right;
		NodoArbol r2 = (NodoArbol)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-4)).value;
		int r3left = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-1)).left;
		int r3right = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-1)).right;
		NodoArbol r3 = (NodoArbol)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-1)).value;
		
                    NodoArbol nodo=new NodoArbol("FOR");
                    nodo.addHijo(r);
                    nodo.addHijo(r1);    
                    nodo.addHijo(r2);                    
                    nodo.addHijo(r3);                    
                    RESULT=nodo;
                
              CUP$sinG$result = new java_cup.runtime.Symbol(33/*FOR*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-10)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // WHILE ::= whileL parA OP parC llaveA CUERPOTEMP llaveC 
            {
              NodoArbol RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-4)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-4)).right;
		NodoArbol r = (NodoArbol)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-4)).value;
		int r1left = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-1)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-1)).right;
		NodoArbol r1 = (NodoArbol)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-1)).value;
		
                    NodoArbol nodo=new NodoArbol("WHILE");
                    nodo.addHijo(r);
                    nodo.addHijo(r1);                     
                    RESULT=nodo;
                
              CUP$sinG$result = new java_cup.runtime.Symbol(36/*WHILE*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-6)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // DOWHILE ::= doL llaveA CUERPOTEMP llaveC whileL parA OP parC delimitador 
            {
              NodoArbol RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-6)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-6)).right;
		NodoArbol r = (NodoArbol)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-6)).value;
		int r1left = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-2)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-2)).right;
		NodoArbol r1 = (NodoArbol)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-2)).value;
		
                    NodoArbol nodo=new NodoArbol("DO_WHILE");
                    nodo.addHijo(r);
                    nodo.addHijo(r1);                 
                    RESULT=nodo;
                
              CUP$sinG$result = new java_cup.runtime.Symbol(37/*DOWHILE*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-8)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // IMPRIMIR ::= printL parA OP parC delimitador 
            {
              NodoArbol RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-2)).right;
		NodoArbol r = (NodoArbol)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-2)).value;
		
                    NodoArbol nodo=new NodoArbol("IMPRIMIR");
                    nodo.addHijo(r);                
                    RESULT=nodo;
                
              CUP$sinG$result = new java_cup.runtime.Symbol(40/*IMPRIMIR*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-4)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // CUERPO ::= IMPRIMIR 
            {
              NodoArbol RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right;
		NodoArbol r = (NodoArbol)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-0)).value;
		RESULT=r;
              CUP$sinG$result = new java_cup.runtime.Symbol(18/*CUERPO*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // CUERPO ::= DOWHILE 
            {
              NodoArbol RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right;
		NodoArbol r = (NodoArbol)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-0)).value;
		RESULT=r;
              CUP$sinG$result = new java_cup.runtime.Symbol(18/*CUERPO*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // CUERPO ::= WHILE 
            {
              NodoArbol RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right;
		NodoArbol r = (NodoArbol)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-0)).value;
		RESULT=r;
              CUP$sinG$result = new java_cup.runtime.Symbol(18/*CUERPO*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // CUERPO ::= FOR 
            {
              NodoArbol RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right;
		NodoArbol r = (NodoArbol)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-0)).value;
		RESULT=r;
              CUP$sinG$result = new java_cup.runtime.Symbol(18/*CUERPO*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // CUERPO ::= SWITCH 
            {
              NodoArbol RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right;
		NodoArbol r = (NodoArbol)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-0)).value;
		RESULT=r;
              CUP$sinG$result = new java_cup.runtime.Symbol(18/*CUERPO*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // CUERPO ::= SI 
            {
              NodoArbol RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right;
		NodoArbol r = (NodoArbol)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-0)).value;
		RESULT=r;
              CUP$sinG$result = new java_cup.runtime.Symbol(18/*CUERPO*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // CUERPO ::= ASIGNACION 
            {
              NodoArbol RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right;
		NodoArbol r = (NodoArbol)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-0)).value;
		RESULT=r;
              CUP$sinG$result = new java_cup.runtime.Symbol(18/*CUERPO*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // CUERPO ::= LLAMARHK 
            {
              NodoArbol RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right;
		NodoArbol r = (NodoArbol)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-0)).value;
		RESULT=r;
              CUP$sinG$result = new java_cup.runtime.Symbol(18/*CUERPO*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // CUERPO ::= LLAMARFUNCION 
            {
              NodoArbol RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right;
		NodoArbol r = (NodoArbol)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-0)).value;
		RESULT=r;
              CUP$sinG$result = new java_cup.runtime.Symbol(18/*CUERPO*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // CUERPO ::= VARIABLE 
            {
              NodoArbol RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right;
		NodoArbol r = (NodoArbol)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-0)).value;
		RESULT=r;
              CUP$sinG$result = new java_cup.runtime.Symbol(18/*CUERPO*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // CUERPO ::= RETORNO 
            {
              NodoArbol RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right;
		NodoArbol r = (NodoArbol)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-0)).value;
		RESULT=r;
              CUP$sinG$result = new java_cup.runtime.Symbol(18/*CUERPO*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // CUERPOTEMP ::= breakL delimitador 
            {
              NodoArbol RESULT = null;
		
                    NodoArbol nodo=new NodoArbol("BREAK");               
                    RESULT=nodo;
                
              CUP$sinG$result = new java_cup.runtime.Symbol(39/*CUERPOTEMP*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-1)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // CUERPOTEMP ::= continueL delimitador 
            {
              NodoArbol RESULT = null;
		
                    NodoArbol nodo=new NodoArbol("CONTINUAR");                
                    RESULT=nodo;
                
              CUP$sinG$result = new java_cup.runtime.Symbol(39/*CUERPOTEMP*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-1)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // CUERPOTEMP ::= CUERPOFUNCIONES 
            {
              NodoArbol RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right;
		NodoArbol r = (NodoArbol)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-0)).value;
		RESULT=r;
              CUP$sinG$result = new java_cup.runtime.Symbol(39/*CUERPOTEMP*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // CUERPOFUNCIONES ::= CUERPO 
            {
              NodoArbol RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right;
		NodoArbol r = (NodoArbol)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-0)).value;
		
                    NodoArbol nodo=new NodoArbol("CUERPO_FUNCIONES");
                    nodo.addHijo(r);                
                    RESULT=nodo;
                
              CUP$sinG$result = new java_cup.runtime.Symbol(17/*CUERPOFUNCIONES*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // CUERPOFUNCIONES ::= CUERPOFUNCIONES CUERPO 
            {
              NodoArbol RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-1)).right;
		NodoArbol r = (NodoArbol)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-1)).value;
		int r1left = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right;
		NodoArbol r1 = (NodoArbol)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-0)).value;
		
                    r.addHijo(r1);                 
                    RESULT=r;
                
              CUP$sinG$result = new java_cup.runtime.Symbol(17/*CUERPOFUNCIONES*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-1)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // LPARAMETROS ::= 
            {
              NodoArbol RESULT = null;
		NodoArbol nodo=new NodoArbol("VACIO");RESULT=nodo;
              CUP$sinG$result = new java_cup.runtime.Symbol(16/*LPARAMETROS*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // LPARAMETROS ::= TDATO id 
            {
              NodoArbol RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-1)).right;
		NodoArbol r = (NodoArbol)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-1)).value;
		int r1left = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right;
		String r1 = (String)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-0)).value;
		
                    NodoArbol nodo1=new NodoArbol("PARAMETROS");
                    NodoArbol nodo=new NodoArbol("PARAMETRO");
                    nodo.addHijo(r);
                    nodo.addHijo(r1);
                    nodo1.addHijo(nodo);
                    RESULT=nodo1;
                
              CUP$sinG$result = new java_cup.runtime.Symbol(16/*LPARAMETROS*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-1)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // LPARAMETROS ::= LPARAMETROS coma TDATO id 
            {
              NodoArbol RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-3)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-3)).right;
		NodoArbol r = (NodoArbol)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-3)).value;
		int r1left = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-1)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-1)).right;
		NodoArbol r1 = (NodoArbol)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-1)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right;
		String r2 = (String)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-0)).value;
		
                    NodoArbol nodo=new NodoArbol("PARAMETRO");
                    nodo.addHijo(r1);
                    nodo.addHijo(r2);
                    r.addHijo(nodo);
                    RESULT=r;
                
              CUP$sinG$result = new java_cup.runtime.Symbol(16/*LPARAMETROS*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-3)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // TVISIBLE ::= privadoL 
            {
              NodoArbol RESULT = null;
		
                    NodoArbol nodo=new NodoArbol("PRIVADO");               
                    RESULT=nodo;
                
              CUP$sinG$result = new java_cup.runtime.Symbol(11/*TVISIBLE*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // TVISIBLE ::= protegidoL 
            {
              NodoArbol RESULT = null;
		
                    NodoArbol nodo=new NodoArbol("PROTEGIDO");               
                    RESULT=nodo;
                
              CUP$sinG$result = new java_cup.runtime.Symbol(11/*TVISIBLE*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // TVISIBLE ::= publicoL 
            {
              NodoArbol RESULT = null;
		
                    
                    NodoArbol nodo=new NodoArbol("PUBLICO");               
                    RESULT=nodo;
                
              CUP$sinG$result = new java_cup.runtime.Symbol(11/*TVISIBLE*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // VISIBILIDAD ::= 
            {
              NodoArbol RESULT = null;
		NodoArbol nodo=new NodoArbol("VACIO");RESULT=nodo;
              CUP$sinG$result = new java_cup.runtime.Symbol(19/*VISIBILIDAD*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // VISIBILIDAD ::= dosPuntos TVISIBLE 
            {
              NodoArbol RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right;
		NodoArbol r = (NodoArbol)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-0)).value;
		System.out.println("visibilidad");RESULT=r;
              CUP$sinG$result = new java_cup.runtime.Symbol(19/*VISIBILIDAD*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-1)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // FUNCIONES ::= vacioL mainL parA parC llaveA CUERPOFUNCIONES llaveC 
            {
              NodoArbol RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-1)).right;
		NodoArbol r = (NodoArbol)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-1)).value;
		
                    NodoArbol nodo=new NodoArbol("PRINCIPAL"); 
                    nodo.addHijo(r);
                    RESULT=nodo;
                
              CUP$sinG$result = new java_cup.runtime.Symbol(15/*FUNCIONES*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-6)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // FUNCIONES ::= TDATO id parA LPARAMETROS parC VISIBILIDAD llaveA CUERPOFUNCIONES llaveC 
            {
              NodoArbol RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-8)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-8)).right;
		NodoArbol r = (NodoArbol)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-8)).value;
		int r1left = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-7)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-7)).right;
		String r1 = (String)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-7)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-5)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-5)).right;
		NodoArbol r2 = (NodoArbol)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-5)).value;
		int r3left = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-3)).left;
		int r3right = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-3)).right;
		NodoArbol r3 = (NodoArbol)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-3)).value;
		int r4left = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-1)).left;
		int r4right = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-1)).right;
		NodoArbol r4 = (NodoArbol)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-1)).value;
		
                    NodoArbol nodo=new NodoArbol("FUNCION_METODO"); 
                    nodo.addHijo(r);
                    nodo.addHijo(r1);
                    nodo.addHijo(r2);
                    nodo.addHijo(r3);
                    nodo.addHijo(r4);
                    RESULT=nodo;
                
              CUP$sinG$result = new java_cup.runtime.Symbol(15/*FUNCIONES*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-8)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // TDATO ::= id 
            {
              NodoArbol RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-0)).value;
		
                    NodoArbol nodo=new NodoArbol("OBJETO"); 
                    nodo.addHijo(r);
                    RESULT=nodo;
                
              CUP$sinG$result = new java_cup.runtime.Symbol(10/*TDATO*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // TDATO ::= vacioL 
            {
              NodoArbol RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-0)).value;
		
                    NodoArbol nodo=new NodoArbol("VOID"); 
                    RESULT=nodo;
                
              CUP$sinG$result = new java_cup.runtime.Symbol(10/*TDATO*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // TDATO ::= boolL 
            {
              NodoArbol RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-0)).value;
		
                    NodoArbol nodo=new NodoArbol("BOOL"); 
                    RESULT=nodo;
                
              CUP$sinG$result = new java_cup.runtime.Symbol(10/*TDATO*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // TDATO ::= cadenaL 
            {
              NodoArbol RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-0)).value;
		
                    NodoArbol nodo=new NodoArbol("STRING"); 
                    RESULT=nodo;
                
              CUP$sinG$result = new java_cup.runtime.Symbol(10/*TDATO*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // TDATO ::= caracterL 
            {
              NodoArbol RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-0)).value;
		
                    NodoArbol nodo=new NodoArbol("CHAR"); 
                    RESULT=nodo;
                
              CUP$sinG$result = new java_cup.runtime.Symbol(10/*TDATO*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // TDATO ::= decimalL 
            {
              NodoArbol RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-0)).value;
		
                    NodoArbol nodo=new NodoArbol("DOUBLE"); 
                    RESULT=nodo;
                
              CUP$sinG$result = new java_cup.runtime.Symbol(10/*TDATO*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // TDATO ::= enteroL 
            {
              NodoArbol RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-0)).value;
		
                    NodoArbol nodo=new NodoArbol("ENTERO"); 
                    RESULT=nodo;
                
              CUP$sinG$result = new java_cup.runtime.Symbol(10/*TDATO*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // LIDS ::= id 
            {
              NodoArbol RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-0)).value;
		
                    NodoArbol nodo=new NodoArbol("IDS"); 
                    nodo.addHijo(r);
                    RESULT=nodo;
                
              CUP$sinG$result = new java_cup.runtime.Symbol(13/*LIDS*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // LIDS ::= LIDS coma id 
            {
              NodoArbol RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-2)).right;
		NodoArbol r = (NodoArbol)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-2)).value;
		int r1left = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right;
		String r1 = (String)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-0)).value;
		
                    r.addHijo(r1);
                    RESULT=r;
                
              CUP$sinG$result = new java_cup.runtime.Symbol(13/*LIDS*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-2)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ATRIBUTOS ::= varL TDATO LIDS VISIBILIDAD delimitador 
            {
              NodoArbol RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-3)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-3)).right;
		NodoArbol r = (NodoArbol)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-3)).value;
		int r1left = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-2)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-2)).right;
		NodoArbol r1 = (NodoArbol)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-2)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-1)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-1)).right;
		NodoArbol r2 = (NodoArbol)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-1)).value;
		
                    NodoArbol nodo=new NodoArbol("DECLARACION_ATRIBUTOS");
                    nodo.addHijo(r);
                    nodo.addHijo(r1);
                    nodo.addHijo(r2);
                    RESULT=nodo;
                
              CUP$sinG$result = new java_cup.runtime.Symbol(14/*ATRIBUTOS*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-4)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ATRIBUTOS ::= varL TDATO LIDS asignacion OP VISIBILIDAD delimitador 
            {
              NodoArbol RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-5)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-5)).right;
		NodoArbol r = (NodoArbol)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-5)).value;
		int r1left = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-4)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-4)).right;
		NodoArbol r1 = (NodoArbol)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-4)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-2)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-2)).right;
		NodoArbol r2 = (NodoArbol)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-2)).value;
		int r3left = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-1)).left;
		int r3right = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-1)).right;
		NodoArbol r3 = (NodoArbol)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-1)).value;
		
                    NodoArbol nodo=new NodoArbol("DECLARACION_ATRIBUTOS_OP");
                    nodo.addHijo(r);
                    nodo.addHijo(r1);
                    nodo.addHijo(r2);
                    nodo.addHijo(r3);
                    RESULT=nodo;
                
              CUP$sinG$result = new java_cup.runtime.Symbol(14/*ATRIBUTOS*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-6)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // CUERPOASL ::= FUNCIONES 
            {
              NodoArbol RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right;
		NodoArbol r = (NodoArbol)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-0)).value;
		RESULT=r;
              CUP$sinG$result = new java_cup.runtime.Symbol(21/*CUERPOASL*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CUERPOASL ::= ATRIBUTOS 
            {
              NodoArbol RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right;
		NodoArbol r = (NodoArbol)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-0)).value;
		RESULT=r;
              CUP$sinG$result = new java_cup.runtime.Symbol(21/*CUERPOASL*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CUERPOSALS ::= CUERPOASL 
            {
              NodoArbol RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right;
		NodoArbol r = (NodoArbol)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-0)).value;
		
                    NodoArbol nodo=new NodoArbol("FUNCIONES_DEL_ARCHIVO");
                    nodo.addHijo(r);
                    RESULT=nodo;
                
              CUP$sinG$result = new java_cup.runtime.Symbol(8/*CUERPOSALS*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CUERPOSALS ::= CUERPOSALS CUERPOASL 
            {
              NodoArbol RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-1)).right;
		NodoArbol r = (NodoArbol)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-1)).value;
		int r1left = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right;
		NodoArbol r1 = (NodoArbol)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-0)).value;
		
                    r.addHijo(r1);
                    RESULT=r;
                
              CUP$sinG$result = new java_cup.runtime.Symbol(8/*CUERPOSALS*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-1)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CREARALS ::= alsL id heredaL id VISIBILIDAD llaveA CUERPOSALS llaveC 
            {
              NodoArbol RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-6)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-6)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-6)).value;
		int r1left = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-4)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-4)).right;
		String r1 = (String)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-4)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-3)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-3)).right;
		NodoArbol r2 = (NodoArbol)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-3)).value;
		int r3left = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-1)).left;
		int r3right = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-1)).right;
		NodoArbol r3 = (NodoArbol)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-1)).value;
		
                    NodoArbol nodo=new NodoArbol("ALS_HEREDADO");
                    nodo.addHijo(r);
                    nodo.addHijo(r1);
                    nodo.addHijo(r2);
                    nodo.addHijo(r3);
                    RESULT=nodo;
                
              CUP$sinG$result = new java_cup.runtime.Symbol(6/*CREARALS*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-7)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // CREARALS ::= alsL id VISIBILIDAD llaveA CUERPOSALS llaveC 
            {
              NodoArbol RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-4)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-4)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-4)).value;
		int r1left = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-3)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-3)).right;
		NodoArbol r1 = (NodoArbol)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-3)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-1)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-1)).right;
		NodoArbol r2 = (NodoArbol)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-1)).value;
		
                    NodoArbol nodo=new NodoArbol("ALS_NORMAL");
                    nodo.addHijo(r);
                    nodo.addHijo(r1);
                    nodo.addHijo(r2);
                    RESULT=nodo;
                
              CUP$sinG$result = new java_cup.runtime.Symbol(6/*CREARALS*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-5)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DECASL ::= CREARALS 
            {
              NodoArbol RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right;
		NodoArbol r = (NodoArbol)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-0)).value;
		
                    NodoArbol nodo=new NodoArbol("ALS");
                    nodo.addHijo(r);
                    RESULT=nodo;
                
              CUP$sinG$result = new java_cup.runtime.Symbol(7/*DECASL*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DECASL ::= DECASL CREARALS 
            {
              NodoArbol RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-1)).right;
		NodoArbol r = (NodoArbol)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-1)).value;
		int r1left = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right;
		NodoArbol r1 = (NodoArbol)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-0)).value;
		
                    r.addHijo(r);
                    RESULT=r;
                
              CUP$sinG$result = new java_cup.runtime.Symbol(7/*DECASL*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-1)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // IMPORTHK ::= incluirHK id delimitador 
            {
              NodoArbol RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-1)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-1)).value;
		
                    NodoArbol nodo=new NodoArbol("HK");
                    nodo.addHijo(r);
                    RESULT=nodo;
                
              CUP$sinG$result = new java_cup.runtime.Symbol(5/*IMPORTHK*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-2)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // IMPORTARHK ::= 
            {
              NodoArbol RESULT = null;
		NodoArbol nodo=new NodoArbol("VACIO");RESULT=nodo;
              CUP$sinG$result = new java_cup.runtime.Symbol(4/*IMPORTARHK*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // IMPORTARHK ::= IMPORTHK 
            {
              NodoArbol RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right;
		NodoArbol r = (NodoArbol)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-0)).value;
		
                    NodoArbol nodo=new NodoArbol("IMPORTAR_KH");
                    nodo.addHijo(r);
                    RESULT=nodo;
                
              CUP$sinG$result = new java_cup.runtime.Symbol(4/*IMPORTARHK*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // IMPORTARHK ::= IMPORTARHK IMPORTHK 
            {
              NodoArbol RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-1)).right;
		NodoArbol r = (NodoArbol)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-1)).value;
		int r1left = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right;
		NodoArbol r1 = (NodoArbol)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-0)).value;
		
                    r.addHijo(r1);
                    RESULT=r;
                
              CUP$sinG$result = new java_cup.runtime.Symbol(4/*IMPORTARHK*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-1)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // IMPORTACION ::= imports id delimitador 
            {
              NodoArbol RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-1)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-1)).value;
		
                    NodoArbol nodo=new NodoArbol("GH");
                    nodo.addHijo(r);
                    RESULT=nodo;
                
              CUP$sinG$result = new java_cup.runtime.Symbol(3/*IMPORTACION*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-2)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // IMPORTACIONES ::= 
            {
              NodoArbol RESULT = null;
		NodoArbol nodo=new NodoArbol("VACIO");RESULT=nodo;
              CUP$sinG$result = new java_cup.runtime.Symbol(2/*IMPORTACIONES*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // IMPORTACIONES ::= IMPORTACION 
            {
              NodoArbol RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right;
		NodoArbol r = (NodoArbol)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-0)).value;
		
                    NodoArbol nodo=new NodoArbol("IMPORTAR_GH");
                    nodo.addHijo(r);
                    RESULT=nodo;
                
              CUP$sinG$result = new java_cup.runtime.Symbol(2/*IMPORTACIONES*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // IMPORTACIONES ::= IMPORTACIONES IMPORTACION 
            {
              NodoArbol RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-1)).right;
		NodoArbol r = (NodoArbol)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-1)).value;
		int r1left = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right;
		NodoArbol r1 = (NodoArbol)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-0)).value;
		
                    r.addHijo(r1);
                    RESULT=r;
                
              CUP$sinG$result = new java_cup.runtime.Symbol(2/*IMPORTACIONES*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-1)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIAL ::= DECASL 
            {
              NodoArbol RESULT = null;
		int r2left = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right;
		NodoArbol r2 = (NodoArbol)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-0)).value;
		
                    NodoArbol nodo=new NodoArbol("INICIAL");
                    //nodo.addHijo(r);
                    //nodo.addHijo(r1);
                    nodo.addHijo(r2);
                    parser.raizG=nodo;
                
              CUP$sinG$result = new java_cup.runtime.Symbol(1/*INICIAL*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIAL EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-1)).right;
		NodoArbol start_val = (NodoArbol)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-1)).value;
		RESULT = start_val;
              CUP$sinG$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-1)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$sinG$parser.done_parsing();
          return CUP$sinG$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

