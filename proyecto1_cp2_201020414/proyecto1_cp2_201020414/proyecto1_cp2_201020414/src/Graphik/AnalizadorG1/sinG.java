
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Mon Mar 13 20:30:53 CST 2017
//----------------------------------------------------

package Graphik.AnalizadorG1;

import java_cup.runtime.*;
import java.util.LinkedList;
import java_cup.runtime.Symbol;
import arbol.*;

/** CUP v0.10k generated parser.
  * @version Mon Mar 13 20:30:53 CST 2017
  */
public class sinG extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public sinG() {super();}

  /** Constructor which sets the default scanner. */
  public sinG(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\150\000\002\002\004\000\002\003\005\000\002\004" +
    "\004\000\002\004\003\000\002\005\005\000\002\006\004" +
    "\000\002\006\003\000\002\007\005\000\002\011\004\000" +
    "\002\011\003\000\002\010\011\000\002\010\013\000\002" +
    "\012\004\000\002\012\003\000\002\027\003\000\002\027" +
    "\003\000\002\020\011\000\002\020\007\000\002\017\005" +
    "\000\002\017\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\021\013\000\002\021" +
    "\011\000\002\025\004\000\002\025\003\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\022\006\000" +
    "\002\022\004\000\002\022\003\000\002\023\004\000\002" +
    "\023\003\000\002\024\003\000\002\024\003\000\002\024" +
    "\003\000\002\024\003\000\002\024\003\000\002\024\003" +
    "\000\002\024\003\000\002\024\003\000\002\024\003\000" +
    "\002\024\003\000\002\047\013\000\002\046\011\000\002" +
    "\043\015\000\002\045\004\000\002\045\004\000\002\044" +
    "\006\000\002\044\005\000\002\040\011\000\002\041\004" +
    "\000\002\041\003\000\002\042\006\000\002\042\005\000" +
    "\002\036\012\000\002\037\006\000\002\037\003\000\002" +
    "\035\006\000\002\034\010\000\002\032\010\000\002\033" +
    "\005\000\002\033\003\000\002\033\003\000\002\031\010" +
    "\000\002\031\006\000\002\030\005\000\002\051\005\000" +
    "\002\051\003\000\002\061\005\000\002\061\003\000\002" +
    "\060\005\000\002\060\003\000\002\057\004\000\002\057" +
    "\003\000\002\056\005\000\002\056\005\000\002\056\005" +
    "\000\002\056\005\000\002\056\005\000\002\056\005\000" +
    "\002\056\003\000\002\055\005\000\002\055\005\000\002" +
    "\055\003\000\002\054\005\000\002\054\005\000\002\054" +
    "\005\000\002\054\003\000\002\053\005\000\002\053\003" +
    "\000\002\052\003\000\002\052\003\000\002\052\003\000" +
    "\002\052\003\000\002\052\003\000\002\052\003\000\002" +
    "\052\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\356\000\004\016\004\001\002\000\004\115\357\001" +
    "\002\000\006\016\004\026\012\001\002\000\006\016\ufffe" +
    "\026\ufffe\001\002\000\004\002\010\001\002\000\004\002" +
    "\001\001\002\000\006\017\017\026\012\001\002\000\004" +
    "\115\015\001\002\000\006\016\uffff\026\uffff\001\002\000" +
    "\006\017\ufffb\026\ufffb\001\002\000\004\065\016\001\002" +
    "\000\006\017\ufffa\026\ufffa\001\002\000\004\115\024\001" +
    "\002\000\006\002\ufff8\017\ufff8\001\002\000\006\017\ufffc" +
    "\026\ufffc\001\002\000\006\002\000\017\017\001\002\000" +
    "\006\002\ufff9\017\ufff9\001\002\000\006\023\025\063\026" +
    "\001\002\000\004\115\351\001\002\000\002\001\002\000" +
    "\004\056\030\001\002\000\022\004\037\005\031\006\045" +
    "\007\032\010\036\011\043\012\044\115\033\001\002\000" +
    "\004\115\uffed\001\002\000\004\115\uffeb\001\002\000\004" +
    "\115\uffe7\001\002\000\024\004\ufff3\005\ufff3\006\ufff3\007" +
    "\ufff3\010\ufff3\011\ufff3\012\ufff3\057\ufff3\115\ufff3\001\002" +
    "\000\024\004\ufff2\005\ufff2\006\ufff2\007\ufff2\010\ufff2\011" +
    "\ufff2\012\ufff2\057\ufff2\115\ufff2\001\002\000\004\115\uffea" +
    "\001\002\000\020\005\031\006\045\007\032\010\036\011" +
    "\043\012\211\115\033\001\002\000\004\115\315\001\002" +
    "\000\024\004\037\005\031\006\045\007\032\010\036\011" +
    "\043\012\044\057\313\115\033\001\002\000\024\004\ufff4" +
    "\005\ufff4\006\ufff4\007\ufff4\010\ufff4\011\ufff4\012\ufff4\057" +
    "\ufff4\115\ufff4\001\002\000\004\115\uffe9\001\002\000\006" +
    "\025\046\115\uffe8\001\002\000\004\115\uffec\001\002\000" +
    "\004\054\047\001\002\000\004\055\050\001\002\000\004" +
    "\056\051\001\002\000\026\004\063\020\071\022\070\024" +
    "\064\027\054\031\075\034\073\035\077\036\065\115\067" +
    "\001\002\000\034\004\uffd2\020\uffd2\022\uffd2\024\uffd2\027" +
    "\uffd2\031\uffd2\032\uffd2\033\uffd2\034\uffd2\035\uffd2\036\uffd2" +
    "\057\uffd2\115\uffd2\001\002\000\034\004\uffdb\020\uffdb\022" +
    "\uffdb\024\uffdb\027\uffdb\031\uffdb\032\uffdb\033\uffdb\034\uffdb" +
    "\035\uffdb\036\uffdb\057\uffdb\115\uffdb\001\002\000\004\054" +
    "\277\001\002\000\030\004\063\020\071\022\070\024\064" +
    "\027\054\031\075\034\073\035\077\036\065\057\276\115" +
    "\067\001\002\000\034\004\uffd7\020\uffd7\022\uffd7\024\uffd7" +
    "\027\uffd7\031\uffd7\032\uffd7\033\uffd7\034\uffd7\035\uffd7\036" +
    "\uffd7\057\uffd7\115\uffd7\001\002\000\034\004\uffda\020\uffda" +
    "\022\uffda\024\uffda\027\uffda\031\uffda\032\uffda\033\uffda\034" +
    "\uffda\035\uffda\036\uffda\057\uffda\115\uffda\001\002\000\034" +
    "\004\uffd4\020\uffd4\022\uffd4\024\uffd4\027\uffd4\031\uffd4\032" +
    "\uffd4\033\uffd4\034\uffd4\035\uffd4\036\uffd4\057\uffd4\115\uffd4" +
    "\001\002\000\034\004\uffd9\020\uffd9\022\uffd9\024\uffd9\027" +
    "\uffd9\031\uffd9\032\uffd9\033\uffd9\034\uffd9\035\uffd9\036\uffd9" +
    "\057\uffd9\115\uffd9\001\002\000\034\004\uffd1\020\uffd1\022" +
    "\uffd1\024\uffd1\027\uffd1\031\uffd1\032\uffd1\033\uffd1\034\uffd1" +
    "\035\uffd1\036\uffd1\057\uffd1\115\uffd1\001\002\000\020\005" +
    "\031\006\045\007\032\010\036\011\043\012\211\115\033" +
    "\001\002\000\022\050\110\051\106\066\121\113\114\114" +
    "\112\115\105\116\115\117\111\001\002\000\004\056\253" +
    "\001\002\000\034\004\uffd6\020\uffd6\022\uffd6\024\uffd6\027" +
    "\uffd6\031\uffd6\032\uffd6\033\uffd6\034\uffd6\035\uffd6\036\uffd6" +
    "\057\uffd6\115\uffd6\001\002\000\004\064\250\001\002\000" +
    "\004\115\243\001\002\000\004\115\232\001\002\000\034" +
    "\004\uffd5\020\uffd5\022\uffd5\024\uffd5\027\uffd5\031\uffd5\032" +
    "\uffd5\033\uffd5\034\uffd5\035\uffd5\036\uffd5\057\uffd5\115\uffd5" +
    "\001\002\000\004\054\205\001\002\000\034\004\uffd8\020" +
    "\uffd8\022\uffd8\024\uffd8\027\uffd8\031\uffd8\032\uffd8\033\uffd8" +
    "\034\uffd8\035\uffd8\036\uffd8\057\uffd8\115\uffd8\001\002\000" +
    "\004\054\166\001\002\000\034\004\uffd3\020\uffd3\022\uffd3" +
    "\024\uffd3\027\uffd3\031\uffd3\032\uffd3\033\uffd3\034\uffd3\035" +
    "\uffd3\036\uffd3\057\uffd3\115\uffd3\001\002\000\004\054\100" +
    "\001\002\000\022\050\110\051\106\066\121\113\114\114" +
    "\112\115\105\116\115\117\111\001\002\000\052\054\uffa1" +
    "\055\uffa1\062\uffa1\063\uffa1\065\uffa1\067\uffa1\070\uffa1\071" +
    "\uffa1\072\uffa1\073\uffa1\074\uffa1\075\uffa1\076\uffa1\077\uffa1" +
    "\100\uffa1\101\uffa1\102\uffa1\103\uffa1\104\uffa1\105\uffa1\001" +
    "\002\000\022\054\uffb5\055\uffb5\062\uffb5\063\uffb5\065\uffb5" +
    "\067\155\070\uffb5\071\uffb5\001\002\000\006\055\157\070" +
    "\160\001\002\000\020\054\uffb7\055\uffb7\062\uffb7\063\uffb7" +
    "\065\uffb7\070\uffb7\071\153\001\002\000\052\054\uff9c\055" +
    "\uff9c\062\uff9c\063\uff9c\065\uff9c\067\uff9c\070\uff9c\071\uff9c" +
    "\072\uff9c\073\uff9c\074\uff9c\075\uff9c\076\uff9c\077\uff9c\100" +
    "\uff9c\101\uff9c\102\uff9c\103\uff9c\104\uff9c\105\uff9c\001\002" +
    "\000\052\054\uff9a\055\uff9a\062\uff9a\063\uff9a\065\uff9a\067" +
    "\uff9a\070\uff9a\071\uff9a\072\uff9a\073\uff9a\074\uff9a\075\uff9a" +
    "\076\uff9a\077\uff9a\100\uff9a\101\uff9a\102\uff9a\103\uff9a\104" +
    "\uff9a\105\uff9a\001\002\000\052\054\uffa3\055\uffa3\062\uffa3" +
    "\063\uffa3\065\uffa3\067\uffa3\070\uffa3\071\uffa3\072\uffa3\073" +
    "\uffa3\074\uffa3\075\uffa3\076\uffa3\077\uffa3\100\uffa3\101\uffa3" +
    "\102\uffa3\103\uffa3\104\141\105\uffa3\001\002\000\052\054" +
    "\uff9b\055\uff9b\062\uff9b\063\uff9b\065\uff9b\067\uff9b\070\uff9b" +
    "\071\uff9b\072\uff9b\073\uff9b\074\uff9b\075\uff9b\076\uff9b\077" +
    "\uff9b\100\uff9b\101\uff9b\102\uff9b\103\uff9b\104\uff9b\105\uff9b" +
    "\001\002\000\052\054\uff9d\055\uff9d\062\uff9d\063\uff9d\065" +
    "\uff9d\067\uff9d\070\uff9d\071\uff9d\072\uff9d\073\uff9d\074\uff9d" +
    "\075\uff9d\076\uff9d\077\uff9d\100\uff9d\101\uff9d\102\uff9d\103" +
    "\uff9d\104\uff9d\105\uff9d\001\002\000\052\054\uffa0\055\uffa0" +
    "\062\uffa0\063\uffa0\065\uffa0\067\uffa0\070\uffa0\071\uffa0\072" +
    "\uffa0\073\uffa0\074\uffa0\075\uffa0\076\uffa0\077\uffa0\100\uffa0" +
    "\101\uffa0\102\uffa0\103\uffa0\104\uffa0\105\uffa0\001\002\000" +
    "\050\054\uffa7\055\uffa7\062\uffa7\063\uffa7\065\uffa7\067\uffa7" +
    "\070\uffa7\071\uffa7\072\uffa7\073\uffa7\074\uffa7\075\uffa7\076" +
    "\uffa7\077\uffa7\100\uffa7\101\uffa7\102\135\103\137\105\136" +
    "\001\002\000\052\054\uff9f\055\uff9f\062\uff9f\063\uff9f\065" +
    "\uff9f\067\uff9f\070\uff9f\071\uff9f\072\uff9f\073\uff9f\074\uff9f" +
    "\075\uff9f\076\uff9f\077\uff9f\100\uff9f\101\uff9f\102\uff9f\103" +
    "\uff9f\104\uff9f\105\uff9f\001\002\000\052\054\uff9e\055\uff9e" +
    "\062\uff9e\063\uff9e\065\uff9e\067\uff9e\070\uff9e\071\uff9e\072" +
    "\uff9e\073\uff9e\074\uff9e\075\uff9e\076\uff9e\077\uff9e\100\uff9e" +
    "\101\uff9e\102\uff9e\103\uff9e\104\uff9e\105\uff9e\001\002\000" +
    "\042\054\uffaa\055\uffaa\062\uffaa\063\uffaa\065\uffaa\067\uffaa" +
    "\070\uffaa\071\uffaa\072\uffaa\073\uffaa\074\uffaa\075\uffaa\076" +
    "\uffaa\077\uffaa\100\132\101\133\001\002\000\036\054\uffb1" +
    "\055\uffb1\062\uffb1\063\uffb1\065\uffb1\067\uffb1\070\uffb1\071" +
    "\uffb1\072\123\073\130\074\124\075\125\076\127\077\126" +
    "\001\002\000\022\054\uffb3\055\uffb3\062\uffb3\063\uffb3\065" +
    "\uffb3\067\uffb3\070\uffb3\071\uffb3\001\002\000\020\050\110" +
    "\051\106\113\114\114\112\115\105\116\115\117\111\001" +
    "\002\000\036\054\uffb2\055\uffb2\062\uffb2\063\uffb2\065\uffb2" +
    "\067\uffb2\070\uffb2\071\uffb2\072\123\073\130\074\124\075" +
    "\125\076\127\077\126\001\002\000\020\050\110\051\106" +
    "\113\114\114\112\115\105\116\115\117\111\001\002\000" +
    "\020\050\110\051\106\113\114\114\112\115\105\116\115" +
    "\117\111\001\002\000\020\050\110\051\106\113\114\114" +
    "\112\115\105\116\115\117\111\001\002\000\020\050\110" +
    "\051\106\113\114\114\112\115\105\116\115\117\111\001" +
    "\002\000\020\050\110\051\106\113\114\114\112\115\105" +
    "\116\115\117\111\001\002\000\020\050\110\051\106\113" +
    "\114\114\112\115\105\116\115\117\111\001\002\000\042" +
    "\054\uffaf\055\uffaf\062\uffaf\063\uffaf\065\uffaf\067\uffaf\070" +
    "\uffaf\071\uffaf\072\uffaf\073\uffaf\074\uffaf\075\uffaf\076\uffaf" +
    "\077\uffaf\100\132\101\133\001\002\000\020\050\110\051" +
    "\106\113\114\114\112\115\105\116\115\117\111\001\002" +
    "\000\020\050\110\051\106\113\114\114\112\115\105\116" +
    "\115\117\111\001\002\000\050\054\uffa8\055\uffa8\062\uffa8" +
    "\063\uffa8\065\uffa8\067\uffa8\070\uffa8\071\uffa8\072\uffa8\073" +
    "\uffa8\074\uffa8\075\uffa8\076\uffa8\077\uffa8\100\uffa8\101\uffa8" +
    "\102\135\103\137\105\136\001\002\000\020\050\110\051" +
    "\106\113\114\114\112\115\105\116\115\117\111\001\002" +
    "\000\020\050\110\051\106\113\114\114\112\115\105\116" +
    "\115\117\111\001\002\000\020\050\110\051\106\113\114" +
    "\114\112\115\105\116\115\117\111\001\002\000\052\054" +
    "\uffa5\055\uffa5\062\uffa5\063\uffa5\065\uffa5\067\uffa5\070\uffa5" +
    "\071\uffa5\072\uffa5\073\uffa5\074\uffa5\075\uffa5\076\uffa5\077" +
    "\uffa5\100\uffa5\101\uffa5\102\uffa5\103\uffa5\104\141\105\uffa5" +
    "\001\002\000\020\050\110\051\106\113\114\114\112\115" +
    "\105\116\115\117\111\001\002\000\052\054\uffa2\055\uffa2" +
    "\062\uffa2\063\uffa2\065\uffa2\067\uffa2\070\uffa2\071\uffa2\072" +
    "\uffa2\073\uffa2\074\uffa2\075\uffa2\076\uffa2\077\uffa2\100\uffa2" +
    "\101\uffa2\102\uffa2\103\uffa2\104\uffa2\105\uffa2\001\002\000" +
    "\052\054\uffa4\055\uffa4\062\uffa4\063\uffa4\065\uffa4\067\uffa4" +
    "\070\uffa4\071\uffa4\072\uffa4\073\uffa4\074\uffa4\075\uffa4\076" +
    "\uffa4\077\uffa4\100\uffa4\101\uffa4\102\uffa4\103\uffa4\104\141" +
    "\105\uffa4\001\002\000\052\054\uffa6\055\uffa6\062\uffa6\063" +
    "\uffa6\065\uffa6\067\uffa6\070\uffa6\071\uffa6\072\uffa6\073\uffa6" +
    "\074\uffa6\075\uffa6\076\uffa6\077\uffa6\100\uffa6\101\uffa6\102" +
    "\uffa6\103\uffa6\104\141\105\uffa6\001\002\000\050\054\uffa9" +
    "\055\uffa9\062\uffa9\063\uffa9\065\uffa9\067\uffa9\070\uffa9\071" +
    "\uffa9\072\uffa9\073\uffa9\074\uffa9\075\uffa9\076\uffa9\077\uffa9" +
    "\100\uffa9\101\uffa9\102\135\103\137\105\136\001\002\000" +
    "\042\054\uffac\055\uffac\062\uffac\063\uffac\065\uffac\067\uffac" +
    "\070\uffac\071\uffac\072\uffac\073\uffac\074\uffac\075\uffac\076" +
    "\uffac\077\uffac\100\132\101\133\001\002\000\042\054\uffab" +
    "\055\uffab\062\uffab\063\uffab\065\uffab\067\uffab\070\uffab\071" +
    "\uffab\072\uffab\073\uffab\074\uffab\075\uffab\076\uffab\077\uffab" +
    "\100\132\101\133\001\002\000\042\054\uffad\055\uffad\062" +
    "\uffad\063\uffad\065\uffad\067\uffad\070\uffad\071\uffad\072\uffad" +
    "\073\uffad\074\uffad\075\uffad\076\uffad\077\uffad\100\132\101" +
    "\133\001\002\000\042\054\uffae\055\uffae\062\uffae\063\uffae" +
    "\065\uffae\067\uffae\070\uffae\071\uffae\072\uffae\073\uffae\074" +
    "\uffae\075\uffae\076\uffae\077\uffae\100\132\101\133\001\002" +
    "\000\042\054\uffb0\055\uffb0\062\uffb0\063\uffb0\065\uffb0\067" +
    "\uffb0\070\uffb0\071\uffb0\072\uffb0\073\uffb0\074\uffb0\075\uffb0" +
    "\076\uffb0\077\uffb0\100\132\101\133\001\002\000\022\050" +
    "\110\051\106\066\121\113\114\114\112\115\105\116\115" +
    "\117\111\001\002\000\022\054\uffb6\055\uffb6\062\uffb6\063" +
    "\uffb6\065\uffb6\067\155\070\uffb6\071\uffb6\001\002\000\022" +
    "\050\110\051\106\066\121\113\114\114\112\115\105\116" +
    "\115\117\111\001\002\000\022\054\uffb4\055\uffb4\062\uffb4" +
    "\063\uffb4\065\uffb4\067\uffb4\070\uffb4\071\uffb4\001\002\000" +
    "\004\056\162\001\002\000\022\050\110\051\106\066\121" +
    "\113\114\114\112\115\105\116\115\117\111\001\002\000" +
    "\020\054\uffb8\055\uffb8\062\uffb8\063\uffb8\065\uffb8\070\uffb8" +
    "\071\153\001\002\000\026\004\063\020\071\022\070\024" +
    "\064\027\054\031\075\034\073\035\077\036\065\115\067" +
    "\001\002\000\030\004\063\020\071\022\070\024\064\027" +
    "\054\031\075\034\073\035\077\036\065\057\165\115\067" +
    "\001\002\000\034\004\uffdc\020\uffdc\022\uffdc\024\uffdc\027" +
    "\uffdc\031\uffdc\032\uffdc\033\uffdc\034\uffdc\035\uffdc\036\uffdc" +
    "\057\uffdc\115\uffdc\001\002\000\034\004\uffcf\020\uffcf\022" +
    "\uffcf\024\uffcf\027\uffcf\031\uffcf\032\uffcf\033\uffcf\034\uffcf" +
    "\035\uffcf\036\uffcf\057\uffcf\115\uffcf\001\002\000\022\050" +
    "\110\051\106\066\121\113\114\114\112\115\105\116\115" +
    "\117\111\001\002\000\006\055\170\070\160\001\002\000" +
    "\004\056\171\001\002\000\006\032\172\033\173\001\002" +
    "\000\022\050\110\051\106\066\121\113\114\114\112\115" +
    "\105\116\115\117\111\001\002\000\004\063\200\001\002" +
    "\000\010\032\172\033\173\057\176\001\002\000\010\032" +
    "\uffc7\033\uffc7\057\uffc7\001\002\000\034\004\uffc9\020\uffc9" +
    "\022\uffc9\024\uffc9\027\uffc9\031\uffc9\032\uffc9\033\uffc9\034" +
    "\uffc9\035\uffc9\036\uffc9\057\uffc9\115\uffc9\001\002\000\010" +
    "\032\uffc8\033\uffc8\057\uffc8\001\002\000\026\004\063\020" +
    "\071\022\070\024\064\027\054\031\075\034\073\035\077" +
    "\036\065\115\067\001\002\000\034\004\063\020\071\022" +
    "\070\024\064\027\054\031\075\032\uffc5\033\uffc5\034\073" +
    "\035\077\036\065\057\uffc5\115\067\001\002\000\006\063" +
    "\203\070\160\001\002\000\026\004\063\020\071\022\070" +
    "\024\064\027\054\031\075\034\073\035\077\036\065\115" +
    "\067\001\002\000\034\004\063\020\071\022\070\024\064" +
    "\027\054\031\075\032\uffc6\033\uffc6\034\073\035\077\036" +
    "\065\057\uffc6\115\067\001\002\000\020\005\031\006\045" +
    "\007\032\010\036\011\043\012\211\115\206\001\002\000" +
    "\006\064\230\115\uffe7\001\002\000\004\115\225\001\002" +
    "\000\004\063\212\001\002\000\004\115\uffe8\001\002\000" +
    "\022\050\110\051\106\066\121\113\114\114\112\115\105" +
    "\116\115\117\111\001\002\000\006\063\214\070\160\001" +
    "\002\000\004\115\216\001\002\000\004\055\221\001\002" +
    "\000\006\106\217\107\220\001\002\000\004\055\uffcd\001" +
    "\002\000\004\055\uffcc\001\002\000\004\056\222\001\002" +
    "\000\026\004\063\020\071\022\070\024\064\027\054\031" +
    "\075\034\073\035\077\036\065\115\067\001\002\000\030" +
    "\004\063\020\071\022\070\024\064\027\054\031\075\034" +
    "\073\035\077\036\065\057\224\115\067\001\002\000\034" +
    "\004\uffce\020\uffce\022\uffce\024\uffce\027\uffce\031\uffce\032" +
    "\uffce\033\uffce\034\uffce\035\uffce\036\uffce\057\uffce\115\uffce" +
    "\001\002\000\004\064\226\001\002\000\022\050\110\051" +
    "\106\066\121\113\114\114\112\115\105\116\115\117\111" +
    "\001\002\000\006\063\uffcb\070\160\001\002\000\022\050" +
    "\110\051\106\066\121\113\114\114\112\115\105\116\115" +
    "\117\111\001\002\000\006\063\uffca\070\160\001\002\000" +
    "\022\050\110\051\106\066\121\113\114\114\112\115\105" +
    "\116\115\117\111\001\002\000\006\054\237\062\236\001" +
    "\002\000\012\054\uffbd\055\uffbd\062\uffbd\070\160\001\002" +
    "\000\010\054\uffbc\055\uffbc\062\uffbc\001\002\000\022\050" +
    "\110\051\106\066\121\113\114\114\112\115\105\116\115" +
    "\117\111\001\002\000\004\055\240\001\002\000\004\065" +
    "\241\001\002\000\034\004\uffbf\020\uffbf\022\uffbf\024\uffbf" +
    "\027\uffbf\031\uffbf\032\uffbf\033\uffbf\034\uffbf\035\uffbf\036" +
    "\uffbf\057\uffbf\115\uffbf\001\002\000\012\054\uffbe\055\uffbe" +
    "\062\uffbe\070\160\001\002\000\004\054\244\001\002\000" +
    "\022\050\110\051\106\066\121\113\114\114\112\115\105" +
    "\116\115\117\111\001\002\000\006\055\246\062\236\001" +
    "\002\000\004\065\247\001\002\000\034\004\uffc0\020\uffc0" +
    "\022\uffc0\024\uffc0\027\uffc0\031\uffc0\032\uffc0\033\uffc0\034" +
    "\uffc0\035\uffc0\036\uffc0\057\uffc0\115\uffc0\001\002\000\022" +
    "\050\110\051\106\066\121\113\114\114\112\115\105\116" +
    "\115\117\111\001\002\000\006\065\252\070\160\001\002" +
    "\000\034\004\uffc1\020\uffc1\022\uffc1\024\uffc1\027\uffc1\031" +
    "\uffc1\032\uffc1\033\uffc1\034\uffc1\035\uffc1\036\uffc1\057\uffc1" +
    "\115\uffc1\001\002\000\026\004\063\020\071\022\070\024" +
    "\064\027\054\031\075\034\073\035\077\036\065\115\067" +
    "\001\002\000\030\004\063\020\071\022\070\024\064\027" +
    "\054\031\075\034\073\035\077\036\065\057\255\115\067" +
    "\001\002\000\004\035\256\001\002\000\004\054\257\001" +
    "\002\000\022\050\110\051\106\066\121\113\114\114\112" +
    "\115\105\116\115\117\111\001\002\000\006\055\261\070" +
    "\160\001\002\000\004\065\262\001\002\000\034\004\uffd0" +
    "\020\uffd0\022\uffd0\024\uffd0\027\uffd0\031\uffd0\032\uffd0\033" +
    "\uffd0\034\uffd0\035\uffd0\036\uffd0\057\uffd0\115\uffd0\001\002" +
    "\000\006\065\264\070\160\001\002\000\034\004\uffb9\020" +
    "\uffb9\022\uffb9\024\uffb9\027\uffb9\031\uffb9\032\uffb9\033\uffb9" +
    "\034\uffb9\035\uffb9\036\uffb9\057\uffb9\115\uffb9\001\002\000" +
    "\004\115\267\001\002\000\010\062\271\064\272\065\270" +
    "\001\002\000\012\062\uffee\063\uffee\064\uffee\065\uffee\001" +
    "\002\000\034\004\uffba\020\uffba\022\uffba\024\uffba\027\uffba" +
    "\031\uffba\032\uffba\033\uffba\034\uffba\035\uffba\036\uffba\057" +
    "\uffba\115\uffba\001\002\000\004\115\275\001\002\000\022" +
    "\050\110\051\106\066\121\113\114\114\112\115\105\116" +
    "\115\117\111\001\002\000\006\065\274\070\160\001\002" +
    "\000\034\004\uffbb\020\uffbb\022\uffbb\024\uffbb\027\uffbb\031" +
    "\uffbb\032\uffbb\033\uffbb\034\uffbb\035\uffbb\036\uffbb\057\uffbb" +
    "\115\uffbb\001\002\000\012\062\uffef\063\uffef\064\uffef\065" +
    "\uffef\001\002\000\024\004\uffe5\005\uffe5\006\uffe5\007\uffe5" +
    "\010\uffe5\011\uffe5\012\uffe5\057\uffe5\115\uffe5\001\002\000" +
    "\022\050\110\051\106\066\121\113\114\114\112\115\105" +
    "\116\115\117\111\001\002\000\006\055\301\070\160\001" +
    "\002\000\004\056\302\001\002\000\026\004\063\020\071" +
    "\022\070\024\064\027\054\031\075\034\073\035\077\036" +
    "\065\115\067\001\002\000\030\004\063\020\071\022\070" +
    "\024\064\027\054\031\075\034\073\035\077\036\065\057" +
    "\304\115\067\001\002\000\004\030\305\001\002\000\004" +
    "\056\310\001\002\000\034\004\uffc4\020\uffc4\022\uffc4\024" +
    "\uffc4\027\uffc4\031\uffc4\032\uffc4\033\uffc4\034\uffc4\035\uffc4" +
    "\036\uffc4\057\uffc4\115\uffc4\001\002\000\034\004\uffc2\020" +
    "\uffc2\022\uffc2\024\uffc2\027\uffc2\031\uffc2\032\uffc2\033\uffc2" +
    "\034\uffc2\035\uffc2\036\uffc2\057\uffc2\115\uffc2\001\002\000" +
    "\026\004\063\020\071\022\070\024\064\027\054\031\075" +
    "\034\073\035\077\036\065\115\067\001\002\000\030\004" +
    "\063\020\071\022\070\024\064\027\054\031\075\034\073" +
    "\035\077\036\065\057\312\115\067\001\002\000\034\004" +
    "\uffc3\020\uffc3\022\uffc3\024\uffc3\027\uffc3\031\uffc3\032\uffc3" +
    "\033\uffc3\034\uffc3\035\uffc3\036\uffc3\057\uffc3\115\uffc3\001" +
    "\002\000\006\002\ufff7\017\ufff7\001\002\000\024\004\ufff5" +
    "\005\ufff5\006\ufff5\007\ufff5\010\ufff5\011\ufff5\012\ufff5\057" +
    "\ufff5\115\ufff5\001\002\000\004\054\316\001\002\000\020" +
    "\005\031\006\045\007\032\010\036\011\043\012\211\115" +
    "\033\001\002\000\006\055\uffdd\062\uffdd\001\002\000\004" +
    "\115\340\001\002\000\006\055\323\062\322\001\002\000" +
    "\020\005\031\006\045\007\032\010\036\011\043\012\211" +
    "\115\033\001\002\000\004\063\325\001\002\000\004\056" +
    "\333\001\002\000\010\013\332\014\330\015\331\001\002" +
    "\000\006\056\uffe3\065\uffe3\001\002\000\006\056\uffe4\065" +
    "\uffe4\001\002\000\006\056\uffe1\065\uffe1\001\002\000\006" +
    "\056\uffe0\065\uffe0\001\002\000\006\056\uffe2\065\uffe2\001" +
    "\002\000\026\004\063\020\071\022\070\024\064\027\054" +
    "\031\075\034\073\035\077\036\065\115\067\001\002\000" +
    "\030\004\063\020\071\022\070\024\064\027\054\031\075" +
    "\034\073\035\077\036\065\057\335\115\067\001\002\000" +
    "\024\004\uffe6\005\uffe6\006\uffe6\007\uffe6\010\uffe6\011\uffe6" +
    "\012\uffe6\057\uffe6\115\uffe6\001\002\000\004\115\337\001" +
    "\002\000\006\055\uffdf\062\uffdf\001\002\000\006\055\uffde" +
    "\062\uffde\001\002\000\004\115\267\001\002\000\010\062" +
    "\271\063\325\064\344\001\002\000\004\065\350\001\002" +
    "\000\022\050\110\051\106\066\121\113\114\114\112\115" +
    "\105\116\115\117\111\001\002\000\006\063\325\070\160" +
    "\001\002\000\004\065\347\001\002\000\024\004\ufff1\005" +
    "\ufff1\006\ufff1\007\ufff1\010\ufff1\011\ufff1\012\ufff1\057\ufff1" +
    "\115\ufff1\001\002\000\024\004\ufff0\005\ufff0\006\ufff0\007" +
    "\ufff0\010\ufff0\011\ufff0\012\ufff0\057\ufff0\115\ufff0\001\002" +
    "\000\004\063\352\001\002\000\002\001\002\000\004\056" +
    "\354\001\002\000\022\004\037\005\031\006\045\007\032" +
    "\010\036\011\043\012\044\115\033\001\002\000\024\004" +
    "\037\005\031\006\045\007\032\010\036\011\043\012\044" +
    "\057\356\115\033\001\002\000\006\002\ufff6\017\ufff6\001" +
    "\002\000\004\112\360\001\002\000\006\016\ufffd\026\ufffd" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\356\000\010\003\006\004\004\005\005\001\001\000" +
    "\002\001\001\000\010\005\012\006\010\007\013\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\007\020\010\017\011\021\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\010\022\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\026\026\001\001" +
    "\000\002\001\001\000\014\012\040\014\037\020\033\021" +
    "\034\027\041\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\340\001\001\000\002\001\001" +
    "\000\012\014\037\020\033\021\034\027\313\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\023\054\024\052\030\056\031\060\032\073" +
    "\034\055\035\065\036\071\040\057\043\075\046\051\047" +
    "\061\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\024\163\030\056\031\060\032\073\034" +
    "\055\035\065\036\071\040\057\043\075\046\051\047\061" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\014\264" +
    "\001\001\000\024\051\262\052\100\053\106\054\112\055" +
    "\115\056\116\057\117\060\101\061\103\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\051\102\052\100\053\106\054\112" +
    "\055\115\056\116\057\117\060\101\061\103\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\052\100\053\106\054\112\055\115\056\121\001\001\000" +
    "\002\001\001\000\012\052\100\053\106\054\112\055\151" +
    "\001\001\000\012\052\100\053\106\054\112\055\150\001" +
    "\001\000\012\052\100\053\106\054\112\055\147\001\001" +
    "\000\012\052\100\053\106\054\112\055\146\001\001\000" +
    "\012\052\100\053\106\054\112\055\145\001\001\000\012" +
    "\052\100\053\106\054\112\055\130\001\001\000\002\001" +
    "\001\000\010\052\100\053\106\054\144\001\001\000\010" +
    "\052\100\053\106\054\133\001\001\000\002\001\001\000" +
    "\006\052\100\053\143\001\001\000\006\052\100\053\142" +
    "\001\001\000\006\052\100\053\137\001\001\000\002\001" +
    "\001\000\004\052\141\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\052\100\053\106\054\112\055" +
    "\115\056\116\057\117\060\153\001\001\000\002\001\001" +
    "\000\016\052\100\053\106\054\112\055\115\056\116\057" +
    "\155\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\052\100\053\106\054\112\055\115\056\116\057\117\060" +
    "\101\061\160\001\001\000\002\001\001\000\032\023\162" +
    "\024\052\030\056\031\060\032\073\034\055\035\065\036" +
    "\071\040\057\043\075\046\051\047\061\001\001\000\030" +
    "\024\163\030\056\031\060\032\073\034\055\035\065\036" +
    "\071\040\057\043\075\046\051\047\061\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\051\166\052\100\053" +
    "\106\054\112\055\115\056\116\057\117\060\101\061\103" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\041" +
    "\173\042\174\001\001\000\024\051\201\052\100\053\106" +
    "\054\112\055\115\056\116\057\117\060\101\061\103\001" +
    "\001\000\002\001\001\000\004\042\176\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\023" +
    "\200\024\052\030\056\031\060\032\073\034\055\035\065" +
    "\036\071\040\057\043\075\046\051\047\061\001\001\000" +
    "\030\024\163\030\056\031\060\032\073\034\055\035\065" +
    "\036\071\040\057\043\075\046\051\047\061\001\001\000" +
    "\002\001\001\000\032\023\203\024\052\030\056\031\060" +
    "\032\073\034\055\035\065\036\071\040\057\043\075\046" +
    "\051\047\061\001\001\000\030\024\163\030\056\031\060" +
    "\032\073\034\055\035\065\036\071\040\057\043\075\046" +
    "\051\047\061\001\001\000\006\014\206\044\207\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\051\212\052\100\053\106\054\112" +
    "\055\115\056\116\057\117\060\101\061\103\001\001\000" +
    "\002\001\001\000\004\045\214\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\023\222\024\052\030\056\031\060" +
    "\032\073\034\055\035\065\036\071\040\057\043\075\046" +
    "\051\047\061\001\001\000\030\024\163\030\056\031\060" +
    "\032\073\034\055\035\065\036\071\040\057\043\075\046" +
    "\051\047\061\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\051\226\052\100\053\106\054\112\055\115\056" +
    "\116\057\117\060\101\061\103\001\001\000\002\001\001" +
    "\000\024\051\230\052\100\053\106\054\112\055\115\056" +
    "\116\057\117\060\101\061\103\001\001\000\002\001\001" +
    "\000\030\033\232\050\234\051\233\052\100\053\106\054" +
    "\112\055\115\056\116\057\117\060\101\061\103\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\051\241\052\100\053\106\054\112\055\115\056\116" +
    "\057\117\060\101\061\103\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\033\244\050\234\051\233\052\100\053" +
    "\106\054\112\055\115\056\116\057\117\060\101\061\103" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\051\250\052\100\053\106\054\112\055\115" +
    "\056\116\057\117\060\101\061\103\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\023\253\024\052\030\056" +
    "\031\060\032\073\034\055\035\065\036\071\040\057\043" +
    "\075\046\051\047\061\001\001\000\030\024\163\030\056" +
    "\031\060\032\073\034\055\035\065\036\071\040\057\043" +
    "\075\046\051\047\061\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\051\257\052\100\053\106\054\112\055" +
    "\115\056\116\057\117\060\101\061\103\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\017\265\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\051\272\052\100\053\106\054\112\055\115" +
    "\056\116\057\117\060\101\061\103\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\051\277\052\100\053\106\054\112\055\115\056" +
    "\116\057\117\060\101\061\103\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\023\302\024\052\030\056\031" +
    "\060\032\073\034\055\035\065\036\071\040\057\043\075" +
    "\046\051\047\061\001\001\000\030\024\163\030\056\031" +
    "\060\032\073\034\055\035\065\036\071\040\057\043\075" +
    "\046\051\047\061\001\001\000\006\037\305\050\306\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\023\310\024\052\030\056\031\060\032\073\034" +
    "\055\035\065\036\071\040\057\043\075\046\051\047\061" +
    "\001\001\000\030\024\163\030\056\031\060\032\073\034" +
    "\055\035\065\036\071\040\057\043\075\046\051\047\061" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\014\317\022\320\050\316" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\014\335\001\001\000\006\025\323\050\325" +
    "\001\001\000\002\001\001\000\004\015\326\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\023\333\024\052\030" +
    "\056\031\060\032\073\034\055\035\065\036\071\040\057" +
    "\043\075\046\051\047\061\001\001\000\030\024\163\030" +
    "\056\031\060\032\073\034\055\035\065\036\071\040\057" +
    "\043\075\046\051\047\061\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\017\341\001\001\000\006\025\342\050\325\001\001\000" +
    "\002\001\001\000\024\051\344\052\100\053\106\054\112" +
    "\055\115\056\116\057\117\060\101\061\103\001\001\000" +
    "\006\025\345\050\325\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\026" +
    "\352\001\001\000\002\001\001\000\014\012\354\014\037" +
    "\020\033\021\034\027\041\001\001\000\012\014\037\020" +
    "\033\021\034\027\313\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$sinG$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$sinG$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$sinG$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



public NodoArbol codigoG;
public NodoArbol gramaticaG;
public NodoArbol declaracionG;
public NodoArbol raizG;
/**Metodo al que se llama automáticamente ante algún error sintactico.*/
public void syntax_error(Symbol s){
System.out.println("No se pudo recuperar del error " + (s.right+1)+ "Columna "+s.left+". Identificador " + s.value + " no reconocido.");
// pantalla.errorLexLienzo(String.valueOf(s.value),String.valueOf(s.left),String.valueOf(s.right+1),"Sintactico"); 

}
/**Metodo al que se llama en el momento en que ya no es posible una recuperación de errores.*/
public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
System.out.println("No se pudo recuperar del error " + (s.right+1)+ "Columna "+s.left+". Identificador " + s.value + " no reconocido.");
// pantalla.errorLexLienzo(String.valueOf(s.value),String.valueOf(s.left),String.valueOf(s.right+1),"Sintactico"); 
}
/*Metodo que uso para verificar si el color es repetido*/


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$sinG$actions {





  private final sinG parser;

  /** Constructor */
  CUP$sinG$actions(sinG parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$sinG$do_action(
    int                        CUP$sinG$act_num,
    java_cup.runtime.lr_parser CUP$sinG$parser,
    java.util.Stack            CUP$sinG$stack,
    int                        CUP$sinG$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$sinG$result;

      /* select the action based on the action number */
      switch (CUP$sinG$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // VALOR ::= mentira 
            {
              Object RESULT = null;

              CUP$sinG$result = new java_cup.runtime.Symbol(40/*VALOR*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // VALOR ::= verdad 
            {
              Object RESULT = null;

              CUP$sinG$result = new java_cup.runtime.Symbol(40/*VALOR*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // VALOR ::= id 
            {
              Object RESULT = null;

              CUP$sinG$result = new java_cup.runtime.Symbol(40/*VALOR*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // VALOR ::= cadena 
            {
              Object RESULT = null;

              CUP$sinG$result = new java_cup.runtime.Symbol(40/*VALOR*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // VALOR ::= caracter 
            {
              Object RESULT = null;

              CUP$sinG$result = new java_cup.runtime.Symbol(40/*VALOR*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // VALOR ::= num 
            {
              Object RESULT = null;

              CUP$sinG$result = new java_cup.runtime.Symbol(40/*VALOR*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // VALOR ::= decimal 
            {
              Object RESULT = null;

              CUP$sinG$result = new java_cup.runtime.Symbol(40/*VALOR*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // POT ::= VALOR 
            {
              Object RESULT = null;

              CUP$sinG$result = new java_cup.runtime.Symbol(41/*POT*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // POT ::= POT pot VALOR 
            {
              Object RESULT = null;

              CUP$sinG$result = new java_cup.runtime.Symbol(41/*POT*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-2)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // MULTIPLICACION ::= POT 
            {
              Object RESULT = null;

              CUP$sinG$result = new java_cup.runtime.Symbol(42/*MULTIPLICACION*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // MULTIPLICACION ::= MULTIPLICACION mod POT 
            {
              Object RESULT = null;

              CUP$sinG$result = new java_cup.runtime.Symbol(42/*MULTIPLICACION*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-2)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // MULTIPLICACION ::= MULTIPLICACION div POT 
            {
              Object RESULT = null;

              CUP$sinG$result = new java_cup.runtime.Symbol(42/*MULTIPLICACION*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-2)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // MULTIPLICACION ::= MULTIPLICACION por POT 
            {
              Object RESULT = null;

              CUP$sinG$result = new java_cup.runtime.Symbol(42/*MULTIPLICACION*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-2)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ARITMETICO ::= MULTIPLICACION 
            {
              Object RESULT = null;

              CUP$sinG$result = new java_cup.runtime.Symbol(43/*ARITMETICO*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ARITMETICO ::= ARITMETICO resta MULTIPLICACION 
            {
              Object RESULT = null;

              CUP$sinG$result = new java_cup.runtime.Symbol(43/*ARITMETICO*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-2)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ARITMETICO ::= ARITMETICO suma MULTIPLICACION 
            {
              Object RESULT = null;

              CUP$sinG$result = new java_cup.runtime.Symbol(43/*ARITMETICO*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-2)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // RELACIONAL ::= ARITMETICO 
            {
              Object RESULT = null;

              CUP$sinG$result = new java_cup.runtime.Symbol(44/*RELACIONAL*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // RELACIONAL ::= RELACIONAL menor ARITMETICO 
            {
              Object RESULT = null;

              CUP$sinG$result = new java_cup.runtime.Symbol(44/*RELACIONAL*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-2)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // RELACIONAL ::= RELACIONAL mayor ARITMETICO 
            {
              Object RESULT = null;

              CUP$sinG$result = new java_cup.runtime.Symbol(44/*RELACIONAL*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-2)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // RELACIONAL ::= RELACIONAL menorIgual ARITMETICO 
            {
              Object RESULT = null;

              CUP$sinG$result = new java_cup.runtime.Symbol(44/*RELACIONAL*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-2)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // RELACIONAL ::= RELACIONAL mayorIgual ARITMETICO 
            {
              Object RESULT = null;

              CUP$sinG$result = new java_cup.runtime.Symbol(44/*RELACIONAL*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-2)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // RELACIONAL ::= RELACIONAL distinto ARITMETICO 
            {
              Object RESULT = null;

              CUP$sinG$result = new java_cup.runtime.Symbol(44/*RELACIONAL*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-2)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // RELACIONAL ::= RELACIONAL comparacion ARITMETICO 
            {
              Object RESULT = null;

              CUP$sinG$result = new java_cup.runtime.Symbol(44/*RELACIONAL*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-2)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // NOT ::= RELACIONAL 
            {
              Object RESULT = null;

              CUP$sinG$result = new java_cup.runtime.Symbol(45/*NOT*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // NOT ::= notLogico RELACIONAL 
            {
              Object RESULT = null;

              CUP$sinG$result = new java_cup.runtime.Symbol(45/*NOT*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-1)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // AND ::= NOT 
            {
              Object RESULT = null;

              CUP$sinG$result = new java_cup.runtime.Symbol(46/*AND*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // AND ::= AND yLogico NOT 
            {
              Object RESULT = null;

              CUP$sinG$result = new java_cup.runtime.Symbol(46/*AND*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-2)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // XOR ::= AND 
            {
              Object RESULT = null;

              CUP$sinG$result = new java_cup.runtime.Symbol(47/*XOR*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // XOR ::= XOR xorLogico AND 
            {
              Object RESULT = null;

              CUP$sinG$result = new java_cup.runtime.Symbol(47/*XOR*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-2)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // OP ::= XOR 
            {
              Object RESULT = null;

              CUP$sinG$result = new java_cup.runtime.Symbol(39/*OP*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OP ::= OP oLogico XOR 
            {
              Object RESULT = null;

              CUP$sinG$result = new java_cup.runtime.Symbol(39/*OP*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-2)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // RETORNO ::= retornarL OP delimitador 
            {
              Object RESULT = null;

              CUP$sinG$result = new java_cup.runtime.Symbol(22/*RETORNO*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-2)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // VARIABLE ::= varL TDATO LIDS delimitador 
            {
              Object RESULT = null;

              CUP$sinG$result = new java_cup.runtime.Symbol(23/*VARIABLE*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-3)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // VARIABLE ::= varL TDATO LIDS asignacion OP delimitador 
            {
              Object RESULT = null;

              CUP$sinG$result = new java_cup.runtime.Symbol(23/*VARIABLE*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-5)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // PARAMETROSV ::= VACIO 
            {
              Object RESULT = null;

              CUP$sinG$result = new java_cup.runtime.Symbol(25/*PARAMETROSV*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // PARAMETROSV ::= OP 
            {
              Object RESULT = null;

              CUP$sinG$result = new java_cup.runtime.Symbol(25/*PARAMETROSV*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // PARAMETROSV ::= PARAMETROSV coma OP 
            {
              Object RESULT = null;

              CUP$sinG$result = new java_cup.runtime.Symbol(25/*PARAMETROSV*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-2)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // LLAMARFUNCION ::= llamarL id PARAMETROSV parA parC delimitador 
            {
              Object RESULT = null;

              CUP$sinG$result = new java_cup.runtime.Symbol(24/*LLAMARFUNCION*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-5)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // LLAMARHK ::= llamarhkL id parA PARAMETROSV parC delimitador 
            {
              Object RESULT = null;

              CUP$sinG$result = new java_cup.runtime.Symbol(26/*LLAMARHK*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-5)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ASIGNACION ::= id asignacion OP delimitador 
            {
              Object RESULT = null;

              CUP$sinG$result = new java_cup.runtime.Symbol(27/*ASIGNACION*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-3)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // SINO ::= VACIO 
            {
              Object RESULT = null;

              CUP$sinG$result = new java_cup.runtime.Symbol(29/*SINO*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // SINO ::= elseL llaveA CUERPOFUNCIONES llaveC 
            {
              Object RESULT = null;

              CUP$sinG$result = new java_cup.runtime.Symbol(29/*SINO*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-3)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // SI ::= ifL parA OP parC llaveA CUERPOFUNCIONES llaveC SINO 
            {
              Object RESULT = null;

              CUP$sinG$result = new java_cup.runtime.Symbol(28/*SI*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-7)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // CASO ::= defaultL dosPuntos CUERPOFUNCIONES 
            {
              Object RESULT = null;

              CUP$sinG$result = new java_cup.runtime.Symbol(32/*CASO*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-2)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // CASO ::= caseL OP dosPuntos CUERPOFUNCIONES 
            {
              Object RESULT = null;

              CUP$sinG$result = new java_cup.runtime.Symbol(32/*CASO*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-3)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // CASOS ::= CASO 
            {
              Object RESULT = null;

              CUP$sinG$result = new java_cup.runtime.Symbol(31/*CASOS*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // CASOS ::= CASOS CASO 
            {
              Object RESULT = null;

              CUP$sinG$result = new java_cup.runtime.Symbol(31/*CASOS*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-1)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // SWITCH ::= switchL parA OP parC llaveA CASOS llaveC 
            {
              Object RESULT = null;

              CUP$sinG$result = new java_cup.runtime.Symbol(30/*SWITCH*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-6)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // CONDICIONFOR ::= id asignacion OP 
            {
              Object RESULT = null;

              CUP$sinG$result = new java_cup.runtime.Symbol(34/*CONDICIONFOR*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-2)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // CONDICIONFOR ::= TDATO id asignacion OP 
            {
              Object RESULT = null;

              CUP$sinG$result = new java_cup.runtime.Symbol(34/*CONDICIONFOR*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-3)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // INCREMENTOFOR ::= id aumento 
            {
              Object RESULT = null;

              CUP$sinG$result = new java_cup.runtime.Symbol(35/*INCREMENTOFOR*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-1)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // INCREMENTOFOR ::= id disminucion 
            {
              Object RESULT = null;

              CUP$sinG$result = new java_cup.runtime.Symbol(35/*INCREMENTOFOR*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-1)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // FOR ::= forL parA CONDICIONFOR dosPuntos OP dosPuntos INCREMENTOFOR parC llaveA CUERPOFUNCIONES llaveC 
            {
              Object RESULT = null;

              CUP$sinG$result = new java_cup.runtime.Symbol(33/*FOR*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-10)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // WHILE ::= whileL parA OP parC llaveA CUERPOFUNCIONES llaveC 
            {
              Object RESULT = null;

              CUP$sinG$result = new java_cup.runtime.Symbol(36/*WHILE*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-6)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DOWHILE ::= doL llaveA CUERPOFUNCIONES llaveC whileL parA OP parC delimitador 
            {
              Object RESULT = null;

              CUP$sinG$result = new java_cup.runtime.Symbol(37/*DOWHILE*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-8)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // CUERPO ::= DOWHILE 
            {
              Object RESULT = null;

              CUP$sinG$result = new java_cup.runtime.Symbol(18/*CUERPO*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // CUERPO ::= WHILE 
            {
              Object RESULT = null;

              CUP$sinG$result = new java_cup.runtime.Symbol(18/*CUERPO*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // CUERPO ::= FOR 
            {
              Object RESULT = null;

              CUP$sinG$result = new java_cup.runtime.Symbol(18/*CUERPO*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // CUERPO ::= SWITCH 
            {
              Object RESULT = null;

              CUP$sinG$result = new java_cup.runtime.Symbol(18/*CUERPO*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // CUERPO ::= SI 
            {
              Object RESULT = null;

              CUP$sinG$result = new java_cup.runtime.Symbol(18/*CUERPO*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // CUERPO ::= ASIGNACION 
            {
              Object RESULT = null;

              CUP$sinG$result = new java_cup.runtime.Symbol(18/*CUERPO*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // CUERPO ::= LLAMARHK 
            {
              Object RESULT = null;

              CUP$sinG$result = new java_cup.runtime.Symbol(18/*CUERPO*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // CUERPO ::= LLAMARFUNCION 
            {
              Object RESULT = null;

              CUP$sinG$result = new java_cup.runtime.Symbol(18/*CUERPO*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // CUERPO ::= VARIABLE 
            {
              Object RESULT = null;

              CUP$sinG$result = new java_cup.runtime.Symbol(18/*CUERPO*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // CUERPO ::= RETORNO 
            {
              Object RESULT = null;

              CUP$sinG$result = new java_cup.runtime.Symbol(18/*CUERPO*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // CUERPOFUNCIONES ::= CUERPO 
            {
              Object RESULT = null;

              CUP$sinG$result = new java_cup.runtime.Symbol(17/*CUERPOFUNCIONES*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // CUERPOFUNCIONES ::= CUERPOFUNCIONES CUERPO 
            {
              Object RESULT = null;

              CUP$sinG$result = new java_cup.runtime.Symbol(17/*CUERPOFUNCIONES*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-1)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // LPARAMETROS ::= VACIO 
            {
              Object RESULT = null;

              CUP$sinG$result = new java_cup.runtime.Symbol(16/*LPARAMETROS*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // LPARAMETROS ::= TDATO id 
            {
              Object RESULT = null;

              CUP$sinG$result = new java_cup.runtime.Symbol(16/*LPARAMETROS*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-1)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // LPARAMETROS ::= LPARAMETROS coma TDATO id 
            {
              Object RESULT = null;

              CUP$sinG$result = new java_cup.runtime.Symbol(16/*LPARAMETROS*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-3)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // TVISIBLE ::= privadoL 
            {
              Object RESULT = null;

              CUP$sinG$result = new java_cup.runtime.Symbol(11/*TVISIBLE*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // TVISIBLE ::= protegidoL 
            {
              Object RESULT = null;

              CUP$sinG$result = new java_cup.runtime.Symbol(11/*TVISIBLE*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // TVISIBLE ::= publicoL 
            {
              Object RESULT = null;

              CUP$sinG$result = new java_cup.runtime.Symbol(11/*TVISIBLE*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // VISIBILIDAD ::= VACIO 
            {
              Object RESULT = null;

              CUP$sinG$result = new java_cup.runtime.Symbol(19/*VISIBILIDAD*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // VISIBILIDAD ::= dosPuntos TVISIBLE 
            {
              Object RESULT = null;

              CUP$sinG$result = new java_cup.runtime.Symbol(19/*VISIBILIDAD*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-1)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // FUNCIONES ::= vacioL mainL parA parC llaveA CUERPOFUNCIONES llaveC 
            {
              Object RESULT = null;

              CUP$sinG$result = new java_cup.runtime.Symbol(15/*FUNCIONES*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-6)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // FUNCIONES ::= TDATO id parA LPARAMETROS parC VISIBILIDAD llaveA CUERPOFUNCIONES llaveC 
            {
              Object RESULT = null;

              CUP$sinG$result = new java_cup.runtime.Symbol(15/*FUNCIONES*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-8)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // TDATO ::= id 
            {
              Object RESULT = null;

              CUP$sinG$result = new java_cup.runtime.Symbol(10/*TDATO*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // TDATO ::= vacioL 
            {
              Object RESULT = null;

              CUP$sinG$result = new java_cup.runtime.Symbol(10/*TDATO*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // TDATO ::= boolL 
            {
              Object RESULT = null;

              CUP$sinG$result = new java_cup.runtime.Symbol(10/*TDATO*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // TDATO ::= cadenaL 
            {
              Object RESULT = null;

              CUP$sinG$result = new java_cup.runtime.Symbol(10/*TDATO*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // TDATO ::= caracterL 
            {
              Object RESULT = null;

              CUP$sinG$result = new java_cup.runtime.Symbol(10/*TDATO*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // TDATO ::= decimalL 
            {
              Object RESULT = null;

              CUP$sinG$result = new java_cup.runtime.Symbol(10/*TDATO*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // TDATO ::= enteroL 
            {
              Object RESULT = null;

              CUP$sinG$result = new java_cup.runtime.Symbol(10/*TDATO*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // LIDS ::= id 
            {
              Object RESULT = null;

              CUP$sinG$result = new java_cup.runtime.Symbol(13/*LIDS*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // LIDS ::= LIDS coma id 
            {
              Object RESULT = null;

              CUP$sinG$result = new java_cup.runtime.Symbol(13/*LIDS*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-2)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ATRIBUTOS ::= varL TDATO LIDS VISIBILIDAD delimitador 
            {
              Object RESULT = null;

              CUP$sinG$result = new java_cup.runtime.Symbol(14/*ATRIBUTOS*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-4)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ATRIBUTOS ::= varL TDATO LIDS asignacion OP VISIBILIDAD delimitador 
            {
              Object RESULT = null;

              CUP$sinG$result = new java_cup.runtime.Symbol(14/*ATRIBUTOS*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-6)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CUERPOASL ::= FUNCIONES 
            {
              Object RESULT = null;

              CUP$sinG$result = new java_cup.runtime.Symbol(21/*CUERPOASL*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CUERPOASL ::= ATRIBUTOS 
            {
              Object RESULT = null;

              CUP$sinG$result = new java_cup.runtime.Symbol(21/*CUERPOASL*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CUERPOSALS ::= CUERPOASL 
            {
              Object RESULT = null;

              CUP$sinG$result = new java_cup.runtime.Symbol(8/*CUERPOSALS*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // CUERPOSALS ::= CUERPOSALS CUERPOASL 
            {
              Object RESULT = null;

              CUP$sinG$result = new java_cup.runtime.Symbol(8/*CUERPOSALS*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-1)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // CREARALS ::= alsL id heredaL id dosPuntos TVISIBILIDAD llaveA CUERPOSALS llaveC 
            {
              Object RESULT = null;

              CUP$sinG$result = new java_cup.runtime.Symbol(6/*CREARALS*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-8)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CREARALS ::= alsL id dosPuntos TVISIBILIDAD llaveA CUERPOSALS llaveC 
            {
              Object RESULT = null;

              CUP$sinG$result = new java_cup.runtime.Symbol(6/*CREARALS*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-6)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DECASL ::= CREARALS 
            {
              Object RESULT = null;

              CUP$sinG$result = new java_cup.runtime.Symbol(7/*DECASL*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DECASL ::= DECASL CREARALS 
            {
              Object RESULT = null;

              CUP$sinG$result = new java_cup.runtime.Symbol(7/*DECASL*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-1)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // IMPORTHK ::= incluirHK id delimitador 
            {
              Object RESULT = null;

              CUP$sinG$result = new java_cup.runtime.Symbol(5/*IMPORTHK*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-2)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // IMPORTARHK ::= IMPORTHK 
            {
              Object RESULT = null;

              CUP$sinG$result = new java_cup.runtime.Symbol(4/*IMPORTARHK*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // IMPORTARHK ::= IMPORTARHK IMPORTHK 
            {
              Object RESULT = null;

              CUP$sinG$result = new java_cup.runtime.Symbol(4/*IMPORTARHK*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-1)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // IMPORTACION ::= imports id archivoGK 
            {
              Object RESULT = null;

              CUP$sinG$result = new java_cup.runtime.Symbol(3/*IMPORTACION*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-2)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // IMPORTACIONES ::= IMPORTACION 
            {
              Object RESULT = null;

              CUP$sinG$result = new java_cup.runtime.Symbol(2/*IMPORTACIONES*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // IMPORTACIONES ::= IMPORTACIONES IMPORTACION 
            {
              Object RESULT = null;

              CUP$sinG$result = new java_cup.runtime.Symbol(2/*IMPORTACIONES*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-1)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIAL ::= IMPORTACIONES IMPORTARHK DECASL 
            {
              Object RESULT = null;
		


              CUP$sinG$result = new java_cup.runtime.Symbol(1/*INICIAL*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-2)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          return CUP$sinG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIAL EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$sinG$stack.elementAt(CUP$sinG$top-1)).value;
		RESULT = start_val;
              CUP$sinG$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-1)).left, ((java_cup.runtime.Symbol)CUP$sinG$stack.elementAt(CUP$sinG$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$sinG$parser.done_parsing();
          return CUP$sinG$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

