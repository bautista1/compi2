package Analizador1;
/* proyecto.java */
/* Generated By:JavaCC: Do not edit this line. proyecto.java */
import java.io.*;
import arbol.*;
public class proyecto implements proyectoConstants {

  final public NodoArbol Programa() throws ParseException {NodoArbol raiz=new NodoArbol("Progra");
    NodoArbol lienz=null;
    label_1:
    while (true) {
      lienz = LIENZO();
raiz.addHijo(lienz);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PUBLICO:
      case PRIVADO:
      case PROTEGIDO:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
    }
//  System.out.println("PROGRAMA");
                                                            {if ("" != null) return raiz;}
    throw new Error("Missing return statement in function");
  }

  final public NodoArbol LIENZO() throws ParseException {NodoArbol lien=null;
    NodoArbol ext=null;
    Token id;
    NodoArbol lienzi=new NodoArbol("LIENZO");
    lien = ACCESO();
    jj_consume_token(LIENZOT);
    id = jj_consume_token(IDEN);
    ext = EXTIENDE();
    jj_consume_token(0);
lienzi.addHijo(lien);
                        lienzi.addHijo(id.toString());
                        lienzi.addHijo(ext);
                        {if ("" != null) return lienzi;}
    throw new Error("Missing return statement in function");
  }

  final public NodoArbol EXTIENDE() throws ParseException {NodoArbol lien=new NodoArbol("EXTENDIDA");
    NodoArbol vacio=null;
    NodoArbol cu=null;
    NodoArbol cu1=new NodoArbol ("SIMPLE");
    NodoArbol lienzs=null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case EXTIENDE:{
      jj_consume_token(EXTIENDE);
      lienzs = LIENZOS();
      jj_consume_token(INICIO);
      cu = CUERPO();
      jj_consume_token(FIN);
lien.addHijo(lienzs);lien.addHijo(cu);{if ("" != null) return lien;}
      break;
      }
    case INICIO:{
      jj_consume_token(INICIO);
      cu = CUERPO();
      jj_consume_token(FIN);
cu1.addHijo(cu); {if ("" != null) return cu1;}
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public NodoArbol LIENZOS() throws ParseException {NodoArbol acce=new NodoArbol("LIENZOS");
    Token id;
    id = jj_consume_token(IDEN);
acce.addHijo(id.toString());
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMA:{
        ;
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      jj_consume_token(COMA);
      id = jj_consume_token(IDEN);
acce.addHijo(id.toString());
    }
{if ("" != null) return acce;}
    throw new Error("Missing return statement in function");
  }

  final public NodoArbol ACCESO() throws ParseException {NodoArbol acce=new NodoArbol("T_ACCE");
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PUBLICO:{
      jj_consume_token(PUBLICO);
acce.addHijo("PUBLICO");{if ("" != null) return acce;}
      break;
      }
    case PRIVADO:{
      jj_consume_token(PRIVADO);
acce.addHijo("PRIVADO");{if ("" != null) return acce;}
      break;
      }
    case PROTEGIDO:{
      jj_consume_token(PROTEGIDO);
acce.addHijo("PROTEGIDO");{if ("" != null) return acce;}
      break;
      }
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public NodoArbol CUERPO() throws ParseException {NodoArbol acce=new NodoArbol("RELLENOP");
    NodoArbol rell=null;
    label_3:
    while (true) {
      rell = RELLENOP();
acce.addHijo(rell);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CONSERVAR:
      case VAR:
      case MAIN:
      case INTL:
      case FLOATL:
      case BOOLL:
      case CHARL:
      case STRINGL:
      case IDEN:{
        ;
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        break label_3;
      }
    }
{if ("" != null) return acce;}
    throw new Error("Missing return statement in function");
  }

  final public NodoArbol RELLENOP() throws ParseException {NodoArbol rell=null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case CONSERVAR:
    case VAR:
    case INTL:
    case FLOATL:
    case BOOLL:
    case CHARL:
    case STRINGL:
    case IDEN:{
      rell = FAC();
{if ("" != null) return rell;}
      break;
      }
    case MAIN:{
      rell = MAIN();
{if ("" != null) return rell;}
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public NodoArbol FAC() throws ParseException {NodoArbol rell=new NodoArbol("CONSERVA");
    NodoArbol rell1=null;
    boolean conservar=false;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case CONSERVAR:{
      jj_consume_token(CONSERVAR);
conservar=true;
      break;
      }
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INTL:
    case FLOATL:
    case BOOLL:
    case CHARL:
    case STRINGL:
    case IDEN:{
      rell1 = FUNM();
if(conservar){
                                        rell.addHijo(rell1);
                                        {if ("" != null) return rell;}
                                    }else{
                                        {if ("" != null) return rell1;}
                                    }
      break;
      }
    case VAR:{
      rell1 = DECLARACION();
if(conservar){
                                        rell.addHijo(rell1);
                                        {if ("" != null) return rell;}
                                    }else{
                                        {if ("" != null) return rell1;}
                                    }
      break;
      }
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public NodoArbol DECLARACION() throws ParseException {NodoArbol rell=null;
    NodoArbol tempr=null;
    tempr = VAR();
    jj_consume_token(DELIMITADOR);
rell=new NodoArbol("DECLARACION");
                        rell.addHijo(tempr);
                        {if ("" != null) return rell;}
    throw new Error("Missing return statement in function");
  }

  final public NodoArbol VAR() throws ParseException {NodoArbol rell=new NodoArbol("VARIABLES");
    NodoArbol tempr=null;
    NodoArbol tdato=null;
    NodoArbol comp=null;
    jj_consume_token(VAR);
    tdato = TDATO();
    comp = COMP();
rell.addHijo(tdato);
                    rell.addHijo(comp);
                    {if ("" != null) return rell;}
    throw new Error("Missing return statement in function");
  }

  final public NodoArbol COMP() throws ParseException {NodoArbol rell=new NodoArbol("VARIABLES");
    NodoArbol vari1=new NodoArbol("LISTA_VARIABLES");
    NodoArbol vari=null;
    NodoArbol arr=new NodoArbol("LISTA_ARREGLOS");
    NodoArbol arr1=null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ARREGLO:{
      jj_consume_token(ARREGLO);
      arr1 = ARREGLOS();
arr.addHijo(arr1);
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMA:{
          ;
          break;
          }
        default:
          jj_la1[8] = jj_gen;
          break label_4;
        }
        jj_consume_token(COMA);
        arr1 = ARREGLOS();
arr.addHijo(arr1);
      }
{if ("" != null) return arr;}
      break;
      }
    case IDEN:{
      vari = VARI();
vari1.addHijo(vari);
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMA:{
          ;
          break;
          }
        default:
          jj_la1[9] = jj_gen;
          break label_5;
        }
        jj_consume_token(COMA);
        vari = VARI();
vari1.addHijo(vari);
      }
{if ("" != null) return vari1;}
      break;
      }
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public NodoArbol ARREGLOS() throws ParseException {NodoArbol rell=new NodoArbol("ARREGLO");
    Token id;
    NodoArbol op=null;
    NodoArbol dim=null;
    id = jj_consume_token(IDEN);
    dim = DIM();
rell.addHijo(id.toString());rell.addHijo(dim);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ASIGNACION:{
      jj_consume_token(ASIGNACION);
      op = OP();
rell.addHijo(op);
      break;
      }
    default:
      jj_la1[11] = jj_gen;
      ;
    }
{if ("" != null) return rell;}
    throw new Error("Missing return statement in function");
  }

  final public NodoArbol DIM() throws ParseException {NodoArbol rell=new NodoArbol("DIMENSIONES");
    NodoArbol op=null;
    jj_consume_token(CORA);
    op = OP();
    jj_consume_token(CORC);
rell.addHijo(op);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CORA:{
        ;
        break;
        }
      default:
        jj_la1[12] = jj_gen;
        break label_6;
      }
      jj_consume_token(CORA);
      op = OP();
      jj_consume_token(CORC);
rell.addHijo(op);
    }
{if ("" != null) return rell;}
    throw new Error("Missing return statement in function");
  }

  final public NodoArbol VARI() throws ParseException {NodoArbol rell=new NodoArbol("VARIABLE");
    Token id;
    NodoArbol op=null;
    id = jj_consume_token(IDEN);
rell.addHijo(id.toString());
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ASIGNACION:{
      jj_consume_token(ASIGNACION);
      op = OP();
rell.addHijo(op);
      break;
      }
    default:
      jj_la1[13] = jj_gen;
      ;
    }
{if ("" != null) return rell;}
    throw new Error("Missing return statement in function");
  }

  final public NodoArbol MAIN() throws ParseException {NodoArbol fm=null;
    NodoArbol rell=new NodoArbol("RELLENO");
    NodoArbol tempr=null;
    jj_consume_token(MAIN);
    jj_consume_token(PARA);
    jj_consume_token(PARC);
    jj_consume_token(INICIO);
    label_7:
    while (true) {
      tempr = CUERPOM();
rell.addHijo(tempr);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case VAR:
      case IF:
      case FOR:
      case SWITCH:
      case WHILE:
      case DO:
      case PUNTO:
      case PINTAROR:
      case PINTARCAD:
      case ORDENAR:
      case SUMARIZAR:
      case IDEN:{
        ;
        break;
        }
      default:
        jj_la1[14] = jj_gen;
        break label_7;
      }
    }
    jj_consume_token(FIN);
fm=new NodoArbol("MAIN");
                            fm.addHijo(rell);
                            {if ("" != null) return fm;}
    throw new Error("Missing return statement in function");
  }

  final public NodoArbol FUNM() throws ParseException {NodoArbol fm=null;
    NodoArbol tDato=null;
    NodoArbol parametro=null;
    Token id;
    String tipo="";
    NodoArbol temp=null;
    NodoArbol rell=new NodoArbol("RELLENO");
    NodoArbol tempr=null;
    tDato = TDATO();
    id = jj_consume_token(IDEN);
    jj_consume_token(PARA);
    parametro = PAR();
    jj_consume_token(PARC);
    jj_consume_token(INICIO);
    label_8:
    while (true) {
      tempr = RELLENO();
rell.addHijo(tempr);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case VAR:
      case RETORNO:
      case IF:
      case FOR:
      case SWITCH:
      case WHILE:
      case DO:
      case PUNTO:
      case PINTAROR:
      case PINTARCAD:
      case ORDENAR:
      case SUMARIZAR:
      case IDEN:{
        ;
        break;
        }
      default:
        jj_la1[15] = jj_gen;
        break label_8;
      }
    }
    jj_consume_token(FIN);
if(tDato.getEtiqueta().equalsIgnoreCase("vacio")){
                            tipo="VOID";
                            fm=new NodoArbol("Metodo");
                            fm.addHijo(id.toString());
                            fm.addHijo(parametro);
                            fm.addHijo(rell);
                            {if ("" != null) return fm;}
                          }else{
                            fm=new NodoArbol("FUNCION");
                            fm.addHijo(tDato);
                            fm.addHijo(id.toString());
                            fm.addHijo(parametro);
                            fm.addHijo(rell);
                            {if ("" != null) return fm;}
                          }
    throw new Error("Missing return statement in function");
  }

  final public NodoArbol PAR() throws ParseException {NodoArbol acce=new NodoArbol("PARAMETROS");
    NodoArbol param=null;
    NodoArbol tDato=null;
    Token id;
    NodoArbol vacio=null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INTL:
    case FLOATL:
    case BOOLL:
    case CHARL:
    case STRINGL:
    case IDEN:{
      tDato = TDATO();
      id = jj_consume_token(IDEN);
param=new NodoArbol("PARAMETRO");param.addHijo(tDato);param.addHijo(id.toString()); acce.addHijo(param);
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMA:{
          ;
          break;
          }
        default:
          jj_la1[16] = jj_gen;
          break label_9;
        }
        jj_consume_token(COMA);
        tDato = TDATO();
        id = jj_consume_token(IDEN);
param=new NodoArbol("PARAMETRO");param.addHijo(tDato);param.addHijo(id.toString()); acce.addHijo(param);
      }
{if ("" != null) return acce;}
      break;
      }
    default:
      jj_la1[17] = jj_gen;
      vacio = EMPTY();
{if ("" != null) return vacio;}
    }
    throw new Error("Missing return statement in function");
  }

  final public NodoArbol TDATO() throws ParseException {NodoArbol acce=null;
    NodoArbol vacio=null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INTL:{
      jj_consume_token(INTL);
acce=new NodoArbol("ENTERO");{if ("" != null) return acce;}
      break;
      }
    case FLOATL:{
      jj_consume_token(FLOATL);
acce=new NodoArbol("DOBLE");{if ("" != null) return acce;}
      break;
      }
    case BOOLL:{
      jj_consume_token(BOOLL);
acce=new NodoArbol("BOOLEAN");{if ("" != null) return acce;}
      break;
      }
    case CHARL:{
      jj_consume_token(CHARL);
acce=new NodoArbol("CARACTER");{if ("" != null) return acce;}
      break;
      }
    case STRINGL:{
      jj_consume_token(STRINGL);
acce=new NodoArbol("CADENA");{if ("" != null) return acce;}
      break;
      }
    default:
      jj_la1[18] = jj_gen;
      vacio = EMPTY();
{if ("" != null) return vacio;}
    }
    throw new Error("Missing return statement in function");
  }

  final public NodoArbol RELLENO() throws ParseException {NodoArbol hijo=null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PUNTO:{
      hijo = PINTARP();
{if ("" != null) return hijo;}
      break;
      }
    case PINTAROR:{
      hijo = PINTAROR();
{if ("" != null) return hijo;}
      break;
      }
    case PINTARCAD:{
      hijo = PINTARC();
{if ("" != null) return hijo;}
      break;
      }
    case IF:{
      hijo = IF();
{if ("" != null) return hijo;}
      break;
      }
    case SWITCH:{
      hijo = SWITCH();
{if ("" != null) return hijo;}
      break;
      }
    case FOR:{
      hijo = FOR();
{if ("" != null) return hijo;}
      break;
      }
    case WHILE:{
      hijo = WHILE();
{if ("" != null) return hijo;}
      break;
      }
    case DO:{
      hijo = DOWHILE();
{if ("" != null) return hijo;}
      break;
      }
    case ORDENAR:{
      hijo = ORDENAR();
{if ("" != null) return hijo;}
      break;
      }
    case SUMARIZAR:{
      hijo = SUMARIZAR();
{if ("" != null) return hijo;}
      break;
      }
    case RETORNO:{
      hijo = RETORNO();
{if ("" != null) return hijo;}
      break;
      }
    case VAR:{
      hijo = DECLARACION();
{if ("" != null) return hijo;}
      break;
      }
    case IDEN:{
      hijo = ASIGNACION();
{if ("" != null) return hijo;}
      break;
      }
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public NodoArbol ASIGNACION() throws ParseException {NodoArbol hijo=null;
    NodoArbol rel=null;
    NodoArbol arreglo=new NodoArbol("DIMENSION_ARREGLO");
    Token id;
    id = jj_consume_token(IDEN);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ASIGNACION:{
      jj_consume_token(ASIGNACION);
      rel = OP();
      jj_consume_token(DELIMITADOR);
hijo=new NodoArbol("ASIGNACION");
                            hijo.addHijo(id.toString());
                            hijo.addHijo(rel);
                            {if ("" != null) return hijo;}
      break;
      }
    case PARA:{
      jj_consume_token(PARA);
      rel = PARAMETROSVALOR();
      jj_consume_token(PARC);
      jj_consume_token(DELIMITADOR);
if(rel.getEtiqueta().equalsIgnoreCase("vacio")){
                            hijo=new NodoArbol("LLAMADA_FUNM_SIN");
                            hijo.addHijo(id.toString());
                            {if ("" != null) return hijo;}
                          }else{
                            hijo=new NodoArbol("LLAMADA_FUNM_CON");
                            hijo.addHijo(id.toString());
                            hijo.addHijo(rel);
                            {if ("" != null) return hijo;}
                          }
      break;
      }
    case CORA:{
      jj_consume_token(CORA);
      rel = OP();
      jj_consume_token(CORC);
arreglo.addHijo(rel);
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case CORA:{
          ;
          break;
          }
        default:
          jj_la1[20] = jj_gen;
          break label_10;
        }
        jj_consume_token(CORA);
        rel = OP();
        jj_consume_token(CORC);
arreglo.addHijo(rel);
      }
      jj_consume_token(ASIGNACION);
      rel = OP();
      jj_consume_token(DELIMITADOR);
hijo=new NodoArbol("ASIGNACION_ARREGLO");
                            hijo.addHijo(id.toString());
                            hijo.addHijo(arreglo);
                            hijo.addHijo(rel);
                            {if ("" != null) return hijo;}
      break;
      }
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public NodoArbol PARAMETROSVALOR() throws ParseException {NodoArbol hijo=new NodoArbol("PARAMETROS_VALOR");
    NodoArbol rel=null;
    NodoArbol vacio=null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NOT:
    case VERDADERO:
    case FALSO:
    case PARA:
    case NULO:
    case NUM:
    case IDEN:
    case DECIMAL:
    case CADENA:
    case CARAC:{
      rel = OP();
hijo.addHijo(rel);
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMA:{
          ;
          break;
          }
        default:
          jj_la1[22] = jj_gen;
          break label_11;
        }
        jj_consume_token(COMA);
        rel = OP();
hijo.addHijo(rel);
      }
{if ("" != null) return hijo;}
      break;
      }
    default:
      jj_la1[23] = jj_gen;
      vacio = EMPTY();
{if ("" != null) return vacio;}
    }
    throw new Error("Missing return statement in function");
  }

  final public NodoArbol CUERPOM() throws ParseException {NodoArbol hijo=null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PUNTO:{
      hijo = PINTARP();
{if ("" != null) return hijo;}
      break;
      }
    case PINTAROR:{
      hijo = PINTAROR();
{if ("" != null) return hijo;}
      break;
      }
    case PINTARCAD:{
      hijo = PINTARC();
{if ("" != null) return hijo;}
      break;
      }
    case IF:{
      hijo = IF();
{if ("" != null) return hijo;}
      break;
      }
    case SWITCH:{
      hijo = SWITCH();
{if ("" != null) return hijo;}
      break;
      }
    case FOR:{
      hijo = FOR();
{if ("" != null) return hijo;}
      break;
      }
    case WHILE:{
      hijo = WHILE();
{if ("" != null) return hijo;}
      break;
      }
    case DO:{
      hijo = DOWHILE();
{if ("" != null) return hijo;}
      break;
      }
    case ORDENAR:{
      hijo = ORDENAR();
{if ("" != null) return hijo;}
      break;
      }
    case SUMARIZAR:{
      hijo = SUMARIZAR();
{if ("" != null) return hijo;}
      break;
      }
    case VAR:{
      hijo = DECLARACION();
{if ("" != null) return hijo;}
      break;
      }
    case IDEN:{
      hijo = ASIGNACION();
{if ("" != null) return hijo;}
      break;
      }
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public NodoArbol RETORNO() throws ParseException {NodoArbol hijo=new NodoArbol("RETORNO");
    NodoArbol rel=null;
    Token id;
    jj_consume_token(RETORNO);
    rel = OP();
    jj_consume_token(DELIMITADOR);
hijo.addHijo(rel);
                             {if ("" != null) return hijo;}
    throw new Error("Missing return statement in function");
  }

  final public NodoArbol SUMARIZAR() throws ParseException {NodoArbol hijo=new NodoArbol("SUMARIZAR");
    NodoArbol rel=null;
    Token id;
    jj_consume_token(SUMARIZAR);
    jj_consume_token(PARA);
    rel = OP();
    jj_consume_token(PARC);
    jj_consume_token(DELIMITADOR);
hijo.addHijo(rel);
                             {if ("" != null) return hijo;}
    throw new Error("Missing return statement in function");
  }

  final public NodoArbol ORDENAR() throws ParseException {NodoArbol hijo=new NodoArbol("ORDENAR");
NodoArbol rel=null;
Token id;
    jj_consume_token(ORDENAR);
    jj_consume_token(PARA);
    id = jj_consume_token(IDEN);
    jj_consume_token(COMA);
    rel = TIPOORDEN();
    jj_consume_token(PARC);
    jj_consume_token(DELIMITADOR);
hijo.addHijo(id.toString());
                             hijo.addHijo(rel);
                             {if ("" != null) return hijo;}
    throw new Error("Missing return statement in function");
  }

  final public NodoArbol TIPOORDEN() throws ParseException {NodoArbol hijo=null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ASCENDENTE:{
      jj_consume_token(ASCENDENTE);
hijo=new NodoArbol("ASCENDENTE");{if ("" != null) return hijo;}
      break;
      }
    case DESCENDENTE:{
      jj_consume_token(DESCENDENTE);
hijo=new NodoArbol("DESCENDENTE");{if ("" != null) return hijo;}
      break;
      }
    case PARES:{
      jj_consume_token(PARES);
hijo=new NodoArbol("PARES");{if ("" != null) return hijo;}
      break;
      }
    case IMPARES:{
      jj_consume_token(IMPARES);
hijo=new NodoArbol("IMPARES");{if ("" != null) return hijo;}
      break;
      }
    case PRIMOS:{
      jj_consume_token(PRIMOS);
hijo=new NodoArbol("PRIMOS");{if ("" != null) return hijo;}
      break;
      }
    default:
      jj_la1[25] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public NodoArbol DOWHILE() throws ParseException {NodoArbol hijo=new NodoArbol("DO_WHILE");
NodoArbol relleno=new NodoArbol("RELLENO");
NodoArbol rel=null;
NodoArbol comparacion=null;
    jj_consume_token(DO);
    jj_consume_token(INICIO);
    label_12:
    while (true) {
      rel = CUERPOCID();
relleno.addHijo(rel);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case VAR:
      case RETORNO:
      case IF:
      case FOR:
      case CONTINUE:
      case SWITCH:
      case SALIR:
      case WHILE:
      case DO:
      case PUNTO:
      case PINTAROR:
      case PINTARCAD:
      case ORDENAR:
      case SUMARIZAR:
      case IDEN:{
        ;
        break;
        }
      default:
        jj_la1[26] = jj_gen;
        break label_12;
      }
    }
    jj_consume_token(FIN);
    jj_consume_token(WHILE);
    jj_consume_token(PARA);
    comparacion = OP();
    jj_consume_token(PARC);
    jj_consume_token(DELIMITADOR);
hijo.addHijo(relleno);
                             hijo.addHijo(comparacion);
                             {if ("" != null) return hijo;}
    throw new Error("Missing return statement in function");
  }

  final public NodoArbol WHILE() throws ParseException {NodoArbol hijo=new NodoArbol("WHILE");
NodoArbol relleno=new NodoArbol("RELLENO");;
NodoArbol rel=null;
NodoArbol comparacion=null;
    jj_consume_token(WHILE);
    jj_consume_token(PARA);
    comparacion = OP();
    jj_consume_token(PARC);
    jj_consume_token(INICIO);
    label_13:
    while (true) {
      rel = CUERPOCID();
relleno.addHijo(rel);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case VAR:
      case RETORNO:
      case IF:
      case FOR:
      case CONTINUE:
      case SWITCH:
      case SALIR:
      case WHILE:
      case DO:
      case PUNTO:
      case PINTAROR:
      case PINTARCAD:
      case ORDENAR:
      case SUMARIZAR:
      case IDEN:{
        ;
        break;
        }
      default:
        jj_la1[27] = jj_gen;
        break label_13;
      }
    }
    jj_consume_token(FIN);
hijo.addHijo(comparacion);
                             hijo.addHijo(relleno);
                             {if ("" != null) return hijo;}
    throw new Error("Missing return statement in function");
  }

  final public NodoArbol FOR() throws ParseException {NodoArbol hijo=new NodoArbol("FOR");
NodoArbol relleno=new NodoArbol("RELLENO");;
NodoArbol rel=null;
NodoArbol op=null;
NodoArbol comparacion=null;
NodoArbol aumento=null;
    jj_consume_token(FOR);
    jj_consume_token(PARA);
    op = ASIGNACIONFOR();
    jj_consume_token(PCOMA);
    comparacion = OP();
    jj_consume_token(PCOMA);
    aumento = OPFOR();
    jj_consume_token(PARC);
    jj_consume_token(INICIO);
    label_14:
    while (true) {
      rel = CUERPOCID();
relleno.addHijo(rel);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case VAR:
      case RETORNO:
      case IF:
      case FOR:
      case CONTINUE:
      case SWITCH:
      case SALIR:
      case WHILE:
      case DO:
      case PUNTO:
      case PINTAROR:
      case PINTARCAD:
      case ORDENAR:
      case SUMARIZAR:
      case IDEN:{
        ;
        break;
        }
      default:
        jj_la1[28] = jj_gen;
        break label_14;
      }
    }
    jj_consume_token(FIN);
hijo.addHijo(op);
                             hijo.addHijo(comparacion);
                             hijo.addHijo(aumento);
                             hijo.addHijo(relleno);
                             {if ("" != null) return hijo;}
    throw new Error("Missing return statement in function");
  }

  final public NodoArbol OPFOR() throws ParseException {NodoArbol hijo=new NodoArbol("INCREMENTO");
NodoArbol relleno=new NodoArbol("DECREMENTO");;
NodoArbol op=null;
NodoArbol tdato=null;
Token id;
    id = jj_consume_token(IDEN);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INCR:{
      jj_consume_token(INCR);
      op = OP();
hijo.addHijo(id.toString());hijo.addHijo(op);{if ("" != null) return hijo;}
      break;
      }
    case DECR:{
      jj_consume_token(DECR);
      op = OP();
relleno.addHijo(id.toString());relleno.addHijo(op);{if ("" != null) return relleno;}
      break;
      }
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public NodoArbol ASIGNACIONFOR() throws ParseException {NodoArbol hijo=new NodoArbol("ASIGNACION");
NodoArbol relleno=new NodoArbol("VARIABLE");;
NodoArbol op=null;
NodoArbol tdato=null;
Token id;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDEN:{
      id = jj_consume_token(IDEN);
      jj_consume_token(ASIGNACION);
      op = OP();
hijo.addHijo(id.toString());hijo.addHijo(op); {if ("" != null) return hijo;}
      break;
      }
    case INTL:
    case FLOATL:
    case BOOLL:
    case CHARL:
    case STRINGL:{
      tdato = TDATO();
      id = jj_consume_token(IDEN);
      jj_consume_token(ASIGNACION);
      op = OP();
relleno.addHijo(tdato);relleno.addHijo(id.toString());relleno.addHijo(op); {if ("" != null) return relleno;}
      break;
      }
    default:
      jj_la1[30] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public NodoArbol CUERPOCID() throws ParseException {NodoArbol hijo=new NodoArbol("BREAK");
NodoArbol relleno=new NodoArbol("CONTINUAR");
NodoArbol op=null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VAR:
    case RETORNO:
    case IF:
    case FOR:
    case SWITCH:
    case WHILE:
    case DO:
    case PUNTO:
    case PINTAROR:
    case PINTARCAD:
    case ORDENAR:
    case SUMARIZAR:
    case IDEN:{
      op = RELLENO();
{if ("" != null) return op;}
      break;
      }
    case SALIR:{
      jj_consume_token(SALIR);
      jj_consume_token(DELIMITADOR);
{if ("" != null) return hijo;}
      break;
      }
    case CONTINUE:{
      jj_consume_token(CONTINUE);
      jj_consume_token(DELIMITADOR);
{if ("" != null) return relleno;}
      break;
      }
    default:
      jj_la1[31] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public NodoArbol SWITCH() throws ParseException {NodoArbol hijo=new NodoArbol("SWITCH");
NodoArbol relleno=new NodoArbol("CASOS");;
NodoArbol caso=null;
NodoArbol opi=null;
Token id;
    jj_consume_token(SWITCH);
    jj_consume_token(PARA);
    opi = OP();
    jj_consume_token(PARC);
    jj_consume_token(INICIO);
    label_15:
    while (true) {
      caso = CASO();
relleno.addHijo(caso);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CASE:
      case DEFAUL:{
        ;
        break;
        }
      default:
        jj_la1[32] = jj_gen;
        break label_15;
      }
    }
    jj_consume_token(FIN);
hijo.addHijo(opi);
                             hijo.addHijo(relleno);
                             {if ("" != null) return hijo;}
    throw new Error("Missing return statement in function");
  }

  final public NodoArbol CASO() throws ParseException {NodoArbol hijo=null;
NodoArbol relleno=new NodoArbol("RELLENO");;
NodoArbol rel=null;
NodoArbol op=null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case CASE:{
      jj_consume_token(CASE);
      op = OP();
      jj_consume_token(DOSPUNTOS);
      label_16:
      while (true) {
        rel = CUERPOD();
relleno.addHijo(rel);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case VAR:
        case RETORNO:
        case IF:
        case FOR:
        case SWITCH:
        case SALIR:
        case WHILE:
        case DO:
        case PUNTO:
        case PINTAROR:
        case PINTARCAD:
        case ORDENAR:
        case SUMARIZAR:
        case IDEN:{
          ;
          break;
          }
        default:
          jj_la1[33] = jj_gen;
          break label_16;
        }
      }
hijo=new NodoArbol("CASO");
                             hijo.addHijo(op);
                             hijo.addHijo(relleno);
                             {if ("" != null) return hijo;}
      break;
      }
    case DEFAUL:{
      jj_consume_token(DEFAUL);
      jj_consume_token(DOSPUNTOS);
      label_17:
      while (true) {
        rel = CUERPOD();
relleno.addHijo(rel);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case VAR:
        case RETORNO:
        case IF:
        case FOR:
        case SWITCH:
        case SALIR:
        case WHILE:
        case DO:
        case PUNTO:
        case PINTAROR:
        case PINTARCAD:
        case ORDENAR:
        case SUMARIZAR:
        case IDEN:{
          ;
          break;
          }
        default:
          jj_la1[34] = jj_gen;
          break label_17;
        }
      }
hijo=new NodoArbol("DEFAULT");
                             hijo.addHijo(relleno);
                             {if ("" != null) return hijo;}
      break;
      }
    default:
      jj_la1[35] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public NodoArbol CUERPOD() throws ParseException {NodoArbol relleno=new NodoArbol("BREAK");
NodoArbol op=null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SALIR:{
      jj_consume_token(SALIR);
      jj_consume_token(DELIMITADOR);
{if ("" != null) return relleno;}
      break;
      }
    case VAR:
    case RETORNO:
    case IF:
    case FOR:
    case SWITCH:
    case WHILE:
    case DO:
    case PUNTO:
    case PINTAROR:
    case PINTARCAD:
    case ORDENAR:
    case SUMARIZAR:
    case IDEN:{
      op = RELLENO();
{if ("" != null) return op;}
      break;
      }
    default:
      jj_la1[36] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public NodoArbol IF() throws ParseException {NodoArbol hijo=new NodoArbol("IF");
NodoArbol operacion=null;
NodoArbol relleno=new NodoArbol("RELLENO");;
NodoArbol sino=null;
NodoArbol rel=null;
    jj_consume_token(IF);
    jj_consume_token(PARA);
    operacion = OP();
    jj_consume_token(PARC);
    jj_consume_token(INICIO);
    label_18:
    while (true) {
      rel = RELLENO();
relleno.addHijo(rel);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case VAR:
      case RETORNO:
      case IF:
      case FOR:
      case SWITCH:
      case WHILE:
      case DO:
      case PUNTO:
      case PINTAROR:
      case PINTARCAD:
      case ORDENAR:
      case SUMARIZAR:
      case IDEN:{
        ;
        break;
        }
      default:
        jj_la1[37] = jj_gen;
        break label_18;
      }
    }
    jj_consume_token(FIN);
    sino = SINO();
hijo.addHijo(operacion);
                             hijo.addHijo(relleno);
                             hijo.addHijo(sino);
                             {if ("" != null) return hijo;}
    throw new Error("Missing return statement in function");
  }

  final public NodoArbol SINO() throws ParseException {NodoArbol hijo=new NodoArbol("SINO");
NodoArbol cuerpo=null;
NodoArbol relleno=new NodoArbol("RELLENO");
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ELSE:{
      jj_consume_token(ELSE);
      jj_consume_token(INICIO);
      label_19:
      while (true) {
        cuerpo = RELLENO();
relleno.addHijo(cuerpo);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case VAR:
        case RETORNO:
        case IF:
        case FOR:
        case SWITCH:
        case WHILE:
        case DO:
        case PUNTO:
        case PINTAROR:
        case PINTARCAD:
        case ORDENAR:
        case SUMARIZAR:
        case IDEN:{
          ;
          break;
          }
        default:
          jj_la1[38] = jj_gen;
          break label_19;
        }
      }
      jj_consume_token(FIN);
hijo.addHijo(relleno);
                             {if ("" != null) return hijo;}
      break;
      }
    default:
      jj_la1[39] = jj_gen;
      cuerpo = EMPTY();
{if ("" != null) return cuerpo;}
    }
    throw new Error("Missing return statement in function");
  }

  final public NodoArbol PINTARP() throws ParseException {NodoArbol hijo=new NodoArbol("PINTAR_PUNTO");
NodoArbol x=null;
NodoArbol y=null;
NodoArbol diametro=null;
Token color;
    jj_consume_token(PUNTO);
    jj_consume_token(PARA);
    x = OP();
    jj_consume_token(COMA);
    y = OP();
    jj_consume_token(COMA);
    color = jj_consume_token(COLOR);
    jj_consume_token(COMA);
    diametro = OP();
    jj_consume_token(PARC);
    jj_consume_token(DELIMITADOR);
String he=color.toString();
                            he=he.replace("\u005c"", "");
                             hijo.addHijo(x);
                             hijo.addHijo(y);
                             hijo.addHijo(he);
                             hijo.addHijo(diametro);
                             {if ("" != null) return hijo;}
    throw new Error("Missing return statement in function");
  }

  final public NodoArbol PINTARC() throws ParseException {NodoArbol hijo=new NodoArbol("PINTAR_CADENA");
NodoArbol x=null;
NodoArbol y=null;
NodoArbol diametro=null;
Token color;
    jj_consume_token(PINTARCAD);
    jj_consume_token(PARA);
    x = OP();
    jj_consume_token(COMA);
    y = OP();
    jj_consume_token(COMA);
    color = jj_consume_token(COLOR);
    jj_consume_token(COMA);
    diametro = OP();
    jj_consume_token(PARC);
    jj_consume_token(DELIMITADOR);
String he=color.toString();
                            he=he.replace("\u005c"", "");
                             hijo.addHijo(x);
                             hijo.addHijo(y);
                             hijo.addHijo(he);
                             hijo.addHijo(diametro);
                             {if ("" != null) return hijo;}
    throw new Error("Missing return statement in function");
  }

  final public NodoArbol PINTAROR() throws ParseException {NodoArbol hijo=new NodoArbol("PINTAR_OR");
NodoArbol x=null;
NodoArbol y=null;
Token color;
NodoArbol ancho=null;
NodoArbol alto=null;
Token figura;
    jj_consume_token(PINTAROR);
    jj_consume_token(PARA);
    x = OP();
    jj_consume_token(COMA);
    y = OP();
    jj_consume_token(COMA);
    color = jj_consume_token(COLOR);
    jj_consume_token(COMA);
    ancho = OP();
    jj_consume_token(COMA);
    alto = OP();
    jj_consume_token(COMA);
    figura = jj_consume_token(FIGURA);
    jj_consume_token(PARC);
    jj_consume_token(DELIMITADOR);
String he=color.toString();
                            he=he.replace("\u005c"", "");
                             hijo.addHijo(x);
                             hijo.addHijo(y);
                             hijo.addHijo(he);
                             hijo.addHijo(ancho);
                             hijo.addHijo(alto);
                             String hel=figura.toString();
                            hel=hel.replace("\u005c'", "");
                             hijo.addHijo(hel);
                             {if ("" != null) return hijo;}
    throw new Error("Missing return statement in function");
  }

  final public NodoArbol EMPTY() throws ParseException {NodoArbol hijo=new NodoArbol("VACIO");
{if ("" != null) return hijo;}
    throw new Error("Missing return statement in function");
  }

  final public NodoArbol OP() throws ParseException {NodoArbol op1=null;
NodoArbol op2=null;
    op1 = AND();
    label_20:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OR:
      case XOR:
      case NOR:{
        ;
        break;
        }
      default:
        jj_la1[40] = jj_gen;
        break label_20;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OR:{
        jj_consume_token(OR);
        op2 = AND();
NodoArbol hijo=new NodoArbol("OR");
                                    hijo.addHijo(op1);
                                    hijo.addHijo(op2);
                                    op1=hijo;
        break;
        }
      case XOR:{
        jj_consume_token(XOR);
        op2 = AND();
NodoArbol hijo=new NodoArbol("XOR");
                                    hijo.addHijo(op1);
                                    hijo.addHijo(op2);
                                    op1=hijo;
        break;
        }
      case NOR:{
        jj_consume_token(NOR);
        op2 = AND();
NodoArbol hijo=new NodoArbol("NOR");
                                    hijo.addHijo(op1);
                                    hijo.addHijo(op2);
                                    op1=hijo;
        break;
        }
      default:
        jj_la1[41] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return op1;}
    throw new Error("Missing return statement in function");
  }

  final public NodoArbol AND() throws ParseException {NodoArbol op1=null;
NodoArbol op2=null;
    op1 = NOT();
    label_21:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case AND:
      case NAND:{
        ;
        break;
        }
      default:
        jj_la1[42] = jj_gen;
        break label_21;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case AND:{
        jj_consume_token(AND);
        op2 = NOT();
NodoArbol hijo=new NodoArbol("XOR");
                                    hijo.addHijo(op1);
                                    hijo.addHijo(op2);
                                    op1=hijo;
        break;
        }
      case NAND:{
        jj_consume_token(NAND);
        op2 = NOT();
NodoArbol hijo=new NodoArbol("XOR");
                                    hijo.addHijo(op1);
                                    hijo.addHijo(op2);
                                    op1=hijo;
        break;
        }
      default:
        jj_la1[43] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return op1;}
    throw new Error("Missing return statement in function");
  }

  final public NodoArbol NOT() throws ParseException {NodoArbol op1=null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NOT:{
      jj_consume_token(NOT);
      op1 = RELA();
NodoArbol hijo=new NodoArbol("NOT");
                             hijo.addHijo(op1);
                             {if ("" != null) return hijo;}
      break;
      }
    case VERDADERO:
    case FALSO:
    case PARA:
    case NULO:
    case NUM:
    case IDEN:
    case DECIMAL:
    case CADENA:
    case CARAC:{
      op1 = RELA();
{if ("" != null) return op1;}
      break;
      }
    default:
      jj_la1[44] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public NodoArbol RELA() throws ParseException {NodoArbol op1=null;
NodoArbol op2=null;
Token id;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VERDADERO:
    case FALSO:
    case PARA:
    case NUM:
    case IDEN:
    case DECIMAL:
    case CADENA:
    case CARAC:{
      op1 = ARIT();
      label_22:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case EQUIVALENCIA:
        case MENORIGUAL:
        case MENORQ:
        case MAYORIGUAL:
        case MAYORQ:
        case DISTINTO:{
          ;
          break;
          }
        default:
          jj_la1[45] = jj_gen;
          break label_22;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case EQUIVALENCIA:{
          jj_consume_token(EQUIVALENCIA);
          op2 = ARIT();
NodoArbol hijo=new NodoArbol("==");
                                                hijo.addHijo(op1);
                                                hijo.addHijo(op2);
                                                op1=hijo;
          break;
          }
        case MENORIGUAL:{
          jj_consume_token(MENORIGUAL);
          op2 = ARIT();
NodoArbol hijo=new NodoArbol("<=");
                                                hijo.addHijo(op1);
                                                hijo.addHijo(op2);
                                                op1=hijo;
          break;
          }
        case MENORQ:{
          jj_consume_token(MENORQ);
          op2 = ARIT();
NodoArbol hijo=new NodoArbol("<");
                                                hijo.addHijo(op1);
                                                hijo.addHijo(op2);
                                                op1=hijo;
          break;
          }
        case MAYORIGUAL:{
          jj_consume_token(MAYORIGUAL);
          op2 = ARIT();
NodoArbol hijo=new NodoArbol(">=");
                                                hijo.addHijo(op1);
                                                hijo.addHijo(op2);
                                                op1=hijo;
          break;
          }
        case MAYORQ:{
          jj_consume_token(MAYORQ);
          op2 = ARIT();
NodoArbol hijo=new NodoArbol(">");
                                                hijo.addHijo(op1);
                                                hijo.addHijo(op2);
                                                op1=hijo;
          break;
          }
        case DISTINTO:{
          jj_consume_token(DISTINTO);
          op2 = ARIT();
NodoArbol hijo=new NodoArbol("!=");
                                                hijo.addHijo(op1);
                                                hijo.addHijo(op2);
                                                op1=hijo;
          break;
          }
        default:
          jj_la1[46] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
{if ("" != null) return op1;}
      break;
      }
    case NULO:{
      jj_consume_token(NULO);
      id = jj_consume_token(IDEN);
NodoArbol hijo=new NodoArbol("NULO");
                            hijo.addHijo(id.toString());
                            {if ("" != null) return hijo;}
      break;
      }
    default:
      jj_la1[47] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public NodoArbol ARIT() throws ParseException {NodoArbol op1=null;
NodoArbol op2=null;
    op1 = MULDIV();
    label_23:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:
      case MINUS:{
        ;
        break;
        }
      default:
        jj_la1[48] = jj_gen;
        break label_23;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:{
        jj_consume_token(PLUS);
        op2 = MULDIV();
NodoArbol hijo=new NodoArbol("+");
                                                    hijo.addHijo(op1);
                                                    hijo.addHijo(op2);
                                                    op1=hijo;
        break;
        }
      case MINUS:{
        jj_consume_token(MINUS);
        op2 = MULDIV();
NodoArbol hijo=new NodoArbol("-");
                                                    hijo.addHijo(op1);
                                                    hijo.addHijo(op2);
                                                    op1=hijo;
        break;
        }
      default:
        jj_la1[49] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return op1;}
    throw new Error("Missing return statement in function");
  }

  final public NodoArbol MULDIV() throws ParseException {NodoArbol op1=null;
NodoArbol op2=null;
    op1 = POT();
    label_24:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MULTIPLY:
      case DIVIDE:{
        ;
        break;
        }
      default:
        jj_la1[50] = jj_gen;
        break label_24;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MULTIPLY:{
        jj_consume_token(MULTIPLY);
        op2 = POT();
NodoArbol hijo=new NodoArbol("*");
                                                    hijo.addHijo(op1);
                                                    hijo.addHijo(op2);
                                                    op1=hijo;
        break;
        }
      case DIVIDE:{
        jj_consume_token(DIVIDE);
        op2 = POT();
NodoArbol hijo=new NodoArbol("/");
                                                    hijo.addHijo(op1);
                                                    hijo.addHijo(op2);
                                                    op1=hijo;
        break;
        }
      default:
        jj_la1[51] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return op1;}
    throw new Error("Missing return statement in function");
  }

  final public NodoArbol POT() throws ParseException {NodoArbol op1=null;
NodoArbol op2=null;
    op1 = VALOR();
    label_25:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case POT:{
        ;
        break;
        }
      default:
        jj_la1[52] = jj_gen;
        break label_25;
      }
      jj_consume_token(POT);
      op2 = VALOR();
NodoArbol hijo=new NodoArbol("^");
                                                    hijo.addHijo(op1);
                                                    hijo.addHijo(op2);
                                                    op1=hijo;
    }
{if ("" != null) return op1;}
    throw new Error("Missing return statement in function");
  }

  final public NodoArbol VALOR() throws ParseException {Token nombre;
Token id;
NodoArbol operador=null;
NodoArbol hijo=null;
NodoArbol rel=null;
NodoArbol arreglo=new NodoArbol("DIMENSION_ARREGLO");
int op=0;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NUM:{
      nombre = jj_consume_token(NUM);
NodoArbol padre=new NodoArbol("ENTERO");
                     padre.addHijo(nombre.toString());

                     {if ("" != null) return padre;}
      break;
      }
    case IDEN:{
      id = jj_consume_token(IDEN);
op=0;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PARA:
      case CORA:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PARA:{
          jj_consume_token(PARA);
          rel = PARAMETROSVALOR();
          jj_consume_token(PARC);
if(rel.getEtiqueta().equalsIgnoreCase("vacio")){
                            hijo=new NodoArbol("LLAMADA_FUNM_SIN");
                            hijo.addHijo(id.toString());
                           // return hijo;
                          }else{
                            hijo=new NodoArbol("LLAMADA_FUNM_CON");
                            hijo.addHijo(id.toString());
                            hijo.addHijo(rel);
                            //return hijo;
                          }
                          op=1;
          break;
          }
        case CORA:{
          jj_consume_token(CORA);
          rel = OP();
          jj_consume_token(CORC);
arreglo.addHijo(rel);
          label_26:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case CORA:{
              ;
              break;
              }
            default:
              jj_la1[53] = jj_gen;
              break label_26;
            }
            jj_consume_token(CORA);
            rel = OP();
            jj_consume_token(CORC);
arreglo.addHijo(rel);
          }
hijo=new NodoArbol("LLAMADA_ARREGLO");
                            hijo.addHijo(id.toString());
                            hijo.addHijo(arreglo);
                            hijo.addHijo(rel);
                            //return hijo;
                            op=2;
          break;
          }
        default:
          jj_la1[54] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      default:
        jj_la1[55] = jj_gen;
        ;
      }
if(op==0){
                            hijo=new NodoArbol("ID");
                            hijo.addHijo(id.toString());
                        }
                        {if ("" != null) return hijo;}
      break;
      }
    case DECIMAL:{
      nombre = jj_consume_token(DECIMAL);
NodoArbol padre=new NodoArbol("DECIMAL");
                     padre.addHijo(nombre.toString());
                     {if ("" != null) return padre;}
      break;
      }
    case CADENA:{
      nombre = jj_consume_token(CADENA);
NodoArbol padre=new NodoArbol("CADENA");
                    String hola=""+nombre;
                    hola=hola.replace("\u005c"", "");
                     padre.addHijo(""+hola);
                     {if ("" != null) return padre;}
      break;
      }
    case CARAC:{
      nombre = jj_consume_token(CARAC);
NodoArbol padre=new NodoArbol("CHAR");
                     padre.addHijo(nombre.toString());
                     {if ("" != null) return padre;}
      break;
      }
    case VERDADERO:{
      nombre = jj_consume_token(VERDADERO);
NodoArbol padre=new NodoArbol("VERDADERO");
                     padre.addHijo(nombre.toString());
                     {if ("" != null) return padre;}
      break;
      }
    case FALSO:{
      nombre = jj_consume_token(FALSO);
NodoArbol padre=new NodoArbol("VERDADERO");
                     padre.addHijo(nombre.toString());
                     {if ("" != null) return padre;}
      break;
      }
    case PARA:{
      jj_consume_token(PARA);
      operador = OP();
      jj_consume_token(PARC);
{if ("" != null) return operador;}
      break;
      }
    default:
      jj_la1[56] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public proyectoTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[57];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x38,0x10004,0x0,0x38,0x140,0x140,0x40,0x100,0x0,0x0,0x80,0x80000,0x0,0x80000,0xa8000100,0xa8000300,0x0,0x0,0x0,0xa8000300,0x0,0x80000,0x0,0x8000,0xa8000100,0x0,0xe8000300,0xe8000300,0xe8000300,0x6000000,0x0,0xe8000300,0x0,0xa8000300,0xa8000300,0x0,0xa8000300,0xa8000300,0xa8000300,0x10000000,0x1c00,0x1c00,0x6000,0x6000,0x8000,0x0,0x0,0x0,0x300000,0x300000,0xc00000,0xc00000,0x1000000,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x2000000,0x0,0x400,0x400,0x0,0x0,0x2000000,0x2000000,0x0,0x0,0x800000,0x0,0x3f8,0x3f8,0x2000000,0x0,0x0,0x3f8,0x800000,0x880000,0x2000000,0x81800,0x3f8,0x3e000,0x3fa,0x3fa,0x3fa,0x0,0x0,0x3fa,0x5,0x3fa,0x3fa,0x5,0x3fa,0x3f8,0x3f8,0x0,0x0,0x0,0x0,0x0,0x81800,0xf0000000,0xf0000000,0x81800,0x0,0x0,0x0,0x0,0x0,0x800000,0x880000,0x880000,0x81800,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x2f8,0x2f8,0x0,0x2f8,0x0,0x0,0x200,0x0,0x0,0x0,0x200,0x200,0x0,0x2f8,0xf8,0x200,0x0,0x0,0x0,0x1f04,0x200,0x0,0x200,0x200,0x200,0x0,0x2f8,0x200,0x0,0x200,0x200,0x0,0x200,0x200,0x200,0x0,0x0,0x0,0x0,0x0,0x1f04,0x3,0x3,0x1f04,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1f00,};
   }

  /** Constructor with InputStream. */
  public proyecto(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public proyecto(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new proyectoTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 57; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 57; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public proyecto(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new proyectoTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 57; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 57; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public proyecto(proyectoTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 57; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(proyectoTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 57; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[86];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 57; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 86; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
