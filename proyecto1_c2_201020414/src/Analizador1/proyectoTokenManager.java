package Analizador1;
/* proyectoTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. proyectoTokenManager.java */
import java.io.*;
import arbol.*;

/** Token Manager. */
@SuppressWarnings("unused")public class proyectoTokenManager implements proyectoConstants {

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x8000000000000000L) != 0L || (active1 & 0x1L) != 0L)
            return 3;
         if ((active0 & 0x3fffff80003feL) != 0L || (active1 & 0xf8L) != 0L)
         {
            jjmatchedKind = 73;
            return 1;
         }
         if ((active0 & 0x6000000000000000L) != 0L)
            return 9;
         return -1;
      case 1:
         if ((active0 & 0x18000000L) != 0L)
            return 1;
         if ((active0 & 0x3ffffe00003feL) != 0L || (active1 & 0xf8L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 73;
               jjmatchedPos = 1;
            }
            return 1;
         }
         return -1;
      case 2:
         if ((active0 & 0x100L) != 0L)
            return 1;
         if ((active0 & 0x3fffff00002feL) != 0L || (active1 & 0xf8L) != 0L)
         {
            jjmatchedKind = 73;
            jjmatchedPos = 2;
            return 1;
         }
         return -1;
      case 3:
         if ((active0 & 0x3fffec00002feL) != 0L || (active1 & 0xf8L) != 0L)
         {
            jjmatchedKind = 73;
            jjmatchedPos = 3;
            return 1;
         }
         if ((active0 & 0x130000000L) != 0L)
            return 1;
         return -1;
      case 4:
         if ((active0 & 0x36fecc00002feL) != 0L || (active1 & 0xe8L) != 0L)
         {
            jjmatchedKind = 73;
            jjmatchedPos = 4;
            return 1;
         }
         if ((active0 & 0x901200000000L) != 0L || (active1 & 0x10L) != 0L)
            return 1;
         return -1;
      case 5:
         if ((active0 & 0x16fecc00002fcL) != 0L || (active1 & 0x60L) != 0L)
         {
            jjmatchedKind = 73;
            jjmatchedPos = 5;
            return 1;
         }
         if ((active0 & 0x2000000000002L) != 0L || (active1 & 0x88L) != 0L)
            return 1;
         return -1;
      case 6:
         if ((active0 & 0x6ee8c0000064L) != 0L || (active1 & 0x40L) != 0L)
         {
            jjmatchedKind = 73;
            jjmatchedPos = 6;
            return 1;
         }
         if ((active0 & 0x1010400000298L) != 0L || (active1 & 0x20L) != 0L)
            return 1;
         return -1;
      case 7:
         if ((active0 & 0x6e40c0000020L) != 0L)
         {
            jjmatchedKind = 73;
            jjmatchedPos = 7;
            return 1;
         }
         if ((active0 & 0xa800000044L) != 0L || (active1 & 0x40L) != 0L)
            return 1;
         return -1;
      case 8:
         if ((active0 & 0x600000000000L) != 0L)
         {
            jjmatchedKind = 73;
            jjmatchedPos = 8;
            return 1;
         }
         if ((active0 & 0xe40c0000020L) != 0L)
            return 1;
         return -1;
      case 9:
         if ((active0 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 73;
            jjmatchedPos = 9;
            return 1;
         }
         if ((active0 & 0x200000000000L) != 0L)
            return 1;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 13:
         jjmatchedKind = 81;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40000L);
      case 33:
         jjmatchedKind = 15;
         return jjMoveStringLiteralDfa1_0(0x5000L, 0x6L);
      case 36:
         return jjStopAtPos(0, 18);
      case 37:
         return jjStopAtPos(0, 16);
      case 38:
         return jjMoveStringLiteralDfa1_0(0x2800L, 0x0L);
      case 40:
         return jjStopAtPos(0, 51);
      case 41:
         return jjStopAtPos(0, 52);
      case 42:
         return jjStopAtPos(0, 22);
      case 43:
         jjmatchedKind = 20;
         return jjMoveStringLiteralDfa1_0(0x2000000L, 0x0L);
      case 44:
         return jjStopAtPos(0, 57);
      case 45:
         jjmatchedKind = 21;
         return jjMoveStringLiteralDfa1_0(0x4000000L, 0x0L);
      case 47:
         return jjStopAtPos(0, 23);
      case 58:
         return jjStopAtPos(0, 58);
      case 59:
         return jjStopAtPos(0, 59);
      case 60:
         jjmatchedKind = 62;
         return jjMoveStringLiteralDfa1_0(0x2000000000000000L, 0x0L);
      case 61:
         jjmatchedKind = 19;
         return jjMoveStringLiteralDfa1_0(0x1000000000000000L, 0x0L);
      case 62:
         jjmatchedKind = 64;
         return jjMoveStringLiteralDfa1_0(0x8000000000000000L, 0x0L);
      case 63:
         return jjStopAtPos(0, 17);
      case 91:
         return jjStopAtPos(0, 55);
      case 93:
         return jjStopAtPos(0, 56);
      case 94:
         return jjStopAtPos(0, 24);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_0(0x200000000080L, 0x0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_0(0x1c0000040L, 0xc0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0x400400000000L, 0x10L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa1_0(0x4L, 0x8L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_0(0x100000000000L, 0x0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa1_0(0x1000000000L, 0x0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0x1000000000000L, 0x0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa1_0(0x2L, 0x0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa1_0(0x800000000L, 0x0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa1_0(0x10000000000L, 0x0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa1_0(0x284e020000038L, 0x0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_0(0x200L, 0x0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_0(0x20218000000L, 0x0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa1_0(0x80000000100L, 0x0L);
      case 123:
         return jjStopAtPos(0, 53);
      case 124:
         return jjMoveStringLiteralDfa1_0(0x400L, 0x0L);
      case 125:
         return jjStopAtPos(0, 54);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 10:
         if ((active1 & 0x40000L) != 0L)
            return jjStopAtPos(1, 82);
         break;
      case 38:
         if ((active0 & 0x2000L) != 0L)
            return jjStopAtPos(1, 13);
         return jjMoveStringLiteralDfa2_0(active0, 0x4000L, active1, 0x4L);
      case 61:
         if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(1, 25);
         else if ((active0 & 0x4000000L) != 0L)
            return jjStopAtPos(1, 26);
         else if ((active0 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(1, 60);
         else if ((active0 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(1, 61);
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(1, 63);
         else if ((active1 & 0x2L) != 0L)
            return jjStopAtPos(1, 65);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x901320000100L, active1, 0xc0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x480400000200L, active1, 0L);
      case 73:
      case 105:
         if ((active0 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 27;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0xe810000002L, active1, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000000L, active1, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x8L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0xc0000040L, active1, 0x30L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x20500000000b0L, active1, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000000L, active1, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000008L, active1, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x4L, active1, 0L);
      case 124:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(1, 10);
         else if ((active0 & 0x800L) != 0L)
            return jjStopAtPos(1, 11);
         return jjMoveStringLiteralDfa2_0(active0, 0x1000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 38:
         if ((active0 & 0x4000L) != 0L)
            return jjStopAtPos(2, 14);
         break;
      case 66:
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x8L, active1, 0x10L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x201000000000L, active1, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000000L, active1, 0x80L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000002L, active1, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x2040000000010L, active1, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x100200000000L, active1, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x20080000000L, active1, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0xe050000040L, active1, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x20L, active1, 0x20L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000000L, active1, 0L);
      case 82:
      case 114:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(2, 8, 1);
         return jjMoveStringLiteralDfa3_0(active0, 0x880020000080L, active1, 0x40L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x400100000000L, active1, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x204L, active1, 0x8L);
      case 124:
         if ((active0 & 0x1000L) != 0L)
            return jjStopAtPos(2, 12);
         break;
      case 194:
      case 226:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x4L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(3, 29, 1);
         return jjMoveStringLiteralDfa4_0(active0, 0x1020000000000L, active1, 0x40L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000000L, active1, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000000L, active1, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa4_0(active0, 0xa11400000080L, active1, 0x88L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000004L, active1, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x8L, active1, 0x30L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000000L, active1, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x40800000002L, active1, 0L);
      case 79:
      case 111:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(3, 28, 1);
         else if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(3, 32, 1);
         return jjMoveStringLiteralDfa4_0(active0, 0x200L, active1, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000L, active1, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000040L, active1, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0xe040000020L, active1, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0x10L, active1, 0L);
      case 161:
         if ((active1 & 0x4L) != 0L)
            return jjStopAtPos(3, 66);
         break;
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x8e000000010L, active1, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x40400000000L, active1, 0x40L);
      case 69:
      case 101:
         if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(4, 68, 1);
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000064L, active1, 0x20L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0x80L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000008L, active1, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x210000000000L, active1, 0x80L);
      case 79:
      case 111:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 44, 1);
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000000L, active1, 0L);
      case 82:
      case 114:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(4, 33, 1);
         else if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 36, 1);
         return jjMoveStringLiteralDfa5_0(active0, 0x1020080000200L, active1, 0x8L);
      case 83:
      case 115:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 47, 1);
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000L, active1, 0L);
      case 90:
      case 122:
         return jjMoveStringLiteralDfa5_0(active0, 0x2L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1);
      return 5;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(5, 71, 1);
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000000L, active1, 0x20L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x8L, active1, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x280000000010L, active1, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000000L, active1, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa6_0(active0, 0x20L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x60000000000L, active1, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x80L, active1, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x400040000204L, active1, 0L);
      case 79:
      case 111:
         if ((active0 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(5, 1, 1);
         else if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(5, 67, 1);
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000L, active1, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0xe800000040L, active1, 0L);
      case 83:
      case 115:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 49, 1);
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000L, active1, 0x40L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1);
      return 6;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa7_0(active0, 0xe000000000L, active1, 0L);
      case 65:
      case 97:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(6, 9, 1);
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000L, active1, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000000L, active1, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000000004L, active1, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa7_0(active0, 0x280000000000L, active1, 0x40L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x20L, active1, 0L);
      case 78:
      case 110:
         if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(6, 69, 1);
         break;
      case 79:
      case 111:
         if ((active0 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(6, 3, 1);
         else if ((active0 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(6, 4, 1);
         else if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(6, 7, 1);
         else if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(6, 34, 1);
         break;
      case 80:
      case 112:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000000000L, active1, 0L);
      case 82:
      case 114:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 40, 1);
         break;
      case 83:
      case 115:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 48, 1);
         break;
      case 85:
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000000L, active1, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa7_0(active0, 0x40L, active1, 0L);
      case 90:
      case 122:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1);
      return 7;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(7, 6, 1);
         return jjMoveStringLiteralDfa8_0(active0, 0x600c0000000L, active1, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa8_0(active0, 0x20L, active1, 0L);
      case 69:
      case 101:
         if ((active0 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(7, 2, 1);
         return jjMoveStringLiteralDfa8_0(active0, 0x400000000000L, active1, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x200000000000L, active1, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000000000L, active1, 0L);
      case 80:
      case 112:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 37, 1);
         break;
      case 82:
      case 114:
         if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(7, 70, 1);
         return jjMoveStringLiteralDfa8_0(active0, 0x80000000000L, active1, 0L);
      case 83:
      case 115:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(7, 35, 1);
         else if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 39, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 76:
      case 108:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 42, 1);
         break;
      case 78:
      case 110:
         return jjMoveStringLiteralDfa9_0(active0, 0x400000000000L);
      case 79:
      case 111:
         if ((active0 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(8, 5, 1);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 43, 1);
         break;
      case 82:
      case 114:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(8, 30, 1);
         else if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(8, 31, 1);
         else if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 38, 1);
         else if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 41, 1);
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa9_0(active0, 0x200000000000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, 0L);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 45, 1);
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa10_0(active0, 0x400000000000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 46, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_0(9, active0, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 39;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 72)
                        kind = 72;
                     { jjCheckNAddStates(0, 2); }
                  }
                  else if (curChar == 39)
                     { jjAddStates(3, 5); }
                  else if (curChar == 34)
                     { jjAddStates(6, 7); }
                  else if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 9;
                  else if (curChar == 62)
                     jjstateSet[jjnewStateCnt++] = 3;
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 77)
                        kind = 77;
                  }
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 73)
                     kind = 73;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 2:
                  if ((0x3ff000000000000L & l) != 0L && kind > 77)
                     kind = 77;
                  break;
               case 3:
                  if (curChar == 62)
                     { jjCheckNAddStates(8, 10); }
                  break;
               case 4:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     { jjCheckNAddStates(8, 10); }
                  break;
               case 5:
                  if ((0x2400L & l) != 0L && kind > 84)
                     kind = 84;
                  break;
               case 6:
                  if (curChar == 10 && kind > 84)
                     kind = 84;
                  break;
               case 7:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if (curChar == 62)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 9:
                  if (curChar == 45)
                     { jjCheckNAddTwoStates(10, 11); }
                  break;
               case 10:
                  if ((0xffffdfffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(10, 11); }
                  break;
               case 11:
                  if (curChar == 45)
                     { jjCheckNAddStates(11, 13); }
                  break;
               case 12:
                  if ((0xbfffdfffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(13, 11); }
                  break;
               case 13:
                  if ((0xffffdfffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(13, 11); }
                  break;
               case 14:
                  if (curChar == 62 && kind > 85)
                     kind = 85;
                  break;
               case 15:
                  if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 16:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 72)
                     kind = 72;
                  { jjCheckNAddStates(0, 2); }
                  break;
               case 17:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 72)
                     kind = 72;
                  { jjCheckNAdd(17); }
                  break;
               case 18:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(18, 19); }
                  break;
               case 19:
                  if (curChar == 46)
                     { jjCheckNAdd(20); }
                  break;
               case 20:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 74)
                     kind = 74;
                  { jjCheckNAdd(20); }
                  break;
               case 21:
                  if (curChar == 34)
                     { jjAddStates(6, 7); }
                  break;
               case 22:
                  if ((0x3ff000100000000L & l) != 0L)
                     { jjCheckNAddTwoStates(23, 24); }
                  break;
               case 23:
                  if ((0xfff400100000000L & l) != 0L)
                     { jjCheckNAddTwoStates(23, 24); }
                  break;
               case 24:
                  if (curChar == 34 && kind > 75)
                     kind = 75;
                  break;
               case 25:
                  if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 26:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 27:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 28:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 29:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 30:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 31:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 32:
                  if (curChar == 34 && kind > 78)
                     kind = 78;
                  break;
               case 33:
                  if (curChar == 39)
                     { jjAddStates(3, 5); }
                  break;
               case 35:
                  if (curChar == 39 && kind > 50)
                     kind = 50;
                  break;
               case 37:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 38:
                  if (curChar == 39 && kind > 76)
                     kind = 76;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 73)
                        kind = 73;
                     { jjCheckNAdd(1); }
                  }
                  if ((0x7e0000007eL & l) != 0L)
                  {
                     if (kind > 77)
                        kind = 77;
                  }
                  break;
               case 1:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 73)
                     kind = 73;
                  { jjCheckNAdd(1); }
                  break;
               case 2:
                  if ((0x7e0000007eL & l) != 0L && kind > 77)
                     kind = 77;
                  break;
               case 4:
                  { jjAddStates(8, 10); }
                  break;
               case 10:
                  { jjCheckNAddTwoStates(10, 11); }
                  break;
               case 12:
               case 13:
                  { jjCheckNAddTwoStates(13, 11); }
                  break;
               case 22:
               case 23:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(23, 24); }
                  break;
               case 26:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 27:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 28:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 29:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 30:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 31:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 34:
                  if ((0x800000008000L & l) != 0L)
                     { jjCheckNAdd(35); }
                  break;
               case 36:
                  if ((0x4000000040000L & l) != 0L)
                     { jjCheckNAdd(35); }
                  break;
               case 37:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 4:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjAddStates(8, 10); }
                  break;
               case 10:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjCheckNAddTwoStates(10, 11); }
                  break;
               case 12:
               case 13:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjCheckNAddTwoStates(13, 11); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 39 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   17, 18, 19, 34, 36, 37, 22, 25, 4, 5, 7, 11, 12, 14, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, "\174\174", 
"\46\174", "\41\174\174", "\46\46", "\41\46\46", "\41", "\45", "\77", "\44", "\75", 
"\53", "\55", "\52", "\57", "\136", "\53\75", "\55\75", null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, "\50", "\51", "\173", "\175", "\133", "\135", "\54", 
"\72", "\73", "\75\75", "\74\75", "\74", "\76\75", "\76", "\41\75", null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public proyectoTokenManager(SimpleCharStream stream){

      if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public proyectoTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream)
  {
    jjmatchedPos = jjnewStateCnt = 0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 39; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream, int lexState)
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xffffffffffffffffL, 0x7fffL, 
};
static final long[] jjtoSkip = {
   0x0L, 0x3f8000L, 
};
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[39];
    private final int[] jjstateSet = new int[2 * 39];

    
    protected char curChar;
}
