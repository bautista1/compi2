package Analizador1;

/* Generated By:JavaCC: Do not edit this line. proyectoConstants.java */

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface proyectoConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int LIENZOT = 1;
  /** RegularExpression Id. */
  int EXTIENDE = 2;
  /** RegularExpression Id. */
  int PUBLICO = 3;
  /** RegularExpression Id. */
  int PRIVADO = 4;
  /** RegularExpression Id. */
  int PROTEGIDO = 5;
  /** RegularExpression Id. */
  int CONSERVAR = 6;
  /** RegularExpression Id. */
  int ARREGLO = 7;
  /** RegularExpression Id. */
  int VAR = 8;
  /** RegularExpression Id. */
  int RETORNO = 9;
  /** RegularExpression Id. */
  int OR = 10;
  /** RegularExpression Id. */
  int XOR = 11;
  /** RegularExpression Id. */
  int NOR = 12;
  /** RegularExpression Id. */
  int AND = 13;
  /** RegularExpression Id. */
  int NAND = 14;
  /** RegularExpression Id. */
  int NOT = 15;
  /** RegularExpression Id. */
  int INICIO = 16;
  /** RegularExpression Id. */
  int FIN = 17;
  /** RegularExpression Id. */
  int DELIMITADOR = 18;
  /** RegularExpression Id. */
  int ASIGNACION = 19;
  /** RegularExpression Id. */
  int PLUS = 20;
  /** RegularExpression Id. */
  int MINUS = 21;
  /** RegularExpression Id. */
  int MULTIPLY = 22;
  /** RegularExpression Id. */
  int DIVIDE = 23;
  /** RegularExpression Id. */
  int POT = 24;
  /** RegularExpression Id. */
  int INCR = 25;
  /** RegularExpression Id. */
  int DECR = 26;
  /** RegularExpression Id. */
  int IF = 27;
  /** RegularExpression Id. */
  int ELSE = 28;
  /** RegularExpression Id. */
  int FOR = 29;
  /** RegularExpression Id. */
  int CONTINUE = 30;
  /** RegularExpression Id. */
  int SWITCH = 31;
  /** RegularExpression Id. */
  int CASE = 32;
  /** RegularExpression Id. */
  int SALIR = 33;
  /** RegularExpression Id. */
  int DEFAUL = 34;
  /** RegularExpression Id. */
  int WHILE = 35;
  /** RegularExpression Id. */
  int DO = 36;
  /** RegularExpression Id. */
  int PUNTO = 37;
  /** RegularExpression Id. */
  int PINTAROR = 38;
  /** RegularExpression Id. */
  int PINTARCAD = 39;
  /** RegularExpression Id. */
  int ORDENAR = 40;
  /** RegularExpression Id. */
  int SUMARIZAR = 41;
  /** RegularExpression Id. */
  int MAIN = 42;
  /** RegularExpression Id. */
  int VERDADERO = 43;
  /** RegularExpression Id. */
  int FALSO = 44;
  /** RegularExpression Id. */
  int ASCENDENTE = 45;
  /** RegularExpression Id. */
  int DESCENDENTE = 46;
  /** RegularExpression Id. */
  int PARES = 47;
  /** RegularExpression Id. */
  int IMPARES = 48;
  /** RegularExpression Id. */
  int PRIMOS = 49;
  /** RegularExpression Id. */
  int FIGURA = 50;
  /** RegularExpression Id. */
  int PARA = 51;
  /** RegularExpression Id. */
  int PARC = 52;
  /** RegularExpression Id. */
  int LLAVEA = 53;
  /** RegularExpression Id. */
  int LLAVEC = 54;
  /** RegularExpression Id. */
  int CORA = 55;
  /** RegularExpression Id. */
  int CORC = 56;
  /** RegularExpression Id. */
  int COMA = 57;
  /** RegularExpression Id. */
  int DOSPUNTOS = 58;
  /** RegularExpression Id. */
  int PCOMA = 59;
  /** RegularExpression Id. */
  int EQUIVALENCIA = 60;
  /** RegularExpression Id. */
  int MENORIGUAL = 61;
  /** RegularExpression Id. */
  int MENORQ = 62;
  /** RegularExpression Id. */
  int MAYORIGUAL = 63;
  /** RegularExpression Id. */
  int MAYORQ = 64;
  /** RegularExpression Id. */
  int DISTINTO = 65;
  /** RegularExpression Id. */
  int NULO = 66;
  /** RegularExpression Id. */
  int INTL = 67;
  /** RegularExpression Id. */
  int FLOATL = 68;
  /** RegularExpression Id. */
  int BOOLL = 69;
  /** RegularExpression Id. */
  int CHARL = 70;
  /** RegularExpression Id. */
  int STRINGL = 71;
  /** RegularExpression Id. */
  int NUM = 72;
  /** RegularExpression Id. */
  int IDEN = 73;
  /** RegularExpression Id. */
  int DECIMAL = 74;
  /** RegularExpression Id. */
  int CADENA = 75;
  /** RegularExpression Id. */
  int CARAC = 76;
  /** RegularExpression Id. */
  int SIMB = 77;
  /** RegularExpression Id. */
  int COLOR = 78;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\"lienzo\"",
    "\"extiende\"",
    "\"publico\"",
    "\"privado\"",
    "\"protegido\"",
    "\"conserva\"",
    "\"arreglo\"",
    "\"var\"",
    "\"retorna\"",
    "\"||\"",
    "\"&|\"",
    "\"!||\"",
    "\"&&\"",
    "\"!&&\"",
    "\"!\"",
    "\"%\"",
    "\"?\"",
    "\"$\"",
    "\"=\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"^\"",
    "\"+=\"",
    "\"-=\"",
    "\"si\"",
    "\"sino\"",
    "\"para\"",
    "\"continuar\"",
    "\"comprobar\"",
    "\"caso\"",
    "\"salir\"",
    "\"defecto\"",
    "\"mientras\"",
    "\"hacer\"",
    "\"pintar_p\"",
    "\"pintar_or\"",
    "\"pintar_s\"",
    "\"ordenar\"",
    "\"sumarizar\"",
    "\"principal\"",
    "\"verdadero\"",
    "\"falso\"",
    "\"ascendente\"",
    "\"descendente\"",
    "\"pares\"",
    "\"impares\"",
    "\"primos\"",
    "<FIGURA>",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\",\"",
    "\":\"",
    "\";\"",
    "\"==\"",
    "\"<=\"",
    "\"<\"",
    "\">=\"",
    "\">\"",
    "\"!=\"",
    "\"!&\\u00c2\\u00a1\"",
    "\"entero\"",
    "\"doble\"",
    "\"boolean\"",
    "\"caracter\"",
    "\"cadena\"",
    "<NUM>",
    "<IDEN>",
    "<DECIMAL>",
    "<CADENA>",
    "<CARAC>",
    "<SIMB>",
    "<COLOR>",
    "\" \"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\r\\n\"",
    "\"\\t\"",
    "<token of kind 84>",
    "<token of kind 85>",
  };

}
